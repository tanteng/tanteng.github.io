<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Develop on 小谈博客</title>
    <link>http://tanteng.me/categories/develop/</link>
    <description>Recent content in Develop on 小谈博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Oct 2018 03:29:00 +0000</lastBuildDate>
    
	<atom:link href="http://tanteng.me/categories/develop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySQL 字段为 NULL 的查询问题</title>
      <link>http://tanteng.me/2018/10/mysql-select-null/</link>
      <pubDate>Tue, 30 Oct 2018 03:29:00 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/10/mysql-select-null/</guid>
      <description>假设 code 字段是可为 NULL &amp;hellip; AND code NOT IN () &amp;hellip; &amp;hellip; AND (code IS NULL or code NOT IN()) &amp;hellip; 是不一样的，第一个查不出 code IS NULL 的数据。 https://stackoverflow.com/questions/3536670/mysql-selecting-rows-where-a-column-is-null SQL NULL&amp;#8217;s special, and you have to do WHERE field IS NULL, as NULL cannot be equal to anything, including itself (ie: NULL =</description>
    </item>
    
    <item>
      <title>HTTP 204 状态码</title>
      <link>http://tanteng.me/2018/10/http-204/</link>
      <pubDate>Fri, 19 Oct 2018 06:15:51 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/10/http-204/</guid>
      <description>HTTP协议中 204 No Content 成功状态响应码表示目前请求成功，但客户端不需要更新其现有页面。204 响应默认是可以被缓存的。在响应中需要包含头信息 ETa</description>
    </item>
    
    <item>
      <title>Laravel 错误和异常处理用法</title>
      <link>http://tanteng.me/2018/09/laravel-error-handing/</link>
      <pubDate>Sat, 15 Sep 2018 05:41:51 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/09/laravel-error-handing/</guid>
      <description>&lt;p&gt;Laravel 自带错误和异常处理，App\Exceptions\Handler 负责上报异常和如何返回内容，以及未登录的处理。App\Exceptions\Handler 位于 app\Exceptions\Handler.php，下面介绍这个类的属性和用法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 用户授权系统使用小结</title>
      <link>http://tanteng.me/2018/09/laravel-authorize-gates/</link>
      <pubDate>Fri, 14 Sep 2018 11:04:59 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/09/laravel-authorize-gates/</guid>
      <description>&lt;h3 id=&#34;-1&#34;&gt;基本用法&lt;/h3&gt;

&lt;p&gt;示例&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$this-&amp;gt;authorize(&amp;lsquo;update&amp;rsquo;, $post);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;第一个参数 $ability,表示具备什么权限。第二个参数 $post，是一个模型实例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis生产环境查看数据库键</title>
      <link>http://tanteng.me/2018/09/redis-scan/</link>
      <pubDate>Wed, 05 Sep 2018 14:17:03 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/09/redis-scan/</guid>
      <description>如果要在redis生产环境服务器查看有哪些数据库键，当数据量特别大的时候，千万不要用 keys * ，这样会卡死，可以使用 scan 命令迭代。</description>
    </item>
    
    <item>
      <title>Redis pipeline 和事务</title>
      <link>http://tanteng.me/2018/09/redis-pipeline-transaction/</link>
      <pubDate>Tue, 04 Sep 2018 16:25:09 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/09/redis-pipeline-transaction/</guid>
      <description>Redis pipeline 流水线处理命令，只是可以减少通信，而不能保证原子性。用 multi 包裹起来的是事务。</description>
    </item>
    
    <item>
      <title>Laravel chunk 使用注意的问题</title>
      <link>http://tanteng.me/2018/08/laravel-chunk-tip/</link>
      <pubDate>Tue, 14 Aug 2018 15:39:12 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/08/laravel-chunk-tip/</guid>
      <description>&lt;p&gt;使用 Laravel 的 chunk 可以用来优化大结果集的查询，提供分块处理数据的方法，但是如下的例子就会有问题：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true &#34;&gt;User::where(&amp;lsquo;approved&amp;rsquo;, 0)-&amp;gt;chunk(100, function ($users) {
  foreach ($users as $user) {
    $user-&amp;gt;update([&amp;lsquo;approved&amp;rsquo; =&amp;gt; 1]);
  }
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;原因在于第一次查询：&lt;/p&gt;

&lt;p&gt;select * from users where approved = 0 limit 100 offset 0;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 中为何不使用 blpop 取队列？</title>
      <link>http://tanteng.me/2018/08/laravel-why-not-use-blpop/</link>
      <pubDate>Tue, 31 Jul 2018 17:18:21 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/08/laravel-why-not-use-blpop/</guid>
      <description>&lt;p&gt;Redis 的 list 数据结构常用来做消息队列，通常使用的命令有 lpop/rpop ，还有带阻塞版的 blpop/brpop 等。blpop 的优点是避免一直轮询占用资源，而且支持多个列表作为参数并按照顺序弹出数据，如 blpop high low 30，可以更方便实现队列的优先级。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 中间件原理</title>
      <link>http://tanteng.me/2018/07/understand-laravel-middleware/</link>
      <pubDate>Sun, 29 Jul 2018 16:25:08 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/07/understand-laravel-middleware/</guid>
      <description>&lt;p&gt;Laravel 的中间件机制提供了一种管道的方式，每个 HTTP 请求经过一个又一个中间件进行过滤，Laravel 内置了很多中间件，比如 CSRF 机制，身份认证，Cookie 加密，设置 Cookie 等等。&lt;/p&gt;

&lt;p&gt;本文就来探究 Laravel 中间件的实现原理，看 Laravel 如何把 PHP 的 array_reduce 函数和闭包用到了极致。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis 的事务到底是不是原子性的</title>
      <link>http://tanteng.me/2018/06/redis-transaction-atomic/</link>
      <pubDate>Sun, 24 Jun 2018 02:43:46 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/06/redis-transaction-atomic/</guid>
      <description>&lt;p&gt;ACID 中关于原子性的定义：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>本周阅读清单20180604</title>
      <link>http://tanteng.me/2018/06/reding-list-10/</link>
      <pubDate>Mon, 18 Jun 2018 14:36:24 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/06/reding-list-10/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;深入介绍 Golang 中的 bufio.Scanner
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/37673679&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow&#34;&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/37673679&#34;&gt;https://zhuanlan.zhihu.com/p/37673679&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Redis 的通信协议
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://redisdoc.com/topic/protocol.html&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow&#34;&gt;&lt;a href=&#34;http://redisdoc.com/topic/protocol.html&#34;&gt;http://redisdoc.com/topic/protocol.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用 Redis 实现支持优先级的消息队列
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/laozhbook/p/redis_queue.html&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow&#34;&gt;&lt;a href=&#34;https://www.cnblogs.com/laozhbook/p/redis_queue.html&#34;&gt;https://www.cnblogs.com/laozhbook/p/redis_queue.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 事件系统用法总结</title>
      <link>http://tanteng.me/2018/06/laravel-event/</link>
      <pubDate>Sun, 17 Jun 2018 02:10:52 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/06/laravel-event/</guid>
      <description>&lt;p&gt;Laravel 的事件提供了一个简单的观察者实现，能够订阅和监听应用中发生的各种事件。事件类保存在 app/Events 目录中，而这些事件的的监听器则被保存在 app/Listeners 目录下。这些目录只有当你使用 Artisan 命令来生成事件和监听器时才会被自动创建。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 VS Code 断点调试 golang 项目</title>
      <link>http://tanteng.me/2018/05/vscode-debug-golang/</link>
      <pubDate>Tue, 29 May 2018 06:34:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/05/vscode-debug-golang/</guid>
      <description>&lt;p&gt;在 golang 开发中进行调试，调试手段除了打印输出、打印日志、单元测试之外，还可以通过 IDE 进行断点调试，这是一个更加直观的方式，这里简单介绍 Visual Studio Code 调试 Golang 项目。&lt;/p&gt;

&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;

&lt;p&gt;如果没有安装 delve 插件，会报错：&lt;/p&gt;

&lt;p&gt;Failded to continue:&amp;#8221;Cannot find Delve debugger. Install from &lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;https://github.com/derekparker/delve&lt;/a&gt; &amp;amp; ensure it is in your &amp;#8220;GOPATH/bin&amp;#8221; or &amp;#8220;PATH&amp;#8221;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Laravel 中使用 gulp 构建前端资源</title>
      <link>http://tanteng.me/2018/05/laravel-5-5-gulp/</link>
      <pubDate>Mon, 28 May 2018 12:45:32 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/05/laravel-5-5-gulp/</guid>
      <description>&lt;p&gt;最近把自己主页前端代码进一步规范了，使用 npm 引入一些前端的资源库，在 Laravel 5.5 中使用 gulp 遇到一些坑。&lt;/p&gt;

&lt;p&gt;mix.sass 无法直接使用 node_modules 文件夹里的，只能用 resource/assets/sass/app.scss 这个文件生成 css，然后和其他的 css 合并为一个文件。&lt;/p&gt;

&lt;p&gt;mix.scripts 可以使用 node_modules 文件夹里的 js，并和自己的 js 合并为一个文件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在旧有 PHP 系统上集成七牛云 PHP-SDK</title>
      <link>http://tanteng.me/2018/05/php-qiniu-sdk-not-support-composer/</link>
      <pubDate>Mon, 28 May 2018 11:32:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/05/php-qiniu-sdk-not-support-composer/</guid>
      <description>&lt;p&gt;最近在一个古老的 PHP 系统上使用七牛云的上传图片功能，需要集成七牛云提供的 PHP-SDK，这个系统暂时不支持 composer，还好七牛云这个 SDK 不依赖其他的包，于是事情就变得简单了，只需要提供一个 sql_autoload_register 方法注册自动加载机制就可以使用了。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;&amp;lt;?php&lt;/p&gt;

&lt;p&gt;use Qiniu\Auth;
use Qiniu\Storage\UploadManager;&lt;/p&gt;

&lt;p&gt;//本框架不支持 composer，为了用七牛云，又不敢在全局用 sql_autoload_register，目前就在当前活动引入七牛云的 SDK
spl_autoload_register(&amp;lsquo;classLoader&amp;rsquo;);&lt;/p&gt;

&lt;p&gt;function classLoader($class)
{
    $path = str_replace(&amp;rsquo;\&amp;rsquo;, DIRECTORY_SEPARATOR, $class);
    $file = SDK_PATH . &amp;lsquo;vendor/&amp;rsquo; . $path . &amp;lsquo;.php&amp;rsquo;;
    if (file_exists($file)) {
        require_once $file;
    }
}&lt;/p&gt;

&lt;p&gt;require_once SDK_PATH . &amp;lsquo;vendor/Qiniu/functions.php&amp;rsquo;;&lt;/p&gt;

&lt;p&gt;class xxxx extends baseIndex{&lt;/p&gt;

&lt;p&gt;//&lt;/p&gt;

&lt;p&gt;}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Laravel 中使用 DataTables 插件</title>
      <link>http://tanteng.me/2018/05/laravel-datatables/</link>
      <pubDate>Mon, 28 May 2018 11:02:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/05/laravel-datatables/</guid>
      <description>&lt;p&gt;DataTables 是一个 jQuery 的表格插件，记录一下在 Laravel 中使用的常用功能和用法，比如 ajax 获取数据，自定义搜索，效果展现，选项说明等等，有一些细节记录下来方便以后查看。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 查找数组中第 K 大的元素</title>
      <link>http://tanteng.me/2018/05/php-find-the-k-largest/</link>
      <pubDate>Fri, 25 May 2018 08:36:17 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/05/php-find-the-k-largest/</guid>
      <description>&lt;p&gt;比如一个数组 [33, 5, 1, 90, 99, 3, 45, 13]，要找出第 K 大的元素，首先可以使用快速排序算法对数组进行排序，然后从排序后的数组中就很容易得到这个元素。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WEB开发——用户认证模块</title>
      <link>http://tanteng.me/2018/05/web-auth/</link>
      <pubDate>Mon, 21 May 2018 04:55:17 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/05/web-auth/</guid>
      <description>&lt;p&gt;一个 WEB 项目，用户认证模块几乎是必不可少的，除非不需要用户登陆使用，用户认证的方式主要有基于 Basic 的认证，基于 session 的方案，JWT 方案等。以传统的 session 方案说明，无论哪种方式，它至少包含下列的几个方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注册（严格说不属于用户认证模块）&lt;/li&gt;
&lt;li&gt;登录&lt;/li&gt;
&lt;li&gt;退出&lt;/li&gt;
&lt;li&gt;重置密码&lt;/li&gt;
&lt;li&gt;基本权限（权限管理也可以和用户认证分开）&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Golang 统计字符串字数</title>
      <link>http://tanteng.me/2018/05/golang-str-length/</link>
      <pubDate>Wed, 02 May 2018 02:52:22 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/05/golang-str-length/</guid>
      <description>&lt;p&gt;比如新浪微博发微博的输入框有一个已输入字数的统计，它的规则推测是：汉字和中文标点算 1 个字数，英文和其他符号算 0.5 个字数。不足 1 个字算 1 个。大家可以去微博体验一下计算方式。&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-12274 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2018/05/wx_20180509104614-1.png&#34; alt=&#34;&#34; width=&#34;591&#34; height=&#34;157&#34; /&gt;&lt;/p&gt;

&lt;p&gt;golang 可以使用正则和 unicode 包的方法判断。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 模型间关系设置分表方法</title>
      <link>http://tanteng.me/2018/04/laravel-relationships-settable/</link>
      <pubDate>Thu, 19 Apr 2018 11:49:32 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/04/laravel-relationships-settable/</guid>
      <description>&lt;p&gt;在实际开发中经常用到分库分表，比如用户表分成 100 张，那么这个时候查询数据需要设置分表，比如 Laravel 的 Model 类中提供了 setTable 方法：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/**
 * Set the table associated with the model.
 *
 * @param  string  $table
 * @return $this
 */
public function setTable($table)
{
    $this-&amp;gt;table = $table;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return $this;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP知识整理之——PHP基础、WEB安全、网络</title>
      <link>http://tanteng.me/2018/04/php-interview-2/</link>
      <pubDate>Tue, 10 Apr 2018 03:11:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/04/php-interview-2/</guid>
      <description>&lt;p&gt;本篇文章是PHP知识系统整理系列之——PHP基础、WEB安全、网络，包括 PSR 规范，PHP7特性和性能提升，HTTP、HTTPS、TCP、WebSocket协议，WEB安全和计算机网络的内容。以及 PHP session 回收，php-fpm 调优，HTTP/2 等知识点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Docker 搭建开发环境</title>
      <link>http://tanteng.me/2018/03/docker-dev-environment/</link>
      <pubDate>Thu, 29 Mar 2018 02:48:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/03/docker-dev-environment/</guid>
      <description>&lt;p&gt;做了一次分享，主题《使用 Docker 搭建开发环境》，简单介绍了一下 Docker 的概念，演示了使用 Docker-compose 构建全套 PHP 环境。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2018/03/62669ad9gy1fprunalxubj219c0xqaev.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-11994&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2018/03/62669ad9gy1fprunalxubj219c0xqaev.jpg&#34; alt=&#34;&#34; width=&#34;1024&#34; height=&#34;762&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP写时复制（Copy On Write）</title>
      <link>http://tanteng.me/2018/03/php-cow/</link>
      <pubDate>Mon, 26 Mar 2018 14:04:07 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/03/php-cow/</guid>
      <description>&lt;p&gt;一个例子：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;?php
$foo = 1;
$bar = $foo;
echo $foo + $bar;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;变量 $foo 赋值给变量 $bar，这两个变量具有相同的值，没有必要新申请内存空间，他们可以共享同一块内存。在很多场景下PHP 的 COW 对内存进行优化。比如：变量的多次赋值、函数参数传递，并在函数体内修改实参等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 依赖注入源码解析</title>
      <link>http://tanteng.me/2018/01/laravel-dependency/</link>
      <pubDate>Thu, 18 Jan 2018 09:25:57 +0000</pubDate>
      
      <guid>http://tanteng.me/2018/01/laravel-dependency/</guid>
      <description>&lt;p&gt;在 Laravel 的控制器的构造方法或者成员方法，都可以通过类型约束的方式使用依赖注入，如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;public function store(Request $request)
{
    //TODO
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里 $request 参数就使用了&lt;a href=&#34;http://php.net/manual/zh/language.oop5.typehinting.php&#34; target=&#34;_blank&#34; rel=&#34;noopener nofollow&#34;&gt;&lt;strong&gt;类型约束&lt;/strong&gt;&lt;/a&gt;，Request 是一个类:\Illuminate\Http\Request，表示参数必须是这个类或子类。&lt;/p&gt;

&lt;p&gt;本文通过分析 Laravel 的源码，看为什么方法中不需要传入实例就可以直接使用 Request 呢？只是框架自动帮我们实例化并传参了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么 Laravel 会重复执行同一个队列任务？</title>
      <link>http://tanteng.me/2017/12/laravel-queue-excute/</link>
      <pubDate>Sun, 24 Dec 2017 07:49:30 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/12/laravel-queue-excute/</guid>
      <description>&lt;p&gt;在 Laravel 中使用 Redis 处理队列任务，框架提供的功能非常强大，但是最近遇到一个问题，就是发现一个任务被多次执行，这是为什么呢？&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-11887&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2017/12/laravel.jpg&#34; alt=&#34;&#34; width=&#34;380&#34; height=&#34;260&#34; /&gt;&lt;/p&gt;

&lt;p&gt;先说原因：因为在 Laravel 中如果一个队列（任务）执行时间大于 60 秒，就会被认为执行失败并重新加入队列中，这样就会导致重复执行同一个任务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel Redis 多个进程同时取队列问题</title>
      <link>http://tanteng.me/2017/12/laravel-supervisor-queue/</link>
      <pubDate>Sat, 23 Dec 2017 11:26:19 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/12/laravel-supervisor-queue/</guid>
      <description>&lt;p&gt;&lt;strong&gt;开启多个进程处理队列会重复读取 Redis 中队列吗？是否因此导致重复执行任务？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用 Supervisor 监听 Laravel 队列任务，其中 Supervisor 的配置如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true&#34;&gt;[program:laravel-worker]
process_name=%(program&lt;em&gt;name)s&lt;/em&gt;%(process_num)02d
command=php /var/www/xxx.cn/artisan queue:work &amp;ndash;queue=sendfile &amp;ndash;tries=3 &amp;ndash;daemon
autostart=true
autorestart=true
numprocs=8
redirect_stderr=true
stdout_logfile=/var/www/xxx.cn/worker.log
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;注意 numprocs = 8，代表开启 8 个进程来执行 command 中的命令。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 数据库设计及性能优化Tips</title>
      <link>http://tanteng.me/2017/12/mysql-optimize-tips/</link>
      <pubDate>Sun, 17 Dec 2017 06:48:05 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/12/mysql-optimize-tips/</guid>
      <description>&lt;p&gt;&lt;strong&gt;规则1&lt;/strong&gt;：一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。&lt;/p&gt;

&lt;p&gt;注意：MyISAM存储引擎 B-tree索引有一个很大的限制：参与一个索引的所有字段的长度之和不能超过1000字节。另外MyISAM数据和索引是分开，而InnoDB的数据存储是按聚簇(cluster)索引有序排列的，主键是默认的聚簇(cluster)索引，因此MyISAM虽然在一般情况下，查询性能比InnoDB高，但InnoDB的以主键为条件的查询性能是非常高的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Laravel 消息队列要注意的问题</title>
      <link>http://tanteng.me/2017/12/laravel-queue-tips/</link>
      <pubDate>Mon, 11 Dec 2017 10:08:13 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/12/laravel-queue-tips/</guid>
      <description>&lt;p&gt;使用 Laravel 的消息队列处理异步任务，Redis 作为队列数据库，Supervisor 监控脚本异常中断并自动重启，这是 Laravel 处理队列任务的标准流程，但是实际中可能还会出现各种各样的问题，为了保证系统&lt;strong&gt;可靠性&lt;/strong&gt;，还要注意几个问题。&lt;/p&gt;

&lt;h3 id=&#34;一-执行失败重试次数设置&#34;&gt;一、执行失败重试次数设置&lt;/h3&gt;

&lt;p&gt;一定要设置任务执行失败重试次数，避免无限失败重试，超过重试次数 Laravel 会默认写到失败任务表中，也可以自己写执行失败后续处理逻辑。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php artisan queue:work redis &amp;ndash;tries=3&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 中“流”的概念</title>
      <link>http://tanteng.me/2017/12/php-stream/</link>
      <pubDate>Thu, 07 Dec 2017 15:03:29 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/12/php-stream/</guid>
      <description>链接：http://www.cunmou.com/phpbook/14.md</description>
    </item>
    
    <item>
      <title>php.ini 几个配置项说明</title>
      <link>http://tanteng.me/2017/12/php-ini-config/</link>
      <pubDate>Mon, 04 Dec 2017 03:56:10 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/12/php-ini-config/</guid>
      <description>&lt;p&gt;php.ini 几个常用的配置项整理。&lt;/p&gt;

&lt;h3 id=&#34;max-execution-time&#34;&gt;max_execution_time&lt;/h3&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true&#34;&gt;; Maximum execution time of each script, in seconds
; &lt;a href=&#34;http://php.net/max-execution-time&#34;&gt;http://php.net/max-execution-time&lt;/a&gt;
; Note: This directive is hardcoded to 0 for the CLI SAPI
max_execution_time = 80&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这设置了脚本被解析器中止之前允许的最大执行时间，单位秒。 这有助于防止写得不好的脚本占尽服务器资源。 默认设置为 30。 从命令行运行 PHP 时，默认设置为 0。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac 上如何打开 /usr/local 路径的文件夹</title>
      <link>http://tanteng.me/2017/11/mac-open-user-local/</link>
      <pubDate>Wed, 29 Nov 2017 14:56:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/11/mac-open-user-local/</guid>
      <description>&lt;p&gt;在 Mac 的 Sublime 或者 Visual Studio Code 中选择打开文件夹，无论如何也无法选择 /usr/local 路径，在 Finder 中还可以使用“前往文件夹”输入路径，不过有解决办法，在终端使用命令行的方式启动软件打开指定文件夹，如：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2017/11/WX20171129-230540@2x.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img class=&#34;alignnone wp-image-11798 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2017/11/WX20171129-230540@2x.png&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;359&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 中的简单工厂和抽象工厂</title>
      <link>http://tanteng.me/2017/11/laravel-factory-pattern/</link>
      <pubDate>Wed, 22 Nov 2017 03:35:54 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/11/laravel-factory-pattern/</guid>
      <description>&lt;p&gt;设计模式之工厂模式分为三种：简单工厂、工厂方法和抽象工厂模式，有时也把简单工厂和工厂方法这两种归为一类。工厂模式属于“创建”型的设计模式，顾名思义用来实例化对象，调用者不需要关心对象的具体创建过程，以达到解耦的目的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何理解 Golang 的参数传递都是值传递？</title>
      <link>http://tanteng.me/2017/11/golang-parameter-passing/</link>
      <pubDate>Sun, 19 Nov 2017 12:22:01 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/11/golang-parameter-passing/</guid>
      <description>&lt;p&gt;在 Golang 中函数之间传递变量时总是以值的方式传递的，无论是 int,string,bool,array 这样的内置类型（或者说原始的类型），还是 slice,channel,map 这样的引用类型，在函数间传递变量时，都是以值的方式传递，也就是说传递的都是值的副本。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 让 for 循环运行一段时间超时自动退出</title>
      <link>http://tanteng.me/2017/11/golang-for-timeout/</link>
      <pubDate>Sat, 18 Nov 2017 14:48:24 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/11/golang-for-timeout/</guid>
      <description>&lt;p&gt;如何控制 for 循环一段时间超时自动退出呢？思路很简单，就是在 for 循环中使用 select 监听 channel，代码如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:go decode:true&#34;&gt;package main&lt;/p&gt;

&lt;p&gt;import (
    &amp;ldquo;fmt&amp;rdquo;
    &amp;ldquo;time&amp;rdquo;
)&lt;/p&gt;

&lt;p&gt;func main() {
    timeout := time.After(time.Second * 10)
    finish := make(chan bool)
    count := 1
    go func() {
        for {
            select {
            case &amp;lt;-timeout:
                fmt.Println(&amp;ldquo;timeout&amp;rdquo;)
                finish &amp;lt;- true
                return
            default:
                fmt.Printf(&amp;ldquo;haha %d\n&amp;rdquo;, count)
                count++
            }
            time.Sleep(time.Second * 1)
        }
    }()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;-finish

fmt.Println(&amp;quot;Finish&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 如何优雅关闭 channel</title>
      <link>http://tanteng.me/2017/11/golang-close-channel/</link>
      <pubDate>Fri, 17 Nov 2017 09:01:50 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/11/golang-close-channel/</guid>
      <description>&lt;p&gt;Golang 内建的 close 方法可以关闭 channel，如果往已经关闭的 channel 发送数据，则会报错：panic: close of closed channel.&lt;/p&gt;

&lt;p&gt;看如下代码，在一段时间内，生产者可以不断往 channel 写入数据，消费者进行处理，一段时间后 channel 关闭了，这个时候如果还有数据往 channel 发送，程序就会报错。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Golang 发送邮件</title>
      <link>http://tanteng.me/2017/11/golang-smtp-send-mail/</link>
      <pubDate>Thu, 16 Nov 2017 09:45:37 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/11/golang-smtp-send-mail/</guid>
      <description>&lt;p&gt;使用 smtp 协议，只需要邮箱服务器主机和端口，和一个发件人帐号，可以使用 Golang 的 smtp 包发送邮件，以下是一个简单示例：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:go decode:true&#34;&gt;// SendToMail 用于发送邮件
func SendToMail(to, subject, body, mailType string) error {
    user := &amp;ldquo;tt@tanteng.me&amp;rdquo;
    password := 123456
    host := smtp.tanteng.me:25
    hp := strings.Split(host, &amp;ldquo;:&amp;ldquo;)
    auth := smtp.PlainAuth(&amp;ldquo;&amp;rdquo;, user, password, hp[0])
    var contentType string
    if mailType == &amp;ldquo;html&amp;rdquo; {
        contentType = &amp;ldquo;Content-Type: text/&amp;rdquo; + mailType + &amp;ldquo;; charset=UTF-8&amp;rdquo;
    } else {
        contentType = &amp;ldquo;Content-Type: text/plain&amp;rdquo; + &amp;ldquo;; charset=UTF-8&amp;rdquo;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msg := []byte(&amp;quot;To: &amp;quot; + to + &amp;quot;\r\nFrom: xx邮箱中心&amp;amp;lt;&amp;quot; + user + &amp;quot;&amp;amp;gt;\r\nSubject: &amp;quot; + subject + &amp;quot;\r\n&amp;quot; + contentType + &amp;quot;\r\n\r\n&amp;quot; + body)
sendTo := strings.Split(to, &amp;quot;;&amp;quot;)
err := smtp.SendMail(host, auth, user, sendTo, msg)
return err
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;重点看 msg 字段，也就是邮件标题，发送者，标题，内容的格式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP-FPM,Nginx,FastCGI 之间的关系</title>
      <link>http://tanteng.me/2017/11/nginx-fastcgi-php-fpm/</link>
      <pubDate>Thu, 09 Nov 2017 08:44:27 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/11/nginx-fastcgi-php-fpm/</guid>
      <description>&lt;p&gt;本文介绍 PHP-FPM,Nginx,FastCGI 三者之间的关系，以及 Nginx 反向代理和负载均衡的配置。&lt;/p&gt;

&lt;h3 id=&#34;php-fpm-nginx-fastcgi-之间的关系&#34;&gt;PHP-FPM,Nginx,FastCGI 之间的关系&lt;/h3&gt;

&lt;p&gt;FastCGI 是一个协议，它是应用程序和 WEB 服务器连接的桥梁。Nginx 并不能直接与 PHP-FPM 通信，而是将请求通过 FastCGI 交给 PHP-FPM 处理。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true&#34;&gt;location ~ .php$ {
    try_files $uri /index.php =404;
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_index index.php;
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 服务提供者和门面模式</title>
      <link>http://tanteng.me/2017/11/laravel-facade-service-provider/</link>
      <pubDate>Sun, 05 Nov 2017 16:30:33 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/11/laravel-facade-service-provider/</guid>
      <description>&lt;p&gt;以 Laravel 自带的文件系统为例，在 config/app.php 的配置文件的 providers 数组中，注册了一个服务提供者：&lt;/p&gt;

&lt;p class=&#34;lang:php decode:true  &#34;&gt;
  Illuminate\Filesystem\FilesystemServiceProvider::class,
&lt;/p&gt;

&lt;p&gt;在 alias 数组中定义了一个门面：&lt;/p&gt;

&lt;p class=&#34;lang:php decode:true  &#34;&gt;
  &amp;#8216;File&amp;#8217; =&gt; Illuminate\Support\Facades\File::class,
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis 实现访问频次限制的几种方式</title>
      <link>http://tanteng.me/2017/10/redis-ip-limit/</link>
      <pubDate>Wed, 25 Oct 2017 14:28:25 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/10/redis-ip-limit/</guid>
      <description>链接： https://www.cnblogs.com/gavanwanggw/p/7240675.html</description>
    </item>
    
    <item>
      <title>PHP intval 转换浮点数精度丢失问题</title>
      <link>http://tanteng.me/2017/10/php-intval-precision/</link>
      <pubDate>Sun, 15 Oct 2017 08:15:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/10/php-intval-precision/</guid>
      <description>&lt;p&gt;在 PHP 和其他一些语言都会存在这个问题，转换浮点数为整数的时候会出现精度丢失，如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;&amp;lt;?php
$n=&amp;ldquo;19.99&amp;rdquo;;
print intval($n*100); // prints 1998&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;解决办法&#34;&gt;解决办法：&lt;/h3&gt;

&lt;p&gt;1.转换成字符串再 intval&lt;/p&gt;

&lt;p&gt;&lt;code&gt;print intval(strval($n*100)); // prints 1999&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.使用 round 函数替代 floatval&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;php -r &amp;ldquo;echo round(19.99*100);&amp;rdquo;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Docker 搭建 Laravel 本地环境</title>
      <link>http://tanteng.me/2017/10/docker-laravel-local-environment/</link>
      <pubDate>Sat, 14 Oct 2017 11:28:48 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/10/docker-laravel-local-environment/</guid>
      <description>&lt;p&gt;Laravel 官方提供 Homestead 和 Valet 作为本地开发环境，Homestead 是一个官方预封装的 Vagrant Box，也就是一个虚拟机，但是跟 docker 比，它占用体积太大，启动速度慢，同时响应速度很慢，现在有了 docker 这种更好的方式，可以轻松方便的搭建整套 PHP 开发环境。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 生成给定范围随机数</title>
      <link>http://tanteng.me/2017/10/mysql-rand-range/</link>
      <pubDate>Mon, 09 Oct 2017 10:32:00 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/10/mysql-rand-range/</guid>
      <description>&lt;p&gt;MySQL 的 rand() 函数是随机生成区间为 [0,1) 的浮点数，那么如何让它生成给定两个整数之间的随机数呢？试了一下这样可行：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:mysql decode:true&#34;&gt;select ROUND(RAND()*(10-1)+1);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;也就是：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true&#34;&gt;select ROUND(RAND()*(max-min)+min);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;经测可行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>服务器返回 502,503,504 原因及解决办法</title>
      <link>http://tanteng.me/2017/10/503-service-unavailable/</link>
      <pubDate>Sun, 08 Oct 2017 14:44:08 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/10/503-service-unavailable/</guid>
      <description>&lt;p&gt;502 bad gateway&lt;/p&gt;

&lt;p&gt;问题原因：服务器作为网关或代理，从上游服务器收到无效响应。&lt;/p&gt;

&lt;p&gt;nginx 在这里充当的是反向代理服务器的角色，是把http协议请求转成fastcgi协议的请求，通过 fastcgi_pass指令传递给 php-fpm进程，当 php-fpm 进程响应的内容是 nginx 无法理解的响应，就会返回 502 bad gateway&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS 使用 brew 安装编译错误</title>
      <link>http://tanteng.me/2017/10/checking-whether-the-c-compiler-works-no/</link>
      <pubDate>Fri, 06 Oct 2017 12:11:47 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/10/checking-whether-the-c-compiler-works-no/</guid>
      <description>&lt;p&gt;在使用 Mac 的 brew 安装一些工具的时候报错：checking whether the C compiler works&amp;#8230; no，如图，这是怎么回事呢？？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2018/10/WX20181006-195406@2x.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img class=&#34;aligncenter wp-image-12633 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2018/10/WX20181006-195406@2x.png&#34; alt=&#34;checking whether the C compiler works... no&#34; width=&#34;1460&#34; height=&#34;874&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laradock 使用 ssh 方式连接 workspace</title>
      <link>http://tanteng.me/2017/09/laradock-ssh-workspace/</link>
      <pubDate>Thu, 21 Sep 2017 06:39:26 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/09/laradock-ssh-workspace/</guid>
      <description>&lt;p&gt;最近在学习 Docker，发现 Laradock 这个项目，它是以 docker-compose 方式快速搭建一整套 PHP 开发环境的镜像，可以按需启动需要的容器，包括 MySQL，Redis，Nginx，Memcache，RabbitMQ，Mongo 等一系列 WEB 开发需要的软件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WordPress 使用 Redis 缓存</title>
      <link>http://tanteng.me/2017/09/wp-redis/</link>
      <pubDate>Wed, 13 Sep 2017 04:32:13 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/09/wp-redis/</guid>
      <description>&lt;p&gt;给 WordPress 博客换了一个缓存插件 —— WP Redis，使用 Redis 缓存给博客提高速度和性能，之前用的插件 WP Super Cache 是基于文件缓存的，虽然也很不错，但是用 Redis 应该是更好的选择。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 调试函数 debug_backtrace</title>
      <link>http://tanteng.me/2017/09/debug-backtrace-php/</link>
      <pubDate>Mon, 11 Sep 2017 07:37:49 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/09/debug-backtrace-php/</guid>
      <description>&lt;p&gt;有时候我们想知道这个函数或方法的调用堆栈，也就是它是如何一级一级是被调用到的，可以用 PHP 的 debug_backtrace 函数打印，就像这样：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;public function update(Request $request, $id)
{
    dd(debug_backtrace());
    $getGameID = function ($request) {
        if (!$request-&amp;gt;game_id) {
            return 1000 + intval($request-&amp;gt;id);
        }
        return $request-&amp;gt;game_id;
    };&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$previews = $this-&amp;amp;gt;getGamePreviews($request-&amp;amp;gt;game_preview);

$request-&amp;amp;gt;merge([
    &#39;game_preview&#39; =&amp;amp;gt; json_encode($previews),
    &#39;game_id&#39;      =&amp;amp;gt; $getGameID($request)
]);
EgretGame::where(&#39;id&#39;, $id)-&amp;amp;gt;update($request-&amp;amp;gt;except([&#39;_token&#39;, &#39;_method&#39;]));
return redirect()-&amp;amp;gt;route(&#39;egretgame.index&#39;)-&amp;amp;gt;with(&#39;success&#39;, &#39;编辑成功！&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel Sessionid 处理机制</title>
      <link>http://tanteng.me/2017/09/laravel-session-scheme/</link>
      <pubDate>Mon, 11 Sep 2017 03:41:20 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/09/laravel-session-scheme/</guid>
      <description>&lt;p&gt;在 Laravel 的配置文件 config/session.php 中可以设置 Session Cookie Name，比如这个项目中设置名称为“sns_session”：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;/*
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
| Session Cookie Name
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
|
| Here you may change the name of the cookie used to identify a session
| instance by ID. The name specified here will get used every time a
| new session cookie is created by the framework for every driver.
|
*/&lt;/p&gt;

&lt;p&gt;&amp;lsquo;cookie&amp;rsquo; =&amp;gt; &amp;lsquo;sns_session&amp;rsquo;,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到刷新页面，查看 cookie，会发现一个名称为 sns_session 的 cookie，名字就是我们自定义的。&lt;/p&gt;

&lt;p&gt;这个 sessionid 就是 cookie 和 session 联系的桥梁，服务器通过这个 sessionid 判断来自哪个客户端的请求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 变基和合并</title>
      <link>http://tanteng.me/2017/09/git-merge-rebase/</link>
      <pubDate>Tue, 05 Sep 2017 10:42:56 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/09/git-merge-rebase/</guid>
      <description>&lt;h2 id=&#34;_rebasing&#34;&gt;变基&lt;/h2&gt;

&lt;div class=&#34;paragraph&#34;&gt;
  &lt;p&gt;
    在 Git 中整合来自不同分支的修改主要有两种方法：&lt;code&gt;merge&lt;/code&gt; 以及 &lt;code&gt;rebase&lt;/code&gt;。 在本节中我们将学习什么是“变基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。
  &lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>PHP 错误和异常处理</title>
      <link>http://tanteng.me/2017/09/php-error-handle/</link>
      <pubDate>Sat, 02 Sep 2017 07:27:24 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/09/php-error-handle/</guid>
      <description>&lt;p&gt;关于 PHP 的错误和异常处理，总结如下。&lt;/p&gt;

&lt;h3 id=&#34;1-设置-php-错误级别&#34;&gt;1.设置 PHP 错误级别&lt;/h3&gt;

&lt;p&gt;使用 &lt;span class=&#34;refname&#34;&gt;error_reporting&lt;/span&gt; — &lt;span class=&#34;dc-title&#34;&gt;设置应该报告何种 PHP 错误。&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 中”泛型”的支持</title>
      <link>http://tanteng.me/2017/08/golang-generic/</link>
      <pubDate>Fri, 11 Aug 2017 10:14:10 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/08/golang-generic/</guid>
      <description>&lt;p&gt;Golang不支持一般的类似java中的标记式泛型。很多人因此而十分不满，认为没有泛型增加了很多工作量。而目前由于泛型支持的复杂性，Golang的设计和实现者并没有把这个泛型支持作为紧急需要增加的特性。但是，如果真的没有泛型，就一定不行了么？答案当然是否定的。没有泛型也可以，而且我觉得代码更简单，直接，有趣（个人观点，勿喷）。&lt;/p&gt;

&lt;p&gt;我们这里打算以一些例子来讲解Golang中如何处理这个问题。&lt;/p&gt;

&lt;p&gt;首先，我们看一个冒泡排序的问题。针对整型数组切片的排序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 解析 json 数据</title>
      <link>http://tanteng.me/2017/07/golang-decode-json/</link>
      <pubDate>Sun, 23 Jul 2017 14:04:44 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/07/golang-decode-json/</guid>
      <description>&lt;p&gt;使用 Golang 解析 json 数据，这种 json 格式是对象的数组，官方文档有一个示例：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:go decode:true&#34;&gt;var jsonBlob = []byte(&lt;code&gt;[  
    {&amp;quot;Name&amp;quot;: &amp;quot;Platypus&amp;quot;, &amp;quot;Order&amp;quot;: &amp;quot;Monotremata&amp;quot;},  
    {&amp;quot;Name&amp;quot;: &amp;quot;Quoll&amp;quot;,    &amp;quot;Order&amp;quot;: &amp;quot;Dasyuromorphia&amp;quot;}  
]&lt;/code&gt;)&lt;br /&gt;
type Animal struct {&lt;br /&gt;
    Name  string&lt;br /&gt;
    Order string&lt;br /&gt;
}&lt;br /&gt;
var animals []Animal&lt;br /&gt;
err := json.Unmarshal(jsonBlob, &amp;amp;animals)&lt;br /&gt;
if err != nil {&lt;br /&gt;
    fmt.Println(&amp;ldquo;error:&amp;ldquo;, err)&lt;br /&gt;
}&lt;br /&gt;
fmt.Printf(&amp;ldquo;%+v&amp;rdquo;, animals)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP发送HTTP请求的几种方式</title>
      <link>http://tanteng.me/2017/07/php-curl-guzzlehttp/</link>
      <pubDate>Sat, 22 Jul 2017 06:02:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/07/php-curl-guzzlehttp/</guid>
      <description>&lt;p&gt;PHP 开发中我们常用 cURL 方式封装 HTTP 请求，什么是 cURL？&lt;/p&gt;

&lt;p&gt;cURL 是一个用来传输数据的工具，支持多种协议，如在 Linux 下用 curl 命令行可以发送各种 HTTP 请求。PHP 的 cURL 是一个底层的库，它能根据不同协议跟各种服务器通讯，HTTP 协议是其中一种。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP笔试面试题精选（一）</title>
      <link>http://tanteng.me/2017/07/php-examination-part-1/</link>
      <pubDate>Tue, 11 Jul 2017 02:02:05 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/07/php-examination-part-1/</guid>
      <description>&lt;p&gt;本次课程主要围绕 PHP 面试和笔试中经常会出现的一些知识点，&lt;strong&gt;但是面试官会在笔试题基础上深入扩展，那么你知道如何更好的回答让面试官满意吗？&lt;/strong&gt;题目收集自腾讯，迅雷，美图等公司的笔试面试题，以及本人面试经历中印象中的知识点，同时也分享一些面试的经验，相信对你一定有很大的参考价值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 模拟生产者消费者</title>
      <link>http://tanteng.me/2017/07/go-producer-consumer/</link>
      <pubDate>Sat, 08 Jul 2017 10:44:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/07/go-producer-consumer/</guid>
      <description>&lt;p&gt;Go 的一个模拟生产者和消费者的例子，用 m 个 goroutine 生产产品，用 n 个 goroutine 消费产品，使用 2 个 channel，一个有缓冲的通道用于存放产品，一个无缓冲的通道用于标识生成或者消费过程完成。&lt;/p&gt;

&lt;p&gt;例子演示了 Go 中 goroutine 和 channel 的使用，理解 Go 中的并发概念。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>defer使用规则</title>
      <link>http://tanteng.me/2017/07/defer-golang/</link>
      <pubDate>Thu, 06 Jul 2017 08:17:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/07/defer-golang/</guid>
      <description>&lt;p&gt;在golang当中，defer代码块会在函数调用链表中增加一个函数调用。这个函数调用不是普通的函数调用，而是会在函数正常返回，也就是return之后添加一个函数调用。因此，defer通常用来释放函数内部变量。&lt;/p&gt;

&lt;p&gt;为了更好的学习defer的行为，我们首先来看下面一段代码:&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:go decode:true &#34;&gt;func CopyFile(dstName, srcName string) (written int64, err error) {
    src, err := os.Open(srcName)
    if err != nil {
        return
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dst, err := os.Create(dstName)
if err != nil {
    return
}

written, err = io.Copy(dst, src)
dst.Close()
src.Close()
return
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 遍历一个月写法</title>
      <link>http://tanteng.me/2017/06/golang-month-iteration/</link>
      <pubDate>Tue, 20 Jun 2017 06:41:58 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/06/golang-month-iteration/</guid>
      <description>Golang 遍历一个月每天写法： // CreateOnlineTable 创建统计用户在线时长表 func CreateOnlineTable() { year, month, _ := time.Now().Date() t := time.Date(year, month+1, 0, 0, 0, 0, 0, time.UTC) for day := 1; day &amp;lt;= t.Day(); day++ { date := time.Now().Format(&amp;ldquo;200601&amp;rdquo;) + fmt.Sprintf(&amp;ldquo;%02d&amp;rdquo;, day) tableName := fmt.Sprintf(utils.LoadIniConfig(&amp;ldquo;online&amp;rdquo;, &amp;ldquo;online&amp;rdquo;, &amp;ldquo;db&amp;rdquo;), date) template := utils.LoadIniConfig(&amp;ldquo;online&amp;rdquo;, &amp;ldquo;online_template&amp;rdquo;, &amp;ldquo;db&amp;rdquo;) sql :=</description>
    </item>
    
    <item>
      <title>使用 goroutine 并发写 map 问题</title>
      <link>http://tanteng.me/2017/06/goroutine-concurrent-map-writes/</link>
      <pubDate>Mon, 19 Jun 2017 10:41:21 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/06/goroutine-concurrent-map-writes/</guid>
      <description>&lt;p&gt;使用 goroutine 并发写 map 是一个非线程安全的方式，要避免对一个全局变量在 goroutine 中进行写操作，这会导致并发写问题。&lt;/p&gt;

&lt;p&gt;以下例子可以触发此类错误：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:go decode:true&#34;&gt;package main&lt;/p&gt;

&lt;p&gt;var testMap = make(map[string]string)&lt;/p&gt;

&lt;p&gt;func main() {
    for i := 0; i &amp;lt; 33; i++ {
        go func() {
            testMap[&amp;ldquo;aa&amp;rdquo;] = &amp;ldquo;bb&amp;rdquo;
        }()
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;对于 const 常量和只读全局变量，是线程安全的，但不能并发写。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Golang 定时任务中判断函数是否执行完成</title>
      <link>http://tanteng.me/2017/06/golang-function-done/</link>
      <pubDate>Mon, 19 Jun 2017 10:02:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/06/golang-function-done/</guid>
      <description>&lt;p&gt;使用 golang 的定时任务（采用 robfig/cron 包），每 5s 调用一个函数进行处理，但是这个函数的处理可能会耗时，在没有执行完之前如果再次调用，就会导致计算结果不对。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WEB API接口安全和防刷</title>
      <link>http://tanteng.me/2017/06/web-api-security/</link>
      <pubDate>Fri, 16 Jun 2017 13:07:48 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/06/web-api-security/</guid>
      <description>&lt;p&gt;做各种活动经常会涉及到送会员、礼券、奖品、抽奖、刷榜等业务，这些活动都有一个共同点，那就是恶意用户找到漏洞请求接口从而获取利益，所以要做好这些WEB接口的安全，这里总结一下实践中对这些WEB接口做的安全措施和防刷机制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>修改数据库、表、字段为 utf8mb4 编码</title>
      <link>http://tanteng.me/2017/06/alter-table-utf8mb4/</link>
      <pubDate>Fri, 09 Jun 2017 09:52:37 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/06/alter-table-utf8mb4/</guid>
      <description>创建 utf8mb4 数据库： create database xxx CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 修改数据库、表、字段为 utf8mb4 编码： # For each database: ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci; For each table: ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; For each column: ALTER TABLE table_name CHANGE column_name column_name VARCHAR(191) CHARACTER SET utf8mb4</description>
    </item>
    
    <item>
      <title>Golang中的面向对象继承</title>
      <link>http://tanteng.me/2017/06/golang-oop-extends/</link>
      <pubDate>Sat, 03 Jun 2017 08:19:03 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/06/golang-oop-extends/</guid>
      <description>&lt;p&gt;Golang的面向对象机制与Smalltalk或者Java等传统面向对象的编程语言不同。传统面向对象编程语言的一个重要特性是继承机制。因为继承机制支持在关联对象间进行代码复用和数据共享。继承机制曾在代码复用和数据共享的设计模式占据主导地位，但是目前组合这一古老的技术重新焕发了活力。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Trie 树结构介绍</title>
      <link>http://tanteng.me/2017/05/trie-intro/</link>
      <pubDate>Fri, 26 May 2017 03:17:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/05/trie-intro/</guid>
      <description>使用一个 Golang 的敏感词过滤服务（https://github.com/huayuego/wordfilter），这个服务用到了 Trie 树存储词典。 这篇</description>
    </item>
    
    <item>
      <title>关于 cgi, fastcgi, php-fpm 的关系</title>
      <link>http://tanteng.me/2017/05/cgi-fastcgi-php-fpm/</link>
      <pubDate>Thu, 25 May 2017 15:30:33 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/05/cgi-fastcgi-php-fpm/</guid>
      <description>几个链接： https://www.zhihu.com/question/30672017 http://www.lxlxw.me/?p=216 http://www.tuicool.com/articles/Ir2AreE</description>
    </item>
    
    <item>
      <title>注意 Laravel 清除缓存 php artisan cache:clear 的使用</title>
      <link>http://tanteng.me/2017/05/laravel-cache-clear-warning/</link>
      <pubDate>Tue, 23 May 2017 09:29:27 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/05/laravel-cache-clear-warning/</guid>
      <description>&lt;p&gt;Laravel 的命令 php artisan cache:clear 用来清除各种缓存，如页面，Redis，配置文件等缓存，它会清空 Redis 数据库的全部数据，比如默认使用的 Redis 的数据库是 db0，那么执行这个命令后，会清空 db0 中所有数据。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 配置文件 my.cnf 详细说明</title>
      <link>http://tanteng.me/2017/05/mysql-my-cnf/</link>
      <pubDate>Mon, 22 May 2017 05:41:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/05/mysql-my-cnf/</guid>
      <description>&lt;p&gt;本文记录MySQL配置文件my.cnf的详细说明。&lt;/p&gt;

&lt;h3 id=&#34;linux系统mysql配置文件读取顺序&#34;&gt;Linux系统MySQL配置文件读取顺序&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名字&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/etc/my.cnf&lt;/td&gt;
&lt;td&gt;全局配置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/etc/mysql/my.cnf&lt;/td&gt;
&lt;td&gt;全局配置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SYSCONFDIR/my.cnf&lt;/td&gt;
&lt;td&gt;全局配置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$MYSQL_HOME/my.cnf&lt;/td&gt;
&lt;td&gt;Server-specific 服务器特定的选项 (仅适用于服务端)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;defaults-extra-file&lt;/td&gt;
&lt;td&gt;如果有的话指定该文件&lt;code&gt;--defaults-extra-file=文件名字&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;~/.my.cnf&lt;/td&gt;
&lt;td&gt;Server-specific 服务器特定的选项&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;~/.mylogin.cnf&lt;/td&gt;
&lt;td&gt;User-specific 登录路径选择 （仅适用于客户端）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>Golang slice 和 PHP 数组比较</title>
      <link>http://tanteng.me/2017/05/golang-php-array-slice-compare/</link>
      <pubDate>Sat, 20 May 2017 06:48:59 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/05/golang-php-array-slice-compare/</guid>
      <description>&lt;div class=&#34;card-title&#34;&gt;
  &lt;h2&gt;
    Creating
  &lt;/h2&gt;
&lt;/div&gt;

&lt;p&gt;Create an array in PHP&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true&#34;&gt;$myStringArray = [&amp;ldquo;One&amp;rdquo;,&amp;ldquo;Two&amp;rdquo;,&amp;ldquo;Three&amp;rdquo;];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In Go creating the above is a little more verbose and like variable assignment above there&amp;#8217;s also multiple ways to create a slice. The most similar way to that of PHP is as follows.&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true&#34;&gt;myStringArray := []string{&amp;ldquo;One&amp;rdquo;,&amp;ldquo;Two&amp;rdquo;,&amp;ldquo;Three&amp;rdquo;}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 字节切片初始化</title>
      <link>http://tanteng.me/2017/05/golang-byte-slice/</link>
      <pubDate>Sat, 20 May 2017 05:42:54 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/05/golang-byte-slice/</guid>
      <description>golang 中注意下面两种字节切片类型的初始化，一个是括号，一个是花括号，其中括号会对字符串内容进行类型转换。 func main() { test := []byte(&amp;ldquo;a</description>
    </item>
    
    <item>
      <title>在 Laravel 中设置 Etag 缓存</title>
      <link>http://tanteng.me/2017/05/laravel-etag-middleware/</link>
      <pubDate>Fri, 19 May 2017 04:51:35 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/05/laravel-etag-middleware/</guid>
      <description>&lt;p&gt;本文介绍浏览器缓存 Etag 的概念，和客户端服务器如何生成和比较 Etag 的过程，以及使用 Laravel 中间件的示例。&lt;/p&gt;

&lt;h3 id=&#34;什么是-etag&#34;&gt;什么是“ETag”？&lt;/h3&gt;

&lt;p&gt;Etag 是一种标识，一般附带在响应头部中，值是页面内容的哈希值，用来判断资源（页面，json，xml）有没有修改，如果没有修改，就返回 304 状态码，有修改则生成新的 Etag 值。&lt;/p&gt;

&lt;p&gt;浏览器根据状态码判断是否缓存过期。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang append slice to slice</title>
      <link>http://tanteng.me/2017/05/golang-append-slice-to-slice/</link>
      <pubDate>Wed, 10 May 2017 07:11:22 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/05/golang-append-slice-to-slice/</guid>
      <description>&lt;p&gt;把一个 slice 追加到另一个 slice，以下两种方式都是把 s1 追加到 s0 中，但两种结果不同，注意区别。&lt;/p&gt;

&lt;p&gt;片段1：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:go decode:true&#34;&gt;s0 := []interface{}{1, 100, 122}
s1 := []interface{}{3, 4, 5, 6}
s0 = append(s0, s1)
fmt.Println(&amp;ldquo;result:&amp;ldquo;, s0) //result: [1 100 122 [3 4 5 6]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此时 s0 结果：result: [1 100 122 [3 4 5 6]]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 生成整数随机数</title>
      <link>http://tanteng.me/2017/04/golang-rand-int/</link>
      <pubDate>Sat, 22 Apr 2017 04:37:12 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/04/golang-rand-int/</guid>
      <description>&lt;p&gt;生成一个给定范围的随机数，用 PHP 就太简单不过了，而且可以指定从负数到正整数的范围，如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;?php
echo mt_rand(-988, 888);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样就随机生成 -988 到 888 的随机数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx 报错和解决方法记录</title>
      <link>http://tanteng.me/2017/04/nginx-13-permission-denied-111-connection-refused/</link>
      <pubDate>Wed, 19 Apr 2017 07:49:24 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/04/nginx-13-permission-denied-111-connection-refused/</guid>
      <description>&lt;p&gt;记录一下遇到的各种 Nginx 的报错和解决办法。&lt;/p&gt;

&lt;h3 id=&#34;13-permission-denied&#34;&gt;13: Permission denied&lt;/h3&gt;

&lt;p&gt;Nginx错误：&lt;/p&gt;

&lt;p&gt;2017/04/19 14:46:46 [crit] 4172#0: *671 open() &amp;#8220;/data/vhosts/xunlei.com/test/&amp;#8221; failed (13: Permission denied), client: 192.168.35.54, server: www.test.com, request: &amp;#8220;GET / HTTP/1.1&amp;#8221;, host: &amp;#8220;www.test.com&amp;#8221;&lt;/p&gt;

&lt;p&gt;经查权限问题导致，网站目录是 root 用户组，而 nginx 是运行的 nobody 用户进程，修改网站目录为 nobody 用户组。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beego 设置表名方法</title>
      <link>http://tanteng.me/2017/04/beego-table-name/</link>
      <pubDate>Sun, 02 Apr 2017 11:57:57 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/04/beego-table-name/</guid>
      <description>&lt;p&gt;在 Beego 中如果要设置表名，可以使用如下方法，给这个 model 的 struct 增加一个 TableName 方法：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:go decode:true &#34;&gt;type Comments struct {
    Id          int64
    ParentId    int64
    DynamicId   string &lt;code&gt;orm:&amp;quot;size(128)&amp;quot;&lt;/code&gt;
    Content     string &lt;code&gt;orm:&amp;quot;type(longtext)&amp;quot;&lt;/code&gt;
    Userid      int64
    ReplyUserid int64
    Status      int64
    IsDelete    int64
    CreatedAt   string &lt;code&gt;orm:&amp;quot;size(128)&amp;quot;&lt;/code&gt;
    UpdatedAt   string &lt;code&gt;orm:&amp;quot;size(128)&amp;quot;&lt;/code&gt;
}&lt;/p&gt;

&lt;p&gt;func init() {
    orm.RegisterModel(new(Comments))
}&lt;/p&gt;

&lt;p&gt;// TableName 设置表名
func (m *Comments) TableName() string {
    return &amp;ldquo;comments_8&amp;rdquo;
}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>韩天峰：2017 年 PHP 程序员未来路在何方</title>
      <link>http://tanteng.me/2017/03/2017-php-way/</link>
      <pubDate>Fri, 31 Mar 2017 07:58:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/03/2017-php-way/</guid>
      <description>&lt;p&gt;PHP 从诞生到现在已经有20多年历史，从Web时代兴起到移动互联网退潮，互联网领域各种编程语言和技术层出不穷， Node.js 、 GO 、 Python 不断地在挑战 PHP 的地位。这些技术的推动者非常热衷于唱衰 PHP ， PHP 语言的未来在哪里？PHP 程序员当如何应对未来的变革？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 关联查询返回错误的 id</title>
      <link>http://tanteng.me/2017/03/laravel-model-join-wrong-id/</link>
      <pubDate>Fri, 31 Mar 2017 04:50:37 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/03/laravel-model-join-wrong-id/</guid>
      <description>&lt;p&gt;在 Laravel Eloquent 中使用 join 关联查询，如果两张表有名称相同的字段，如 id，那么它的值会默认被后来的同名字段重写，返回不是期望的结果。例如以下关联查询：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$priority = Priority::rightJoin(&amp;lsquo;touch&amp;rsquo;, &amp;lsquo;priorities.touch_id&amp;rsquo;, &amp;lsquo;=&amp;rsquo;, &amp;lsquo;touch.id&amp;rsquo;)
    -&amp;gt;where(&amp;lsquo;priorities.type&amp;rsquo;, 1)
    -&amp;gt;orderBy(&amp;lsquo;priorities.total_score&amp;rsquo;, &amp;lsquo;desc&amp;rsquo;)
    -&amp;gt;orderBy(&amp;lsquo;touch.created_at&amp;rsquo;, &amp;lsquo;desc&amp;rsquo;)
    -&amp;gt;get();&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 浮点数范围随机</title>
      <link>http://tanteng.me/2017/03/php-float-rand/</link>
      <pubDate>Wed, 01 Mar 2017 08:59:52 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/03/php-float-rand/</guid>
      <description>PHP 浮点数范围随机代码： private function frand($min, $max, $decimals = 0) { $scale = pow(10, $decimals); return mt_rand($min * $scale, $max * $scale) / $scale; } &amp;nbsp;</description>
    </item>
    
    <item>
      <title>Go 搭建 WebSocket 服务端例子</title>
      <link>http://tanteng.me/2017/02/go-websocket-demo/</link>
      <pubDate>Mon, 27 Feb 2017 03:13:54 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/02/go-websocket-demo/</guid>
      <description>&lt;p&gt;WebSocket 是一个基于 HTML5 规范的，可以实现客户端和服务器双向通信的协议，弥补了 HTTP 协议只能客户端主动发请求，服务器响应，而服务器不能给客户端推送数据的不足。&lt;/p&gt;

&lt;h3 id=&#34;websocket-握手&#34;&gt;WebSocket 握手&lt;/h3&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true&#34;&gt;GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
Origin: &lt;a href=&#34;http://example.com&#34;&gt;http://example.com&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;重点如下两个 header：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true&#34;&gt;Upgrade: websocket
Connection: Upgrade&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Upgrade 表示升级到 WebSocket 协议，Connection 表示这个 HTTP 请求是一次协议升级，Origin 表示发请求的来源。&lt;/p&gt;

&lt;h3 id=&#34;websocket-api&#34;&gt;WebSocket API&lt;/h3&gt;

&lt;p&gt;① 打开新的 WebSocket 连接&lt;/p&gt;

&lt;p&gt;② 可选的回调，在连接出错时调用&lt;/p&gt;

&lt;p&gt;③ 可选的回调，在连接终止时调用&lt;/p&gt;

&lt;p&gt;④ 可选的回调，在 WebSocket 连接建立时调用&lt;/p&gt;

&lt;p&gt;⑤ 客户端向服务器发送消息&lt;/p&gt;

&lt;p&gt;⑥ 回调函数，接收服务器主动发送的消息&lt;/p&gt;

&lt;p&gt;⑦ 根据接收到的消息，决定调用二进制还是文本处理逻辑&lt;/p&gt;

&lt;p&gt;下面 js 示例包括了上面大部分的 API.&lt;/p&gt;

&lt;h3 id=&#34;go-搭建-websocket-服务端的例子&#34;&gt;Go 搭建 WebSocket 服务端的例子&lt;/h3&gt;

&lt;p&gt;Go 搭建一个简单 WebSocket 服务端代码例子 test.go, 如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:go decode:true &#34;&gt;package main&lt;/p&gt;

&lt;p&gt;import (
    &amp;ldquo;fmt&amp;rdquo;
    &amp;ldquo;log&amp;rdquo;
    &amp;ldquo;net/http&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;golang.org/x/net/websocket&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;)&lt;/p&gt;

&lt;p&gt;func Echo(ws *websocket.Conn) {
    var err error&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for {
    var reply string

    if err = websocket.Message.Receive(ws, &amp;amp;reply); err != nil {
        fmt.Println(&amp;quot;Can&#39;t receive&amp;quot;)
        break
    }

    fmt.Println(&amp;quot;Received back from client: &amp;quot; + reply)

    msg := &amp;quot;Received:  &amp;quot; + reply
    fmt.Println(&amp;quot;Sending to client: &amp;quot; + msg)

    if err = websocket.Message.Send(ws, msg); err != nil {
        fmt.Println(&amp;quot;Can&#39;t send&amp;quot;)
        break
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;func main() {
    http.Handle(&amp;ldquo;/&amp;rdquo;, websocket.Handler(Echo))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if err := http.ListenAndServe(&amp;quot;:1234&amp;quot;, nil); err != nil {
    log.Fatal(&amp;quot;ListenAndServe:&amp;quot;, err)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何创建 Laravel 5 扩展包</title>
      <link>http://tanteng.me/2017/02/create-laravel-5-pakage/</link>
      <pubDate>Mon, 20 Feb 2017 08:39:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/02/create-laravel-5-pakage/</guid>
      <description>本文介绍了创建 Laravel 5 扩展包的步骤。 链接： http://laraveldaily.com/how-to-create-a-laravel-5-package-in-10-easy-steps/</description>
    </item>
    
    <item>
      <title>git reset 重置到某次提交</title>
      <link>http://tanteng.me/2017/02/git-reset-commit-id/</link>
      <pubDate>Mon, 13 Feb 2017 11:11:15 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/02/git-reset-commit-id/</guid>
      <description>记一次 git 重置操作的过程： 把本地master代码回撤到有问题的提交点之前，git reset -q &amp;#8211;hard commid-id 将本地master强行推送到远端，需先在gitlab上</description>
    </item>
    
    <item>
      <title>登录重放攻击及安全防御</title>
      <link>http://tanteng.me/2017/02/login-replay-attacks/</link>
      <pubDate>Wed, 01 Feb 2017 04:59:01 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/02/login-replay-attacks/</guid>
      <description>&lt;p&gt;现在的应用系统中，大部分密码存储都是采用md5加密后存储，常用的登录基本流程如下：&lt;/p&gt;

&lt;p&gt;1、前端web页面用户输入账号、密码，点击登录。&lt;/p&gt;

&lt;p&gt;2、请求提交之前，web端首先通过客户端脚本如javascript对密码原文进行md5加密。&lt;/p&gt;

&lt;p&gt;3、提交账号、md5之后的密码&lt;/p&gt;

&lt;p&gt;4、请求提交至后端，验证账号与密码是否与数据库中的一致，一致则认为登录成功，反之失败。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL大表加字段思路</title>
      <link>http://tanteng.me/2017/01/mysql-alter-table-big-data/</link>
      <pubDate>Thu, 19 Jan 2017 12:58:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/01/mysql-alter-table-big-data/</guid>
      <description>&lt;p&gt;给 MySQL 一张表加字段执行如下 sql 就可以了：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:mysql decode:true&#34;&gt;ALTER TABLE tbl_tpl ADD title(255) DEFAULT &amp;ldquo; COMMENT &amp;lsquo;标题&amp;rsquo; AFTER id;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是线上的一张表如果数据量很大呢，执行加字段操作就会锁表，这个过程可能需要很长时间甚至导致服务崩溃，那么这样操作就很有风险了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP二进制封包</title>
      <link>http://tanteng.me/2017/01/php-pack/</link>
      <pubDate>Thu, 19 Jan 2017 12:41:28 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/01/php-pack/</guid>
      <description>&lt;p&gt;通过 TCP/IP 协议传输数据经常会用二进制数据包的形式，在 PHP 中可使用 pack() 和 unpack() 函数进行二进制封包和解包，通过 socket 建立 TCP 连接，并将数据包传输出去&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mysql性能优化–Explain详解</title>
      <link>http://tanteng.me/2017/01/mysql-explain/</link>
      <pubDate>Thu, 19 Jan 2017 09:07:43 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/01/mysql-explain/</guid>
      <description>&lt;h3 id=&#34;explain&#34;&gt;EXPLAIN&lt;/h3&gt;

&lt;p&gt;mysql explain命令是查询性能优化不可缺少的一部分。&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;explain output columns&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;列名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;执行编号，标识select所属的行。如果在语句中没有子查询或者关联查询，只有唯一的select，每行都将显示1。否则，内层的select语句一般会顺序编号，对应于其在原始语句中的位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;select_type&lt;/td&gt;
&lt;td&gt;显示本行是简单或是复杂select。如果查询有任何复杂的子查询，则最外层标记为primary（derived、Union、Union resuit）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;访问引用哪个表（引用某个查询，如“derived3”）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;partitions&lt;/td&gt;
&lt;td&gt;匹配的分区&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;数据访问/读取操作类型（all、index、range、ref、eq_ref、const/system、NULL）。join类型&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;possible_keys&lt;/td&gt;
&lt;td&gt;揭示哪一些索引可能有利于高效的查找&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;key&lt;/td&gt;
&lt;td&gt;此次查询中确切使用到的索引.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;key_len&lt;/td&gt;
&lt;td&gt;显示mysql在索引里使用的字节数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ref&lt;/td&gt;
&lt;td&gt;哪个字段或常数与key一起被使用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rows&lt;/td&gt;
&lt;td&gt;为了找到所需的列而需要读取的行数，估算值，不精确。通过把所有rows列值相乘，可粗略估算整个查询会检查的行数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;filtered&lt;/td&gt;
&lt;td&gt;表示此查询条件所过滤的数据的百分比&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Extra&lt;/td&gt;
&lt;td&gt;额外信息，如using index、filesort等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>使用 Supervisor 管理 Laravel 队列进程</title>
      <link>http://tanteng.me/2017/01/supervisor-laravel-queue/</link>
      <pubDate>Sat, 07 Jan 2017 12:48:53 +0000</pubDate>
      
      <guid>http://tanteng.me/2017/01/supervisor-laravel-queue/</guid>
      <description>&lt;p&gt;Supervisor 是一个 Python 写的进程管理工具，有时一个进程需要在后台运行，并且意外挂掉后能够自动重启，就需要这么一个管理进程的工具。在 Laravel 开发中，也经常使用到队列监听，可以配合 Supervisor 来管理 Laravel 队列进程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>window.location.reload()和window.location.href=””的区别</title>
      <link>http://tanteng.me/2016/12/window-location-reload-and-href/</link>
      <pubDate>Sat, 31 Dec 2016 02:55:00 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/12/window-location-reload-and-href/</guid>
      <description>&lt;p&gt;window.location.reload() 和 window.location.href=&amp;#8221;&amp;#8221; 都可以达到“刷新”当前页面的效果，但是 reload() 会保留 POST 数据，而 href 相当于重新打开这个页面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2017/03/window-location-reload.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone wp-image-11348 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2017/03/window-location-reload.png&#34; alt=&#34;window.location.reload()和window.location.href=&#39;&#39;的区别&#34; width=&#34;368&#34; height=&#34;207&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 5.3 后台管理系统搭建</title>
      <link>http://tanteng.me/2016/12/laravel-admin-install/</link>
      <pubDate>Sat, 24 Dec 2016 07:13:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/12/laravel-admin-install/</guid>
      <description>&lt;p&gt;网上的很多基于 Laravel 的后台管理系统，要么缺少基本的功能，要么太臃肿，总是找不到自己喜欢的，于是自己做了一个。它的特点是尽可能简单又不缺少基本的后台功能，如用户认证，基于角色的权限系统（Entrust），菜单管理，媒体管理等，并且使用 AdminLte 后台界面，外观简洁功能强大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Nginx 反向代理和负载均衡搭建多人测试环境</title>
      <link>http://tanteng.me/2016/12/nginx-test-environment/</link>
      <pubDate>Sat, 17 Dec 2016 06:19:44 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/12/nginx-test-environment/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-11120&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2016/12/nginx-test.jpeg&#34; alt=&#34;&#34; width=&#34;1328&#34; height=&#34;874&#34; /&gt;&lt;/p&gt;

&lt;p&gt;假如我们使用 git 进行版本控制，在一个大型网站中，开发人员在不同的分支上开发不同的需求，当一个需求开发完成需要测试，我们会把这个分支告诉测试人员，然后测试人员在测试机的网站目录拉取这个分支进行测试。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 使用 env 读取环境变量为 null 的问题</title>
      <link>http://tanteng.me/2016/12/laravel-env-null/</link>
      <pubDate>Sun, 04 Dec 2016 15:35:18 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/12/laravel-env-null/</guid>
      <description>&lt;p&gt;不知道大家有没有遇到过，在 Laravel 中（除 app/config 目录下的配置文件中）使用 env 函数读取环境变量，有时有用，有时返回 null，究竟怎么回事？让我们一探究竟。&lt;/p&gt;

&lt;p&gt;在 Laravel 项目中，如果执行了 php artisan config:cache 命令把配置文件缓存起来后，在 Tinker 中（Tinker 是 Laravel 自带的一个交互式命令行界面），使用 env 函数读取环境变量的值为 null，只有执行 php artisan config:clear 清除配置缓存后就可以读取了，这是为什么呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP数组同值稳定排序</title>
      <link>http://tanteng.me/2016/11/php-array-sort-order/</link>
      <pubDate>Wed, 16 Nov 2016 15:54:43 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/11/php-array-sort-order/</guid>
      <description>&lt;p&gt;在 PHP 中对数组排序有很多函数，如 sort, asort, arsort, ksort, krsort, uasort 等等，但是有一个问题，如一个数组：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;$test = array(1 =&amp;gt; 0, 99 =&amp;gt; 0, 87 =&amp;gt; 0, 45 =&amp;gt; 0, 67 =&amp;gt; 0, 11 =&amp;gt; 1, 2 =&amp;gt; 0);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;用 asort 函数对其进行排序，asort($test) 结果如下（转换为 json 格式）：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;{&amp;ldquo;67&amp;rdquo;:0,&amp;ldquo;2&amp;rdquo;:0,&amp;ldquo;1&amp;rdquo;:0,&amp;ldquo;45&amp;rdquo;:0,&amp;ldquo;87&amp;rdquo;:0,&amp;ldquo;99&amp;rdquo;:0,&amp;ldquo;11&amp;rdquo;:1}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以看到排序虽然正确，值为 1 的元素排到后面去了，但是值为 0 的元素顺序跟以前不一样了，如何保证 PHP 数组同值元素排序后顺序保持不变呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP写文件加锁</title>
      <link>http://tanteng.me/2016/11/flock-write/</link>
      <pubDate>Sun, 13 Nov 2016 14:00:28 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/11/flock-write/</guid>
      <description>&lt;p&gt;用 PHP 的 file_put_contents 函数以追加的方式，循环 10 w 次写文件，耗时很多。因为 file_put_contents 函数每次都要打开文件，写入文件，然后关闭文件。&lt;/p&gt;

&lt;p&gt;以下是测试：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;public function handle()
{
    $testTxt = storage_path(&amp;lsquo;test.txt&amp;rsquo;);
    for ($i = 0; $i &amp;lt; 100000; $i++) {
        $this-&amp;gt;comment(&amp;lsquo;writing&amp;hellip;&amp;rsquo;);
        file_put_contents($testTxt, &amp;lsquo;wo shi tanteng.&amp;rsquo; . PHP_EOL, FILE_APPEND);
    }
    $this-&amp;gt;comment(&amp;lsquo;time:&amp;rsquo; . round(microtime(true) - LARAVEL_START, 2));
}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP json_encode 数组键是否从0开始并且连续的区别</title>
      <link>http://tanteng.me/2016/10/php-json-encode-and-decode/</link>
      <pubDate>Fri, 28 Oct 2016 06:39:05 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/10/php-json-encode-and-decode/</guid>
      <description>&lt;p&gt;对以下两个数组进行 json_encode 编码，这两个数组的区别是，一个键是从0开始，并且连续，另一个键不连续，那么打印的结果有什么不同呢？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;print_r(json_encode([
    0 =&amp;gt; 5,
    1 =&amp;gt; 4,
    2 =&amp;gt; 1
]));&lt;/p&gt;

&lt;p&gt;print_r(json_encode([
    0 =&amp;gt; 5,
    1 =&amp;gt; 4,
    5 =&amp;gt; 1
]));&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打印结果：&lt;/p&gt;

&lt;p&gt;[5,4,1]&lt;/p&gt;

&lt;p&gt;{&amp;#8220;0&amp;#8243;:5,&amp;#8221;1&amp;#8243;:4,&amp;#8221;5&amp;#8221;:1}&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel Session 保存机制和 terminate 中间件</title>
      <link>http://tanteng.me/2016/10/laravel-session-middleware/</link>
      <pubDate>Fri, 07 Oct 2016 16:47:38 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/10/laravel-session-middleware/</guid>
      <description>&lt;p&gt;在 Laravel 中可以使用 Session 的 get, put, pull, set, has, flash 等方法进行操作，如：Session::put([&amp;#8216;domain&amp;#8217;=&amp;gt;&amp;#8217;tanteng.me&amp;#8217;, &amp;#8216;host&amp;#8217;=&amp;gt;&amp;#8217;aliyun&amp;#8217;])，就可以设置两个 session 值，看看 put 方法：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34; title=&#34;代码位于vendor/laravel/framework/src/Illuminate/Session/Store.php&#34;&gt;/**
 * Put a key / value pair or array of key / value pairs in the session.
 *
 * @param  string|array  $key
 * @param  mixed       $value
 * @return void
 */
public function put($key, $value = null)
{
    if (! is_array($key)) {
        $key = [$key =&amp;gt; $value];
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach ($key as $arrayKey =&amp;amp;gt; $arrayValue) {
    $this-&amp;amp;gt;set($arrayKey, $arrayValue);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 遍历元素并分批处理</title>
      <link>http://tanteng.me/2016/10/php-foreach-batch/</link>
      <pubDate>Thu, 06 Oct 2016 10:03:35 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/10/php-foreach-batch/</guid>
      <description>&lt;p&gt;读取一个 txt 文本文件，里面是一行一个 userid，需要给这些用户发送文件（做什么不重要），发送文件接口支持一次最多发 10 个用户，所以需要分批发送，每 10 个 userid 作为一批。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSO单点登录系统接入</title>
      <link>http://tanteng.me/2016/09/sso-access/</link>
      <pubDate>Fri, 30 Sep 2016 11:55:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/09/sso-access/</guid>
      <description>&lt;p&gt;简单讲一下 SSO 单点登录系统的接入的原理，前提是系统本身有完善的用户认证功能，即基本的用户登录功能，那做起来就很方便了。&lt;/p&gt;

&lt;p&gt;SSO 登录请求接口往往是接口加上一个回调地址，访问这个地址会跳转到回调地址并带上一个 ticket 参数，拿着这个 ticket 参数再请求接口可以获取到用户信息，如果存在用户则自动登录，不存在就新增用户并登录。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL主从和双主架构的适用场景</title>
      <link>http://tanteng.me/2016/09/mysql-master-slave-and-master-master/</link>
      <pubDate>Wed, 28 Sep 2016 10:20:18 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/09/mysql-master-slave-and-master-master/</guid>
      <description>&lt;p&gt;本文介绍 MySQL 主从和双主架构的适用场景。&lt;/p&gt;

&lt;h3 id=&#34;mysql主从&#34;&gt;MySQL主从&lt;/h3&gt;

&lt;p&gt;MySQL主从架构的适用场景是读写分离，通过主库写，从库读，大多数场景是读的情况比较多，单一 master 多 slave 的架构可以很好解决读压力大的问题。&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-10946 size-full aligncenter&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2016/09/master-slave.jpg&#34; alt=&#34;master-slave&#34; width=&#34;401&#34; height=&#34;299&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP捕捉异常中断</title>
      <link>http://tanteng.me/2016/09/register-shutdown-function/</link>
      <pubDate>Wed, 28 Sep 2016 09:31:50 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/09/register-shutdown-function/</guid>
      <description>&lt;p&gt;当 PHP 程序出现异常情况，如出现致命错误，超时，或者不可知的逻辑错误导致程序中断，这个时候可以用 register_shutdown_function 进行异常处理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 工作区和暂存区</title>
      <link>http://tanteng.me/2016/09/git-work-stage/</link>
      <pubDate>Tue, 27 Sep 2016 02:01:53 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/09/git-work-stage/</guid>
      <description>链接：Git 工作区和暂存区</description>
    </item>
    
    <item>
      <title>《性感的 PHP — 现代化 PHP 开发》PPT 分享</title>
      <link>http://tanteng.me/2016/09/modern-php/</link>
      <pubDate>Sun, 25 Sep 2016 14:58:15 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/09/modern-php/</guid>
      <description>&lt;p&gt;说好的把这次技术分享的 PPT 发出来的，一直没时间弄，现在整理了一下，并导出了一份 PDF 版的 PPT，给大家参考。（PS：本次技术分享仅仅是介绍一些关于现代化 PHP 开发的技术，并不是讲某个方面的高深技术和经验，即便如此，针对目前的 PHP 现状，很多项目，公司和开发者，还在使用过时的 PHP 技术，这个分享还是有价值的）。&lt;/p&gt;

&lt;p&gt;本次技术分享主要讲了一些现代化 PHP 开发的技术，PPT 重点介绍了命名空间，闭包，匿名函数，Traits 这些新特性，以及介绍了 Composer 依赖包管理器和 PSR 规范。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP二进制安全</title>
      <link>http://tanteng.me/2016/09/php-binary-safe/</link>
      <pubDate>Sun, 25 Sep 2016 14:33:27 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/09/php-binary-safe/</guid>
      <description>&lt;p&gt;补充一下 PHP 的基础知识，什么是二进制安全？&lt;/p&gt;

&lt;p&gt;这得从 C 语言说起。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C字符串中的字符必须符合某种编码（ 比如 ASCII）， 并且除了字符串的末尾之外， 字符串里面不能包含空字符， 否则最先被程序读入的空字符将被误认为是字符串结尾， 这些限制使得 C 字符串只能保存文本数据， 而不能保存像图片、 音频、 视频、 压缩文件这样的二进制数据。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上这段文字摘自《Redis设计与实现》。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL唯一索引和插入重复自动更新</title>
      <link>http://tanteng.me/2016/09/mysql-unique-duplicate/</link>
      <pubDate>Fri, 23 Sep 2016 08:28:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/09/mysql-unique-duplicate/</guid>
      <description>&lt;p&gt;有时我们在往数据库插入数据的时候，需要判断某个字段是否存在，如果存在则执行更新操作，如果不存在则执行插入操作，如果每次首先查询一次判断是否存在，再执行插入或者更新操作，就十分不方便。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>友盟 IOS 推送官方 PHP SDK 自定义播示例有误</title>
      <link>http://tanteng.me/2016/09/umeng-ios-php-sdk-customized-wrong/</link>
      <pubDate>Fri, 23 Sep 2016 07:05:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/09/umeng-ios-php-sdk-customized-wrong/</guid>
      <description>&lt;p&gt;最近用到友盟给 IOS 应用推送消息，友盟的推送分为单播，列播，广播，组播，文件播，和自定义播，在使用自定义播官方 PHP SDK 发现官方示例（&lt;span class=&#34;version_sel&#34;&gt;PHP SDK v1.4&lt;/span&gt;）有误。&lt;/p&gt;

&lt;p&gt;主要问题，一个是请求 url 需要加 sign 签名，一个是解析数组 json_decode 函数使用问题，还有一个废弃的校验参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP Fatal error: $this is null</title>
      <link>http://tanteng.me/2016/08/php-fatal-error-this-is-null/</link>
      <pubDate>Thu, 18 Aug 2016 10:40:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/08/php-fatal-error-this-is-null/</guid>
      <description>&lt;p&gt;在 PHP 中，一个类的静态方法内部调用自身类的其他方法时必须用 self::method() 的形式，即使静态方法内部方法调用其他方法也是如此，如果使用 $this-&amp;gt;method() 的形式会报错：Fatal error: $this is null in &amp;#8230; xx.php on line xx.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>npm install 报错: operation not permitted, rename</title>
      <link>http://tanteng.me/2016/08/npm-err-error-eperm-operation-not-permitted-rename/</link>
      <pubDate>Fri, 12 Aug 2016 12:30:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/08/npm-err-error-eperm-operation-not-permitted-rename/</guid>
      <description>&lt;p&gt;运行 npm install 命令安装依赖包，在 Mac 上的 Vagrant 装的虚拟机上没问题，在阿里云 CentOS 上也没问题，但是在 Windows 环境同样是 Vagrant 装的环境相同的虚拟机上就是不成功，报错如下：&lt;/p&gt;

&lt;p&gt;npm ERR! Error: EPERM: operation not permitted, rename &amp;#8216;/usr/share/nginx/html/tanteng.me/node_modules/duplexify&amp;#8217; -&amp;gt; &amp;#8216;/usr/share/nginx/html/tanteng.me/node_modules/.duplexify.DELETE&amp;#8217;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js 和 npm 卸载安装笔记</title>
      <link>http://tanteng.me/2016/08/nodejs-and-npm-install/</link>
      <pubDate>Fri, 12 Aug 2016 06:26:37 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/08/nodejs-and-npm-install/</guid>
      <description>&lt;p&gt;为了学 Vue.js，用 npm 装了 Vue，经过我的折腾，npm 被我玩坏了，干脆连 Node.js 也重新装一个，下面记录一下在本地 Windwos 环境用 vagrant 搭建的虚拟机（Homestaead）和生产环境阿里云 CentOS 系统安装 Node.js 的步骤，以及 npm 安装依赖的不同之处。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>让你的 Laravel 应用与官方保持同步</title>
      <link>http://tanteng.me/2016/08/laravel-office-sync/</link>
      <pubDate>Wed, 03 Aug 2016 02:55:32 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/08/laravel-office-sync/</guid>
      <description>&lt;p&gt;本文转自安正超博客：&lt;a href=&#34;http://overtrue.me/articles/2015/06/sync-your-laravel-project.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;http://overtrue.me/articles/2015/06/sync-your-laravel-project.html&#34;&gt;http://overtrue.me/articles/2015/06/sync-your-laravel-project.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;section&#34;&gt;解决什么问题？&lt;/h2&gt;

&lt;p&gt;我们在用着 4.2，过了一段时间作者发布了 5.0，项目可能还没开发完，然后你又像我一样是一个不升级不舒服斯基，那么用升到最新版是你接下来要忙碌的事情。因为你不知道 4.2 ~ 5.0 变化了多少。所以你不可能手动一个个加上或者删除、修改。有的人可能是备份，然后用新版建立一个项目：&lt;code class=&#34;highlighter-rouge&#34;&gt;composer create-project laravel/laravel&lt;/code&gt; ，然后把原来自己的代码拷过来，然而，变化不一定只是文件新增或者删除啊，可能是原来文件里改了一行，你却没法知道。所以这就头疼了。那么下面我就分享一个超简单的办法来解决这个问题：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 分割 routes.php 路由文件的最佳方式</title>
      <link>http://tanteng.me/2016/08/laravel-routes-map/</link>
      <pubDate>Tue, 02 Aug 2016 09:20:26 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/08/laravel-routes-map/</guid>
      <description>&lt;p&gt;Laravel 的路由功能很强大，路由规则默认都定义在 routes.php 文件中，但是随着项目越来越大，我们需要的定义的规则越来越多，如果几百上千个路由都定义在一个文件中，如何去维护？如果不同的人都在同一个文件定义路由，这就造成了冲突，因此我们有必要将 routes.php 文件分割成多个文件，可以按照功能模块来划分，下面介绍一种很优雅的方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 调试工具 laravel-debugbar 打印日志消息</title>
      <link>http://tanteng.me/2016/08/laravel-debugbar-facade/</link>
      <pubDate>Mon, 01 Aug 2016 15:57:59 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/08/laravel-debugbar-facade/</guid>
      <description>&lt;p&gt;使用 Laravel 的调试工具 laravel-debugbar 的 Facade 方式 Debugbar::info(), Debugbar::error()等方法打印日志消息，页面打不开，查看 PHP 错误日志报错：Call to undefined method DebugBar\DebugBar::info().&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 调试工具 laravel-debugbar</title>
      <link>http://tanteng.me/2016/08/laravel-debugbar-sql/</link>
      <pubDate>Mon, 01 Aug 2016 13:10:38 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/08/laravel-debugbar-sql/</guid>
      <description>&lt;p&gt;给 Laravel 项目安装了 debugbar 调试工具，在 debug 模式下打开页面底部会出现一个工具条，点开可以查看各项性能统计，最重要的是打印页面执行的 sql 语句和调试内容。下面利用 debugbar 工具找到一个 sql 查询的优化点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 7 性能洞察，一张图告诉你</title>
      <link>http://tanteng.me/2016/07/php7-performance-inisight-into/</link>
      <pubDate>Fri, 29 Jul 2016 03:23:06 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/07/php7-performance-inisight-into/</guid>
      <description>&lt;p&gt;PHP 7 发布，最大的特点是经过很多优化性能得到大幅提升，几乎翻倍，甚至比 Facebook 开发的 HHVM 虚拟机性能更快，下面这张图对比了 PHP 5.6，HHVM 和 PHP 7 下的性能对比，带你洞察 PHP 7 的性能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery 获取 intput file 图片的宽高和大小</title>
      <link>http://tanteng.me/2016/07/jquery-intput-file-width-height/</link>
      <pubDate>Mon, 25 Jul 2016 11:14:52 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/07/jquery-intput-file-width-height/</guid>
      <description>&lt;p&gt;如何判断input file表单里上传的图片的宽高和大小呢？这个时候图片还没真正上传，也不是在页面上展示，不能使用$(&amp;#8220;#id&amp;#8221;).width(),$(&amp;#8220;#id&amp;#8221;).height()这种方式。&lt;/p&gt;

&lt;p&gt;在Stack Overflow找到一个方法获取input file图片文件的宽高：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:js decode:true &#34;&gt;var _URL = window.URL || window.webkitURL;
$(&amp;ldquo;#file&amp;rdquo;).change(function (e) {
    var file, img;
    if ((file = this.files[0])) {
        img = new Image();
        img.onload = function () {
            alert(this.width + &amp;ldquo; &amp;rdquo; + this.height);
        };
        img.src = _URL.createObjectURL(file);
    }
});&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>判断PHP的exec函数是否执行成功</title>
      <link>http://tanteng.me/2016/07/php-exec-status/</link>
      <pubDate>Thu, 21 Jul 2016 13:14:54 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/07/php-exec-status/</guid>
      <description>&lt;p class=&#34;refname&#34;&gt;
  做一个代码发布的系统，需要用到PHP的exec函数来执行Linux下的命令和git，svn命令，如何判断PHP的exec函数是否执行成功呢？
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis有序集合常用命令</title>
      <link>http://tanteng.me/2016/07/redis-sorted-set/</link>
      <pubDate>Tue, 19 Jul 2016 10:55:25 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/07/redis-sorted-set/</guid>
      <description>&lt;p&gt;小结一下Redis有序集合的常用命令有：zadd,zrange,zremrangebyrank,zremrangebyscore,zcard等，这些都是使用频率比较高的，还有一些参数的说明等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决 Redis 只读不可写的问题</title>
      <link>http://tanteng.me/2016/07/misconf-redis-configured-save-rdb-snapshots/</link>
      <pubDate>Fri, 15 Jul 2016 02:15:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/07/misconf-redis-configured-save-rdb-snapshots/</guid>
      <description>&lt;p&gt;在 Redis 终端上进行读写操作，发现只读不可写，GET 操作是正常的，SET 操作提示错误：(error)MISCONF Redis is configured to save RDB snapshots,but is currently not able to persist on disk. Commands that may modify the data set are disabled. 如图所示：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2016/07/misconf-redis-is-configured-to-save-rdb-snapashots.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone wp-image-10253 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2016/07/misconf-redis-is-configured-to-save-rdb-snapashots.png&#34; alt=&#34;misconf-redis-is-configured-to-save-rdb-snapashots&#34; width=&#34;732&#34; height=&#34;120&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>提交PHP组件到Packagist 发布自己的Composer包</title>
      <link>http://tanteng.me/2016/07/submit-composer-packagist/</link>
      <pubDate>Wed, 13 Jul 2016 04:04:53 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/07/submit-composer-packagist/</guid>
      <description>&lt;p&gt;Composer是PHP的一个依赖管理工具，它使得PHP焕发新的生机，有了现代化的WEB开发规范，Packagist是PHP组件的库，也有其他的镜像。&lt;/p&gt;

&lt;p&gt;在Packagist上提交了一个自己开发的PHP组件，这样其他开发者就可以使用Composer使用这个包了。这个组件并没什么功能，主要是看看提交PHP组件的流程，并记录了过程中遇到的问题及解决方法，以供参考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>更优雅的jQuery拼接下拉框方式</title>
      <link>http://tanteng.me/2016/07/jquery-append-options/</link>
      <pubDate>Mon, 11 Jul 2016 08:52:52 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/07/jquery-append-options/</guid>
      <description>&lt;p&gt;在Stack Overflow浏览到一个问题：如何用jQuery更好的拼接下拉框代码？这个小需求在实践中也写过很多次，但是网友提供了一个更优雅的jQuery拼接下拉框方式。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:js decode:true &#34;&gt;var options = $(&amp;ldquo;#options&amp;rdquo;);
$.each(result, function() {
    options.append($(&amp;rdquo;&amp;lt;option /&amp;gt;&amp;rdquo;).val(this.ImageFolderID).text(this.Name));
});&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 5.2 队列的配置和使用</title>
      <link>http://tanteng.me/2016/07/laravel-5-queue/</link>
      <pubDate>Sun, 10 Jul 2016 10:14:21 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/07/laravel-5-queue/</guid>
      <description>&lt;p&gt;队列常常用于两种场景，一种是高并发的情况，一种是耗时的操作，可以将任务放到队列中去，消费者从队列取任务执行，当然还有失败的情况如何处理，以及延迟，重试，更复杂的情况还有优先级的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决一个SSRF漏洞</title>
      <link>http://tanteng.me/2016/07/ssrf-shell/</link>
      <pubDate>Thu, 07 Jul 2016 10:39:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/07/ssrf-shell/</guid>
      <description>&lt;p&gt;乌云平台检测出一个SSRF漏洞，漏洞存在于一个远程图片下载的接口，没有对url进行有效的合法性检测。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2016/07/ssrf.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-10191&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2016/07/ssrf.png&#34; alt=&#34;ssrf&#34; width=&#34;900&#34; height=&#34;537&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 gulp watch</title>
      <link>http://tanteng.me/2016/07/gulp-watch/</link>
      <pubDate>Tue, 05 Jul 2016 06:14:18 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/07/gulp-watch/</guid>
      <description>在 Laravel 项目中，使用 gulp 前端构建工具压缩 css,js 文件并自动部署，如果在开发中，改动了 css,js 都要手动执行 gulp 命令，就会很繁琐，使用 gulp watch 监控文件变动，并实时发布，</description>
    </item>
    
    <item>
      <title>PHP Curl 上传文件</title>
      <link>http://tanteng.me/2016/06/php-curl-post-send-file/</link>
      <pubDate>Thu, 30 Jun 2016 03:29:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/06/php-curl-post-send-file/</guid>
      <description>记录一个 curl 示例，代码如下： function curl($file, $targetUrl) { if (function_exists(&amp;lsquo;curl_file_create&amp;rsquo;)) { // php 5.5+ $cFile = curl_file_create($file); } else { // $cFile = &amp;lsquo;@&amp;rsquo; . realpath($file); } $post = array(&amp;lsquo;filename&amp;rsquo; =&amp;gt; $cFile); $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $targetUrl); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $post); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $result = curl_exec($ch); curl_close($ch); return $result; } 检测 curl_file_create 函数是为</description>
    </item>
    
    <item>
      <title>执行sh脚本：/bin/sh^M: bad interpreter: No such file or directory</title>
      <link>http://tanteng.me/2016/06/binshm-bad-interpreter-no-file-directory/</link>
      <pubDate>Tue, 21 Jun 2016 07:59:57 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/06/binshm-bad-interpreter-no-file-directory/</guid>
      <description>&lt;p&gt;执行sh脚本错误：/bin/sh^M: bad interpreter: No such file or directory，这是windows下编码不同造成的，在Linux下修复方法如下，记录一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel Elixir运行gulp命令:Error in plugin ‘gulp-notify’</title>
      <link>http://tanteng.me/2016/06/gulp-notify-notify-send-must-be-installed/</link>
      <pubDate>Mon, 20 Jun 2016 12:58:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/06/gulp-notify-notify-send-must-be-installed/</guid>
      <description>&lt;p&gt;Laravel Elixir运行gulp命令出现错误提示：&lt;/p&gt;

&lt;p&gt;[20:24:02] gulp-notify: [Error in notifier] Error in plugin &amp;#8216;gulp-notify&amp;#8217;&lt;/p&gt;

&lt;p&gt;Message:notify-send must be installed on the system.&lt;/p&gt;

&lt;p&gt;虽然不影响最终的发布，但是还是解决这个问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>常用Linux操作数据库命令及MySQL语句</title>
      <link>http://tanteng.me/2016/06/mysql-command/</link>
      <pubDate>Wed, 15 Jun 2016 11:29:06 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/06/mysql-command/</guid>
      <description>&lt;p&gt;以下是在Linux下经常会用到的MySQL的一些命令，导出，导入，建库建表，备份，以及MySQL修改字段，添加字段等语法。&lt;/p&gt;

&lt;h3 id=&#34;数据库表导入&#34;&gt;数据库表导入&lt;/h3&gt;

&lt;p&gt;恢复sql到数据库，不会覆盖数据库，仅执行恢复的sql语句，常用于数据库表的导入：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:mysql decode:true &#34;&gt;mysql -uroot -p tanteng.me  &amp;lt; mobile_promote.sql&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitlab 和本机建立 ssh 信任</title>
      <link>http://tanteng.me/2016/06/generating-a-new-ssh-key/</link>
      <pubDate>Wed, 08 Jun 2016 12:25:39 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/06/generating-a-new-ssh-key/</guid>
      <description>&lt;p&gt;从Gitlab上使用ssh方式拉取git代码报错：The remote end hung up unexpected，经过排查，是公钥生成可能有问题，重新生成一下，然后在Gitlab上添加SSH key，再次拉取代码就好了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery操作iframe页面DOM</title>
      <link>http://tanteng.me/2016/06/jquery-iframe/</link>
      <pubDate>Fri, 03 Jun 2016 11:36:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/06/jquery-iframe/</guid>
      <description>&lt;p&gt;如图，左侧是一个表单，右侧是一个iframe嵌入的页面，要实现的效果是，左边表单选择不同的模板，右侧要展现不同的模板页面，当输入的标题，文案发送改变，右侧也要实时动态变化，提供预览的效果。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2016/06/jquery_iframe.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-10135&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2016/06/jquery_iframe.png&#34; alt=&#34;jquery_iframe&#34; width=&#34;1092&#34; height=&#34;514&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL查看数据库大小</title>
      <link>http://tanteng.me/2016/06/mysql-data-length/</link>
      <pubDate>Fri, 03 Jun 2016 11:24:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/06/mysql-data-length/</guid>
      <description>&lt;p&gt;1、进入information_schema 数据库（存放了其他的数据库的信息）&lt;/p&gt;

&lt;p&gt;use information_schema;&lt;/p&gt;

&lt;p&gt;2、查询所有数据的大小：&lt;/p&gt;

&lt;p&gt;select concat(round(sum(data_length/1024/1024),2),&amp;#8217;MB&amp;#8217;) as data from tables;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 7安装和开启opcache</title>
      <link>http://tanteng.me/2016/06/php7-opcache/</link>
      <pubDate>Thu, 02 Jun 2016 16:20:20 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/06/php7-opcache/</guid>
      <description>&lt;p&gt;鸟哥在博客中说，提高PHP 7性能的几个tips，第一条就是开启opache，引用下原文：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;记得启用Zend Opcache, 因为PHP7即使不启用Opcache速度也比PHP-5.6启用了Opcache快, 所以之前测试时期就发生了有人一直没有启用Opcache的事情&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>优化 Laravel 网站打开速度</title>
      <link>http://tanteng.me/2016/06/laravel-optimize/</link>
      <pubDate>Thu, 02 Jun 2016 11:59:07 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/06/laravel-optimize/</guid>
      <description>&lt;p&gt;Laravel是一个功能强大的框架，组件很多，代码也很庞大，它的易用方便是牺牲了性能的，即便如此它仍然是一个优秀的框架，但在正式环境下要做好优化提升网站的打开速度。&lt;/p&gt;

&lt;h3 id=&#34;1-关闭debug&#34;&gt;1.关闭debug&lt;/h3&gt;

&lt;p&gt;打开.env文件，把debug设置为false.&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;APP_ENV=local
APP_DEBUG=false
APP_KEY=base64:sT/aTFeaE13eyao1Raee6jC9Ff+Yle1SE+wtyk0H6B4=&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-缓存路由和配置&#34;&gt;2.缓存路由和配置&lt;/h3&gt;

&lt;p&gt;php artisan route:cache&lt;/p&gt;

&lt;p&gt;php artisan config:cache&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>preg_replace_callback用法</title>
      <link>http://tanteng.me/2016/05/preg_replace_callback-usage/</link>
      <pubDate>Sat, 28 May 2016 09:53:32 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/05/preg_replace_callback-usage/</guid>
      <description>&lt;p&gt;preg_replace_callback一般用于正则替换，三个参数，第一个参数正则表达式，第二个参数回调函数，第三个参数是要替换的内容。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Crontab部署计划任务注意事项</title>
      <link>http://tanteng.me/2016/05/crontab-task-note/</link>
      <pubDate>Wed, 18 May 2016 08:28:17 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/05/crontab-task-note/</guid>
      <description>&lt;p&gt;使用Crontab部署计划任务，有几个地方需要注意。&lt;/p&gt;

&lt;p&gt;1.每3小时执行一次，不是* */3 * * *,这样还是每分钟执行一次，应该是0 */3 * * *.&lt;/p&gt;

&lt;p&gt;2.Crontab运行的文件必须要有可执行权限，给文件添加可执行文件的方法：chmod +x filename.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rsync 远程数据同步工具</title>
      <link>http://tanteng.me/2016/05/linux-rsync/</link>
      <pubDate>Wed, 11 May 2016 09:54:29 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/05/linux-rsync/</guid>
      <description>&lt;p&gt;rsync 是一个远程数据同步工具，可以同步文件到远程服务器，使用 rsync 算法来比较文件的不同，它只会覆盖有修改的文件，和新增文件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>set_include_path和require,include</title>
      <link>http://tanteng.me/2016/05/set_include_path-require/</link>
      <pubDate>Wed, 04 May 2016 04:04:53 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/05/set_include_path-require/</guid>
      <description>&lt;p&gt;在PHP中经常使用include，require来引用其他文件，使用相对路径或者绝对路径，如果通过set_include_path函数或者ini_set(&amp;#8216;include_path&amp;#8217;,xxx)设置include_path配置选项，那么require文件如果在其他目录也可以直接引用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Crontab定时任务实例</title>
      <link>http://tanteng.me/2016/05/crontab-sample/</link>
      <pubDate>Tue, 03 May 2016 12:46:28 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/05/crontab-sample/</guid>
      <description>&lt;p&gt;Linux系统使用Crontab跑计划任务，也就是定时任务，基本的语法格式是：&lt;/p&gt;

&lt;p&gt;2 */1 * * * /data/vhosts/example/cronjob/_run_1_hour.sh&lt;/p&gt;

&lt;p&gt;可以在一个sh脚本中指定执行一个或多个PHP脚本，当然也可以直接用PHP解释器运行PHP脚本。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:sh decode:true &#34;&gt;#!/bin/sh
cd /data/vhosts/web/cronjob
RUNPATH=/data/vhosts/web/cronjob
PHPEXEC=/usr/local/php-fcgi/bin/php&lt;/p&gt;

&lt;h1 id=&#34;每小时运行一次此脚本&#34;&gt;每小时运行一次此脚本&lt;/h1&gt;

&lt;p&gt;$PHPEXEC $RUNPATH/test_crontab.php&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown&#43;Bootstrap图片自适应属性</title>
      <link>http://tanteng.me/2016/05/markdown-bootstrap/</link>
      <pubDate>Tue, 03 May 2016 12:36:47 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/05/markdown-bootstrap/</guid>
      <description>&lt;p&gt;Markdown是一个很好的标记语言，越来越流行作为编辑器的语法，Bootstrap是一个前端框架，那么问题来了，Markdown的图片标记如：![alt](url)，在页面上通常会转换成html，这个时候如何给图片加Bootstrap的图片自适应属性.img-responsive?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装并使用bower工具管理前端资源</title>
      <link>http://tanteng.me/2016/04/bower-inpm-nstall/</link>
      <pubDate>Sat, 30 Apr 2016 14:42:54 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/04/bower-inpm-nstall/</guid>
      <description>&lt;p&gt;bower又是一个好东西，它是一个前端包管理器，是一个前端资源库的管理工具，就跟PHP的Composer，Python的pip一样，可以很方便的管理前端资源库，如js，css的扩展包。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>初识bower——前端包管理工具</title>
      <link>http://tanteng.me/2016/04/bower-js/</link>
      <pubDate>Sat, 30 Apr 2016 03:18:55 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/04/bower-js/</guid>
      <description>&lt;p&gt;最开始接触WEB，其实就是从前端开始，那个时候没有掌握后端语言，做静态的HTML页面，开始接触CSS，比较感兴趣，时过境迁，现在的前端技术层出不穷，越来越专业了，JS技术更是异军突起，非常强大，CSS也多了很多特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Composer设置忽略版本匹配</title>
      <link>http://tanteng.me/2016/04/composer-ignore-reqs/</link>
      <pubDate>Tue, 26 Apr 2016 16:15:08 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/04/composer-ignore-reqs/</guid>
      <description>&lt;p&gt;执行composer install遇到错误：Your requirements could not be resolved to an installable set of packages. 这是因为不匹配composer.json要求的版本。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery事件绑定on()与弹窗</title>
      <link>http://tanteng.me/2016/04/jquery-on-dom/</link>
      <pubDate>Mon, 25 Apr 2016 12:00:21 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/04/jquery-on-dom/</guid>
      <description>&lt;p&gt;页面上经常会有弹窗，有的弹窗是动态生成的，有的弹窗是在页面底部隐藏的，对于动态生成的弹窗，如果要监听弹窗的事件，可以使用jQuery的事件绑定on()方法实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>初始化一个 git 项目</title>
      <link>http://tanteng.me/2016/04/git-init/</link>
      <pubDate>Mon, 18 Apr 2016 02:26:10 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/04/git-init/</guid>
      <description>&lt;h4 id=&#34;git-global-setup&#34;&gt;Git global setup&lt;/h4&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true light-well&#34;&gt;git config &amp;ndash;global user.name &amp;ldquo;谈腾&amp;rdquo;
git config &amp;ndash;global user.email &amp;ldquo;tanteng@qq.com&amp;rdquo;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;create-a-new-repository&#34;&gt;Create a new repository&lt;/h4&gt;

&lt;p&gt;&lt;code class=&#34;lang:default decode:true&#34;&gt;git clone git@gitlab.example.com:xx.git
cd adminsns.xunlei.cn
touch README.md
git add README.md
git commit -m &amp;ldquo;add README&amp;rdquo;
git push -u origin master&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Crontab 定时任务格式和使用实例</title>
      <link>http://tanteng.me/2016/04/crontab-demo/</link>
      <pubDate>Sat, 16 Apr 2016 06:36:49 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/04/crontab-demo/</guid>
      <description>&lt;h3 id=&#34;crontab的文件格式&#34;&gt;crontab的文件格式&lt;/h3&gt;

&lt;p&gt;分 时 日 月 星期 要运行的命令&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第1列分钟0～59&lt;/li&gt;
&lt;li&gt;第2列小时0～23（0表示子夜）&lt;/li&gt;
&lt;li&gt;第3列日1～31&lt;/li&gt;
&lt;li&gt;第4列月1～12&lt;/li&gt;
&lt;li&gt;第5列星期0～7（0和7表示星期天）&lt;/li&gt;
&lt;li&gt;第6列要运行的命令&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Nginx 设置 $_SERVER 变量</title>
      <link>http://tanteng.me/2016/04/nginx-set-fastcgi-param/</link>
      <pubDate>Wed, 13 Apr 2016 10:58:09 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/04/nginx-set-fastcgi-param/</guid>
      <description>&lt;p&gt;在有的PHP中定义ENVIRONMENT常量，可以区分开发环境和生产环境，如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;define(&amp;lsquo;ENVIRONMENT&amp;rsquo;, isset($_SERVER[&amp;lsquo;CI_ENV&amp;rsquo;]) ? $_SERVER[&amp;lsquo;CI_ENV&amp;rsquo;] : &amp;lsquo;development&amp;rsquo;);
switch (ENVIRONMENT)
{
    case &amp;lsquo;development&amp;rsquo;:
        error_reporting(-1);
        ini_set(&amp;lsquo;display_errors&amp;rsquo;, 1);
    break;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case &#39;testing&#39;:
case &#39;production&#39;:
    ini_set(&#39;display_errors&#39;, 0);
    if (version_compare(PHP_VERSION, &#39;5.3&#39;, &#39;&amp;amp;gt;=&#39;))
    {
        error_reporting(E_ALL &amp;amp; ~E_NOTICE &amp;amp; ~E_DEPRECATED &amp;amp; ~E_STRICT &amp;amp; ~E_USER_NOTICE &amp;amp; ~E_USER_DEPRECATED);
    }
    else
    {
        error_reporting(E_ALL &amp;amp; ~E_NOTICE &amp;amp; ~E_STRICT &amp;amp; ~E_USER_NOTICE);
    }
break;

default:
    header(&#39;HTTP/1.1 503 Service Unavailable.&#39;, TRUE, 503);
    echo &#39;The application environment is not set correctly.&#39;;
    exit(1); // EXIT_ERROR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>巧用vagrant建立映射目录解决环境兼容问题</title>
      <link>http://tanteng.me/2016/04/vagrantfile-synced-folder/</link>
      <pubDate>Fri, 08 Apr 2016 14:12:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/04/vagrantfile-synced-folder/</guid>
      <description>&lt;p&gt;使用Vagrant装虚拟机的童鞋应该知道在Vagrantfile文件中可以定义本机和虚拟机目录映射，如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.vm.synced_folder &amp;quot;../website&amp;quot;, &amp;quot;/usr/share/nginx/html&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;表示把本机的当前文件目录下website目录映射到虚拟机的指定目录，这样在虚拟机中该目录的内容即是website目录下的，也就是实现了目录共享。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac上安装Homestead</title>
      <link>http://tanteng.me/2016/04/homestead/</link>
      <pubDate>Sun, 03 Apr 2016 10:12:00 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/04/homestead/</guid>
      <description>&lt;p&gt;之前在Windows上用VirtualBox+Vagrant装了一个CentOS 7的虚拟机，回家后又把Mac上的PHP集成开发环境MAMP给卸载了，也用VirtualBox+Vagrant装一个虚拟机，这次用的是Laravel官方封装好的box——Homestead.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于Laravel跳转redirect方法</title>
      <link>http://tanteng.me/2016/03/laravel-redirect/</link>
      <pubDate>Thu, 31 Mar 2016 02:50:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/03/laravel-redirect/</guid>
      <description>这是一个链接，关于Laravel跳转方法redirect()的使用。 http://laraveldaily.com/all-about-redirects-in-laravel-5/</description>
    </item>
    
    <item>
      <title>使用VirtualBox&#43;Vagrant安装CentOS 7环境</title>
      <link>http://tanteng.me/2016/03/windows-virtualbox-vagrant-centos7/</link>
      <pubDate>Thu, 24 Mar 2016 08:08:55 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/03/windows-virtualbox-vagrant-centos7/</guid>
      <description>&lt;p&gt;在Windows上使用VirtualBox+Vagrant安装CentOS 7环境，需要安装VirtualBox和Vagrant工具，以及下载一个CentOS 7的box镜像文件。&lt;/p&gt;

&lt;p&gt;一、安装好以上工具，下载好box文件后，使用vagrant命令添加镜像到Vagrant：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:vim decode:true&#34;&gt;vagrant box add 名称 路径&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里成功添加镜像到Vagrant，如下：&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-9724 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2016/03/vagrant_box_add.png&#34; alt=&#34;vagrant_box_add&#34; width=&#34;603&#34; height=&#34;109&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel集成WordPress扩展包——Corcel</title>
      <link>http://tanteng.me/2016/03/laravel-wordpress-corcel/</link>
      <pubDate>Sun, 20 Mar 2016 04:29:43 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/03/laravel-wordpress-corcel/</guid>
      <description>&lt;p&gt;Corcel是一个可以适用于Laravel框架的集成Wordpress的扩展包，使用wordpress的后台发布文章，通过它的接口可以在Laravel中方便的调取文章等，安装和使用也非常简单。&lt;/p&gt;

&lt;p&gt;Corcel的Github地址：&lt;a href=&#34;https://github.com/jgrossi/corcel&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://github.com/jgrossi/corcel&#34;&gt;https://github.com/jgrossi/corcel&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里讲一下大概的过程，具体的安装和使用见github主页上的说明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL备份数据库命令</title>
      <link>http://tanteng.me/2016/03/mysql-backup/</link>
      <pubDate>Sat, 19 Mar 2016 16:48:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/03/mysql-backup/</guid>
      <description>&lt;p&gt;MySQL备份数据库命令&lt;/p&gt;

&lt;p&gt;1.导出整个数据库&lt;/p&gt;

&lt;p&gt;导出文件默认是存在mysql\bin目录下&lt;/p&gt;

&lt;p&gt;mysqldump -u 用户名 -p 数据库名 &amp;gt; 导出的文件名&lt;/p&gt;

&lt;p&gt;mysqldump -u user_name -p123456 database_name &amp;gt; outfile_name.sql&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解RESTful架构</title>
      <link>http://tanteng.me/2016/03/restful/</link>
      <pubDate>Wed, 09 Mar 2016 02:17:10 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/03/restful/</guid>
      <description>什么是RESTful架构？如何理解RESTFul？了解RESTFul的URL表现形式。 链接：http://www.ruanyifeng.co</description>
    </item>
    
    <item>
      <title>PHP闭包函数传参及使用外部变量</title>
      <link>http://tanteng.me/2016/03/php-closure-use/</link>
      <pubDate>Tue, 08 Mar 2016 04:14:17 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/03/php-closure-use/</guid>
      <description>&lt;p&gt;在Laravel控制器写两个方法，一个是在内部创建一个闭包函数，一个是执行传过来的闭包函数，测试闭包的写法，use使用外部变量，及闭包函数的传参。如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;//测试闭包传参及use使用外部变量
public function testClosure($t1, $t2)
{
    $closure = function ($param1, $param2) use ($t1, $t2) {
        echo $param1.$param2.$t1.$t2;
    };
    $this-&amp;gt;execClosure(&amp;lsquo;test.closure&amp;rsquo;, $closure);
}&lt;/p&gt;

&lt;p&gt;//执行闭包函数
protected function execClosure($name, Closure $closure)
{
    echo &amp;lsquo;Closure func name:&amp;lsquo;.$name;
    echo &amp;lsquo;&amp;lt;br&amp;gt;&amp;rsquo;;
    $closure(&amp;lsquo;p1&amp;rsquo;, &amp;lsquo;p2&amp;rsquo;);
}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel Nginx配置示例</title>
      <link>http://tanteng.me/2016/02/laravel-nginx-server-conf/</link>
      <pubDate>Sat, 20 Feb 2016 16:43:57 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/02/laravel-nginx-server-conf/</guid>
      <description>&lt;p&gt;这是一个Laravel框架运行nginx服务器的配置示例，Laravel框架版本5.2&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel 5.2自带用户注册和登录认证</title>
      <link>http://tanteng.me/2016/02/laravel-5-2-auth/</link>
      <pubDate>Fri, 19 Feb 2016 07:14:06 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/02/laravel-5-2-auth/</guid>
      <description>&lt;p&gt;Laravel 5.2自带用户注册和登录认证，安装好Laravel后，在app根目录执行php artisan make:auth,即可自动安装一个简易的功能完整的用户认证系统。&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-9509 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2016/02/laravel-login.png&#34; alt=&#34;laravel-login&#34; width=&#34;750&#34; height=&#34;460&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel维护模式的实现原理</title>
      <link>http://tanteng.me/2016/02/laravel-maintenance/</link>
      <pubDate>Thu, 18 Feb 2016 14:35:06 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/02/laravel-maintenance/</guid>
      <description>&lt;p&gt;Laravel开启维护模式的方法是：php artisan down,关闭维护模式的命令是：php artisan up，当开启维护模式后，打开网站任何链接都提示“维护中”，当然这是可自定义的，并且返回503的HTTP码，这其实就是通过中间件来实现的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rm 、 git rm –cached 和 git rm 的区别</title>
      <link>http://tanteng.me/2016/02/git-rm-cached-diff/</link>
      <pubDate>Thu, 18 Feb 2016 09:03:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/02/git-rm-cached-diff/</guid>
      <description>1.rm 删除文件，和git没有任何关系 2.git rm –cached 删除git追踪文件，但是不删除文件 3.git rm 删除git追踪文件，同时删除文件</description>
    </item>
    
    <item>
      <title>如何使用truncate table清空有外键约束的表</title>
      <link>http://tanteng.me/2016/02/truncate-table-foreign-keys/</link>
      <pubDate>Thu, 18 Feb 2016 03:36:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/02/truncate-table-foreign-keys/</guid>
      <description>&lt;p&gt;在MySQL中使用&amp;#8221;truncate table 表名&amp;#8221;语句可以清空一张表，并且计数器会重置，但是在存在外键约束的表中无法使用truncate，那怎么办？&lt;/p&gt;

&lt;p&gt;方法是首先禁用外键，使用truncate之后再恢复！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS 7通过yum安装MySQL</title>
      <link>http://tanteng.me/2016/02/centos-7-yum-install-mysql/</link>
      <pubDate>Mon, 08 Feb 2016 05:30:40 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/02/centos-7-yum-install-mysql/</guid>
      <description>在CentOS 7中使用yum list mysql*，没有可以安装的MySQL版本，CentOS 7中默认使用的数据库是MariaDB，关于MariaD</description>
    </item>
    
    <item>
      <title>MySQL 字符串字段转换 crc32 建索引提高查询效率</title>
      <link>http://tanteng.me/2016/02/crc32-mysql-index/</link>
      <pubDate>Mon, 01 Feb 2016 01:29:07 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/02/crc32-mysql-index/</guid>
      <description>&lt;p&gt;给字符串类型的字段建立索引效率不高，但是必须要经常查这个字段怎么建索引？比如这个字段名称是 sys_trans_id 字符串类型，那么可以建一个字段 sys_trans_id_src32 来存储 crc32 的值，并给这个字段建立索引。&lt;/p&gt;

&lt;p&gt;crc32 是整形，在MySQL中，给整形字段建立索引效率比较高，crc32虽然不能确保唯一性，但是无碍，相同的机率也是极小，关键是可以大大减少查询的范围，给sys_trans_id_src32 这个字段建立索引，查询的时候带上 crc32 字段就可以利用到索引。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel Ioc容器singleton和bind方法的区别</title>
      <link>http://tanteng.me/2016/01/laravel-singleton-bind/</link>
      <pubDate>Fri, 29 Jan 2016 06:06:19 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/01/laravel-singleton-bind/</guid>
      <description>&lt;p&gt;Laravel中使用Ioc容器的singleton方法和bind方法创建实例有什么区别呢？它们两个都是返回一个类的实例，不同的是singleton是单例模式，而bind是每次返回一个新的实例，看下面的两个例子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP GOTO语法</title>
      <link>http://tanteng.me/2016/01/php-goto/</link>
      <pubDate>Thu, 28 Jan 2016 10:47:43 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/01/php-goto/</guid>
      <description>PHP的GOTO语法可以跳转到指定位置，如代码所示，goto display，在代码后面定义了一个display:,这样当执行goto disp</description>
    </item>
    
    <item>
      <title>Laravel构造函数自动依赖注入</title>
      <link>http://tanteng.me/2016/01/laravel-construct-ioc/</link>
      <pubDate>Thu, 28 Jan 2016 05:59:41 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/01/laravel-construct-ioc/</guid>
      <description>&lt;p&gt;在Laravel的构造函数中可以实现自动依赖注入，而不需要实例化之前先实例化需要的类，如代码所示：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;&amp;lt;?php
namespace Lio\Http\Controllers\Forum;&lt;/p&gt;

&lt;p&gt;use Lio\Forum\Replies\ReplyRepository;
use Lio\Forum\Threads\ThreadCreator;
use Lio\Forum\Threads\ThreadCreatorListener;
use Lio\Forum\Threads\ThreadDeleterListener;
use Lio\Forum\Threads\ThreadForm;
use Lio\Forum\Threads\ThreadRepository;
use Lio\Forum\Threads\ThreadUpdaterListener;
use Lio\Http\Controllers\Controller;
use Lio\Tags\TagRepository;&lt;/p&gt;

&lt;p&gt;class ForumThreadsController extends Controller implements ThreadCreatorListener, ThreadUpdaterListener, ThreadDeleterListener
{
    protected $threads;
    protected $tags;
    protected $currentSection;
    protected $threadCreator;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function __construct(
    ThreadRepository $threads,
    ReplyRepository $replies,
    TagRepository $tags,
    ThreadCreator $threadCreator
) {
    $this-&amp;amp;gt;threads = $threads;
    $this-&amp;amp;gt;tags = $tags;
    $this-&amp;amp;gt;threadCreator = $threadCreator;
    $this-&amp;amp;gt;replies = $replies;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Laravel中注册Facades的步骤</title>
      <link>http://tanteng.me/2016/01/laravel-facades-register/</link>
      <pubDate>Wed, 27 Jan 2016 06:42:52 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/01/laravel-facades-register/</guid>
      <description>&lt;p&gt;在Laravel中将类注册为Fcade可以使用Ioc容器，每次使用这个类的时候只会初始化一次类，类似单例模式，而且可以像使用静态方法调用类的方法，下面是在Laravel中注册Facades的步骤。&lt;/p&gt;

&lt;p&gt;1.在项目app目录的Providers/AppServiceProvider.php中的register方法新增方法，代码如下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>查询数据库重复记录sql</title>
      <link>http://tanteng.me/2016/01/repeat-group-having/</link>
      <pubDate>Mon, 25 Jan 2016 09:59:07 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/01/repeat-group-having/</guid>
      <description>每条记录都有个hash字段，hash是把这条记录几个不同的字段组成唯一的值进行hash算法存的一个值，有了这个hash，可以判断记录是否重复</description>
    </item>
    
    <item>
      <title>MySQL导出表结构表数据mysqldump命令用法</title>
      <link>http://tanteng.me/2016/01/mysql-mysqldump-usage/</link>
      <pubDate>Tue, 19 Jan 2016 15:50:52 +0000</pubDate>
      
      <guid>http://tanteng.me/2016/01/mysql-mysqldump-usage/</guid>
      <description>命令行下具体用法如下： mysqldump -u用戶名 -p密码 -d 數據库名 表名 脚本名; 1、导出數據库為dbname的表结构（其中用戶名為root,密码為dbpas</description>
    </item>
    
    <item>
      <title>Composer的自动加载机制</title>
      <link>http://tanteng.me/2015/12/composer-autoload/</link>
      <pubDate>Thu, 24 Dec 2015 15:41:16 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/composer-autoload/</guid>
      <description>&lt;p&gt;如项目下的composer.json文件中有autoload的定义：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;&amp;ldquo;autoload&amp;rdquo;: {
        &amp;ldquo;classmap&amp;rdquo;: [
            &amp;ldquo;database&amp;rdquo;
        ],
        &amp;ldquo;psr-4&amp;rdquo;: {
            &amp;ldquo;GrahamCampbell\BootstrapCMS\&amp;ldquo;: &amp;ldquo;app/&amp;rdquo;
        }
    },&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样定义如何实现自动加载呢？这里classmap和psr-4的区别又是什么？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel中Trait的使用</title>
      <link>http://tanteng.me/2015/12/laravel-trait/</link>
      <pubDate>Mon, 21 Dec 2015 14:03:18 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/laravel-trait/</guid>
      <description>&lt;p&gt;看看PHP官方手册对Trait的定义：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p class=&#34;para&#34;&gt;
  自 PHP 5.4.0 起，PHP 实现了代码复用的一个方法，称为 traits。
&lt;/p&gt;

&lt;p class=&#34;para&#34;&gt;
  Traits 是一种为类似 PHP 的单继承语言而准备的代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用方法集。Traits 和类组合的语义是定义了一种方式来减少复杂性，避免传统多继承和混入类（Mixin）相关的典型问题。
&lt;/p&gt;

&lt;p class=&#34;para&#34;&gt;
  Trait 和一个类相似，但仅仅旨在用细粒度和一致的方式来组合功能。Trait 不能通过它自身来实例化。它为传统继承增加了水平特性的组合；也就是说，应用类的成员不需要继承。
&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Laravel 执行 migrate 命令:No such file or directory</title>
      <link>http://tanteng.me/2015/12/laravel-migrate-mysql-2000/</link>
      <pubDate>Sun, 20 Dec 2015 09:50:22 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/laravel-migrate-mysql-2000/</guid>
      <description>&lt;p&gt;今天使用Laravel命令行工具操作数据库迁移操作时报错，提示mysql 2002错误，如图：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/artisan-migrate-PDOException.png&#34; rel=&#34;attachment wp-att-9354&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone wp-image-9354&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/artisan-migrate-PDOException.png&#34; alt=&#34;artisan-migrate-PDOException&#34; width=&#34;420&#34; height=&#34;118&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装MySQL-python包遇到的问题</title>
      <link>http://tanteng.me/2015/12/python-install-mysql-python/</link>
      <pubDate>Sun, 13 Dec 2015 16:24:57 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/python-install-mysql-python/</guid>
      <description>&lt;p&gt;使用pip install MySQL-python的方式安装，遇到以下几个问题：&lt;/p&gt;

&lt;p&gt;1.提示错误EnvironmentError: mysql_config not found&lt;/p&gt;

&lt;p&gt;这是因为本机是Mac OSX系统，并且装的MySQL是MAMP集成环境中的，实际上mysql_config这个文件是存在的，但是默认包里面的路径有问题，可以重新装一个MySQL到系统默认位置，不过既然已经有了MySQL不想重复装。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>brew安装错误:/usr/local/include is not writable</title>
      <link>http://tanteng.me/2015/12/brew-folder-not-writable/</link>
      <pubDate>Sun, 13 Dec 2015 16:11:35 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/brew-folder-not-writable/</guid>
      <description>&lt;p&gt;在Mac上使用brew命令安装东西，提示/usr/local/include is not writable的错误，在Stack Overflow很快找到解决办法：&lt;/p&gt;

&lt;p&gt;Simple solution that worked for me:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;click on your background to go to finder&lt;/li&gt;
&lt;li&gt;click on go and go to folder /usr&lt;/li&gt;
&lt;li&gt;right click on local and do get info&lt;/li&gt;
&lt;li&gt;unlock the lock at the bottom&lt;/li&gt;
&lt;li&gt;click + sign and add your user to the list and give read/write privileges&lt;/li&gt;
&lt;li&gt;click on the gear sign at the bottom and choose apply to enclosed items to recurse under that directory and assign privileges too all directories beneath it.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>SAE使用第三方Python依赖包</title>
      <link>http://tanteng.me/2015/12/sae-python-vendor/</link>
      <pubDate>Sat, 12 Dec 2015 07:34:20 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/sae-python-vendor/</guid>
      <description>&lt;p&gt;在SAE上创建了一个Python Flask应用，可以正常运行，但是在本地安装测试了Flask-Cache模块后传上去，网站无法运行，提示缺少包，如何在SAE使用第三方Python依赖包呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python最佳实践的一些小技巧</title>
      <link>http://tanteng.me/2015/12/python-best-practice/</link>
      <pubDate>Sat, 12 Dec 2015 04:08:44 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/python-best-practice/</guid>
      <description>Python最佳实践的一些小技巧 链接：http://python.jobbole.com/83552/</description>
    </item>
    
    <item>
      <title>Flask配置本地虚拟主机访问及Apache反向代理</title>
      <link>http://tanteng.me/2015/12/flask-vhost-apache-proxy/</link>
      <pubDate>Fri, 11 Dec 2015 14:30:39 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/flask-vhost-apache-proxy/</guid>
      <description>&lt;p&gt;本地访问Flask应用，首先要启动应用，如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true &#34;&gt;(venv)tantengdeMacBook-Pro:pythonflask tanteng$ python run.py
 * Restarting with stat
 * Debugger is active!
 * Debugger pin code: 200-154-157&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样表示应用开始运行了，Flask自带Web Server服务，默认监听端口5000，只需要在浏览器访问127.0.0.1:5000就可以了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask配置文件使用类和继承方式</title>
      <link>http://tanteng.me/2015/12/flask-config-extends-class/</link>
      <pubDate>Fri, 11 Dec 2015 11:42:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/flask-config-extends-class/</guid>
      <description>&lt;p&gt;Flask中加载配置文件的方法是：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python mark:5 decode:true&#34;&gt;from flask import Flask, session, g, render_template&lt;/p&gt;

&lt;h1 id=&#34;from-flask-openid-ext-openid-import-openid&#34;&gt;from flask_openid.ext.openid import OpenID&lt;/h1&gt;

&lt;p&gt;app = Flask(&lt;strong&gt;name&lt;/strong&gt;)
app.config.from_object(&amp;lsquo;websiteconfig&amp;rsquo;)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>让PyCharm可以识别virtualenv中的包</title>
      <link>http://tanteng.me/2015/12/pycharm-virtualenv/</link>
      <pubDate>Thu, 10 Dec 2015 01:49:49 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/pycharm-virtualenv/</guid>
      <description>&lt;p&gt;比如安装Flask框架，需要在virtualenv虚拟环境中安装依赖包，也运行在virtualenv环境中，PyCharm IDE无法识别Flask和依赖包，也就不能转到定义，智能提示等，如何让PyCharm可以识别virtualenv中的包？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/flask-pycharm-setting-interpreter.png&#34; rel=&#34;attachment wp-att-9164&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-9164&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/flask-pycharm-setting-interpreter.png&#34; alt=&#34;flask-pycharm-setting-interpreter&#34; width=&#34;1109&#34; height=&#34;701&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/flask-pycharm-setting-interpreter.png 1109w, https://blog.tanteng.me/wp-content/uploads/2015/12/flask-pycharm-setting-interpreter-768x485.png 768w&#34; sizes=&#34;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask-website: No module named flask.ext.openid</title>
      <link>http://tanteng.me/2015/12/no-module-named-flask-ext-openid/</link>
      <pubDate>Wed, 09 Dec 2015 10:35:12 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/no-module-named-flask-ext-openid/</guid>
      <description>&lt;p&gt;在本地运行Flask官网程序（Github:&lt;a href=&#34;https://github.com/mitsuhiko/flask-website&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://github.com/mitsuhiko/flask-website&#34;&gt;https://github.com/mitsuhiko/flask-website&lt;/a&gt;&lt;/a&gt;），安装好requirements.txt里所依赖的模块后，运行报错：No module named flask.ext.openid.&lt;/p&gt;

&lt;p&gt;这里需要把flask_website目录下的\__init__.py文件进行如下修改：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true  &#34;&gt;# from flask_openid.ext.openid import OpenID
from flask_openid import OpenID&lt;/code&gt;&lt;/p&gt;

&lt;p class=&#34;&#34;&gt;
  再运行run.py启动网站，通过浏览器访问127.0.0.1:5000成功访问！
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python装饰器示例</title>
      <link>http://tanteng.me/2015/12/python-mydecorator/</link>
      <pubDate>Wed, 09 Dec 2015 03:10:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/python-mydecorator/</guid>
      <description>&lt;p&gt;在许多地方会发现这样的写法：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python mark:1 decode:true&#34;&gt;@app.route(&amp;lsquo;/&amp;rsquo;)
def hello_world():
    return &amp;lsquo;Hello World!&amp;rsquo;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;调用函数前加一个@是什么鬼，原来它是使用Python装饰器。根据网上的教程写一个简单的Python装饰器示例：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true &#34;&gt;# coding=utf-8&lt;/p&gt;

&lt;h1 id=&#34;定义一个装饰器&#34;&gt;定义一个装饰器&lt;/h1&gt;

&lt;p&gt;def mydecorator(func):
    def wrapper(*args,&lt;strong&gt;kw):
        print(&amp;lsquo;hi,now is:&amp;lsquo;)
        return func(*args,&lt;/strong&gt;kw)
    return wrapper&lt;/p&gt;

&lt;h1 id=&#34;使用装饰器&#34;&gt;使用装饰器&lt;/h1&gt;

&lt;p&gt;@mydecorator
def now():
    print(&amp;lsquo;2015-12-9&amp;rsquo;)&lt;/p&gt;

&lt;p&gt;now()&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第一个Flask程序</title>
      <link>http://tanteng.me/2015/12/flask-hello-world/</link>
      <pubDate>Tue, 08 Dec 2015 11:36:44 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/flask-hello-world/</guid>
      <description>&lt;p&gt;第一个Flask程序从Hello World开始，首先安装好Flask环境及框架后，在目录新建hello.py，如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true &#34;&gt;from flask import Flask
app = Flask(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;@app.route(&amp;lsquo;/&amp;rsquo;)
def hello_world():
    return &amp;lsquo;Hello World!&amp;rsquo;&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == &amp;lsquo;&lt;strong&gt;main&lt;/strong&gt;&amp;lsquo;:
    app.run()&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装Flask出错解决以及pip trusted-host参数</title>
      <link>http://tanteng.me/2015/12/trusted-host-pip/</link>
      <pubDate>Tue, 08 Dec 2015 11:31:50 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/trusted-host-pip/</guid>
      <description>&lt;p&gt;安装Flask报错：&lt;/p&gt;

&lt;p&gt;The repository located at pypi.douban.com is not a trusted or secure host and is being ignored. If this repository is available via HTTPS it is recommended to use HTTPS instead, otherwise you may&lt;/p&gt;

&lt;p&gt;silence this warning and allow it anyways with &amp;#8216;&amp;#8211;trusted-host pypi.douban.com&amp;#8217;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/flask_install_error.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-9145&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/flask_install_error.png&#34; alt=&#34;flask_install_error&#34; width=&#34;783&#34; height=&#34;326&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows升级Python2.7.6到2.7.9版本</title>
      <link>http://tanteng.me/2015/12/windows-python-279/</link>
      <pubDate>Tue, 08 Dec 2015 06:18:55 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/windows-python-279/</guid>
      <description>&lt;p&gt;Windows上升级Python2.7.6版本到2.7.9版本，因为都是2.7版本，是同一个安装目录，直接下载一个2.7.9版本的安装程序，覆盖原路径即可。经测可行。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/python279.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-9139&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/python279.png&#34; alt=&#34;python279&#34; width=&#34;499&#34; height=&#34;428&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask安装: A true SSLContext object is not available</title>
      <link>http://tanteng.me/2015/12/flask-sslcontext/</link>
      <pubDate>Tue, 08 Dec 2015 05:35:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/flask-sslcontext/</guid>
      <description>&lt;p&gt;如果安装Flask出现这样的报错:InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL&lt;/p&gt;

&lt;p&gt;appropriately and may cause certain SSL connections to fail. For more information, see &lt;a href=&#34;https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning&#34;&gt;https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在windows上安装Python2.7 Scrapy模块</title>
      <link>http://tanteng.me/2015/11/windows-python27-scrapy/</link>
      <pubDate>Thu, 26 Nov 2015 03:39:21 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/windows-python27-scrapy/</guid>
      <description>&lt;p&gt;由于Scrapy目前对Python2.7的支持最好，Python3下可能会有问题，所以还是在Python2.7下装Scrapy模块。&lt;/p&gt;

&lt;p&gt;在Mac上自带的Python2.7环境安装Scrapy模块，一路顺风，直接pip install -i &lt;a href=&#34;http://pypi.douban.com/simple&#34;&gt;http://pypi.douban.com/simple&lt;/a&gt; Scrapy,自动安装所需的模块，一切OK.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3单例模式示例</title>
      <link>http://tanteng.me/2015/11/python-singleton/</link>
      <pubDate>Tue, 24 Nov 2015 06:44:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/python-singleton/</guid>
      <description>&lt;p&gt;当我们理解了Python的__new__方法后，我们还可以利用它来做一些其他有趣的事情，比如实现设计模式中的单例模式(singleton) 。&lt;/p&gt;

&lt;p&gt;因为类每一次实例化后产生的过程都是通过__new__来控制的，所以通过重载__new__方法，我们可以很简单的实现单例模式。&lt;/p&gt;

&lt;p&gt;先看在python3中怎么实现单例模式：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true&#34;&gt;class Singleton(object):
    def &lt;strong&gt;new&lt;/strong&gt;(cls):
        if not hasattr(cls, &amp;lsquo;instance&amp;rsquo;):
            cls.instance = super(Singleton, cls).&lt;strong&gt;new&lt;/strong&gt;(cls)
        return cls.instance&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == &amp;lsquo;&lt;strong&gt;main&lt;/strong&gt;&amp;lsquo;:
    a = Singleton()
    b = Singleton()
    print(id(a))
    print(id(b))&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用pip镜像方式安装python包</title>
      <link>http://tanteng.me/2015/11/pip-mirror/</link>
      <pubDate>Tue, 24 Nov 2015 03:44:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/pip-mirror/</guid>
      <description>&lt;p&gt;使用pip安装python包由于官网经常被墙无法安装，可以使用pip镜像方式安装python包。&lt;/p&gt;

&lt;h3 id=&#34;几个pypi镜像地址&#34;&gt;几个pypi镜像地址&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;pypi.python.org&lt;/li&gt;
&lt;li&gt;pypi.douban.com&lt;/li&gt;
&lt;li&gt;pypi.hustunique.com&lt;/li&gt;
&lt;li&gt;pypi.gocept.com&lt;/li&gt;
&lt;li&gt;pypi.tuna.tsinghua.edu.cn&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>httpd-vhosts设置域名别名</title>
      <link>http://tanteng.me/2015/11/httpd-vhost-domain-alias/</link>
      <pubDate>Thu, 19 Nov 2015 06:24:43 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/httpd-vhost-domain-alias/</guid>
      <description>&lt;p&gt;在Apache的httpd-vhosts可以配置虚拟主机域名，也可以设置域名别名，如域名www.yii2.com，可以给它设置一个或多个域名别名，通过www.yii3.com,www.yii4.com访问。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>学python的几本电子书</title>
      <link>http://tanteng.me/2015/11/python-ebook/</link>
      <pubDate>Tue, 17 Nov 2015 02:05:28 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/python-ebook/</guid>
      <description>看云上几本学python的免费电子书： 链接：http://www.kancloud.cn/tag/Python</description>
    </item>
    
    <item>
      <title>HTML5的本地存储方案localStorage</title>
      <link>http://tanteng.me/2015/11/html5-localstorage/</link>
      <pubDate>Mon, 16 Nov 2015 06:20:03 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/html5-localstorage/</guid>
      <description>&lt;p&gt;本地存储解决方案很多，比如Flash SharedObject、Google Gears、Cookie、DOM Storage、User Data、window.name、Silverlight、Open Database等。&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-3718 size-full&#34; title=&#34;20110515054811428&#34; src=&#34;http://www.css88.com/wp-content/uploads/2011/06/20110515054811428.jpg&#34; alt=&#34;html5的本地存储localStorage&#34; width=&#34;600&#34; height=&#34;202&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP中serialize和json序列化与反序列化的区别</title>
      <link>http://tanteng.me/2015/11/serialize-json-diff/</link>
      <pubDate>Thu, 12 Nov 2015 06:53:20 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/serialize-json-diff/</guid>
      <description>&lt;p&gt;在PHP中，serialize和json两种方式对一个对象或数组进行序列化或反序列化有什么区别呢？&lt;/p&gt;

&lt;p&gt;假设一个对象和一个数组：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;$web = new stdClass;
$web-&amp;gt;site = &amp;lsquo;tantengvip&amp;rsquo;;
$web-&amp;gt;owner = &amp;lsquo;tuntun&amp;rsquo;;
$web-&amp;gt;age = 5;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何解决 SourceTree 一次性提交大量文件很慢的情况</title>
      <link>http://tanteng.me/2015/11/sourcetree-commit-slowly/</link>
      <pubDate>Wed, 11 Nov 2015 10:04:55 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/sourcetree-commit-slowly/</guid>
      <description>&lt;p&gt;SourceTree提交代码卡死，特别是一次提交的代码文件很多的时候，这个时候建议用Git命令行的方式提交，就不会出现卡死的情况。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/2015/11/sourcetree-commit-slowly/git-pull/&#34; rel=&#34;attachment wp-att-8977&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-8977&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/11/git-pull.png&#34; alt=&#34;git-pull&#34; width=&#34;677&#34; height=&#34;426&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chmod命令修改目录权限数字含义</title>
      <link>http://tanteng.me/2015/11/chmod-number/</link>
      <pubDate>Tue, 10 Nov 2015 06:31:10 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/chmod-number/</guid>
      <description>&lt;p&gt;常见的目录权限：&lt;/p&gt;

&lt;p&gt;-rw&amp;#8212;&amp;#8212;- (600) &amp;#8212; 只有属主有读写权限。&lt;/p&gt;

&lt;p&gt;-rw-r&amp;#8211;r&amp;#8211; (644) &amp;#8212; 只有属主有读写权限；而属组用户和其他用户只有读权限。&lt;/p&gt;

&lt;p&gt;-rwx&amp;#8212;&amp;#8212; (700) &amp;#8212; 只有属主有读、写、执行权限。&lt;/p&gt;

&lt;p&gt;-rwxr-xr-x (755) &amp;#8212; 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP中stdClass的意义</title>
      <link>http://tanteng.me/2015/11/php-stdclass/</link>
      <pubDate>Sun, 08 Nov 2015 13:38:38 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/php-stdclass/</guid>
      <description>&lt;p&gt;在WordPress中很多地方使用stdClass来定义一个对象（而通常是用数组的方式），然后使用get_object_vars来把定义的对象『转换』成数组。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac终端git命令提示错误:missing xcrun</title>
      <link>http://tanteng.me/2015/11/mac-git-missing-xcrun/</link>
      <pubDate>Sun, 08 Nov 2015 07:56:52 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/mac-git-missing-xcrun/</guid>
      <description>&lt;p&gt;在 Mac 下 PhpStorm 和 sourcetree 配合使用，提示错误：can&amp;#8217;t start Git，点击&amp;#8221;fix it&amp;#8221;, 填写的路径usr/bin/git是没错的，于是在终端下输入命令git，提示如下错误：&lt;/p&gt;

&lt;p&gt;xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 Requests模块get和post示例</title>
      <link>http://tanteng.me/2015/11/python3-requests-get-post/</link>
      <pubDate>Thu, 05 Nov 2015 06:48:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/python3-requests-get-post/</guid>
      <description>&lt;p&gt;使用Python3的Requests模块用于模拟get和post请求非常简单强大，可以构造header头，传递各种类型参数，cookies，session等，模拟不同的请求，这里只演示一下最简单的get和post示例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SourceTree提交代码合并到发布分支操作步骤</title>
      <link>http://tanteng.me/2015/11/sourcetree-release/</link>
      <pubDate>Thu, 05 Nov 2015 06:03:41 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/sourcetree-release/</guid>
      <description>&lt;p&gt;发布代码有一个发布分支，汇总所有要发布的分支，需要把各个分支合并到发布分支上来，每个提交的分支作为一个“点”，以下是SourceTree提交分支到发布分支的操作步骤：&lt;/p&gt;

&lt;p&gt;1.最好以自己的分支再创建一个新的分支，防止操作过程有不可逆的失误。&lt;/p&gt;

&lt;p&gt;2.找到第一次提交修改上次提交，右键重置到当前分支，选择软合并，这样就把自己的分支合并成一个“点”，然后提交代码。&lt;/p&gt;

&lt;p&gt;3.到要合并的主分支，切换到“所有分支”，找到自己刚提交的点，右键“遴选”，再推送到远端。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何使用python3刷微信步数</title>
      <link>http://tanteng.me/2015/11/python3-wechat/</link>
      <pubDate>Wed, 04 Nov 2015 14:05:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/python3-wechat/</guid>
      <description>&lt;p&gt;由于微信第三方接口的漏洞，一款乐动力的运动APP可以用来刷微信步数，原理很简单，伪造POST请求就可以了。&lt;/p&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/11/swxbs.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-8853&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/11/swxbs.jpg&#34; alt=&#34;微信刷步数&#34; width=&#34;320&#34; height=&#34;568&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/11/swxbs.jpg 320w, https://blog.tanteng.me/wp-content/uploads/2015/11/swxbs-169x300.jpg 169w&#34; sizes=&#34;(max-width: 320px) 100vw, 320px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微信打赏WordPress插件</title>
      <link>http://tanteng.me/2015/11/wechat-rewrd-wordpress-plugin/</link>
      <pubDate>Wed, 04 Nov 2015 05:58:01 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/wechat-rewrd-wordpress-plugin/</guid>
      <description>&lt;p&gt;折腾了一个WordPress小插件，给每篇文章下面添加一个微信打赏功能，安装插件后，可在后台设置自己的微信收款二维码图片。&lt;/p&gt;

&lt;h3 id=&#34;后台设置页面&#34;&gt;后台设置页面&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/11/wechat-reward16.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone wp-image-8841 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/11/wechat-reward16.png&#34; alt=&#34;wechat-reward16&#34; width=&#34;946&#34; height=&#34;436&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/11/wechat-reward16.png 946w, https://blog.tanteng.me/wp-content/uploads/2015/11/wechat-reward16-300x138.png 300w&#34; sizes=&#34;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis INCR的应用场景</title>
      <link>http://tanteng.me/2015/11/redis-incr/</link>
      <pubDate>Mon, 02 Nov 2015 05:59:26 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/redis-incr/</guid>
      <description>&lt;p&gt;Redis INCR的应用场景主要是计数器和限速器。&lt;/p&gt;

&lt;h2 id=&#34;模式-计数器&#34;&gt;模式：计数器&lt;/h2&gt;

&lt;p&gt;计数器是 Redis 的原子性自增操作可实现的最直观的模式了，它的想法相当简单：每当某个操作发生时，向 Redis 发送一个 INCR 命令。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis加锁防止重复操作的原理</title>
      <link>http://tanteng.me/2015/11/redis-lock-incr/</link>
      <pubDate>Mon, 02 Nov 2015 03:23:57 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/redis-lock-incr/</guid>
      <description>&lt;p&gt;使用Redis加锁的方式可以防止重复操作，包括表单提交，ajax等http请求，它的原理就是redis的incr命令给键自增，如果返回值不是1，就表示是重复请求，具体看代码：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/**
 * 锁定请求
 * @param int $expire 锁定时间
 * @param string $mark 自定义标记
 * @return bool
 */
protected function lock($expire=1,$mark=&amp;ldquo;){
    $url=strtolower(MODULE_NAME.&amp;lsquo;/&amp;rsquo;.ACTION&lt;em&gt;NAME);//操作地址
    $prefix=&amp;lsquo;lock&lt;/em&gt;&amp;rsquo;;$sid=$_COOKIE[C(&amp;ldquo;SESSION_OPTIONS.name&amp;rdquo;)];
    $key=$prefix.md5($sid.$url.$mark);//令牌键值
    /**
     * @var Redis $redis
     */
    $redis = D(&amp;lsquo;Redis&amp;rsquo;);
    if($redis-&amp;gt;incr($key)==1){
        return $redis-&amp;gt;expire($key,$expire);
    }
    return false;
}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>call_user_func与实例化的区别</title>
      <link>http://tanteng.me/2015/10/call-user-func-vs-new-class/</link>
      <pubDate>Fri, 30 Oct 2015 10:43:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/10/call-user-func-vs-new-class/</guid>
      <description>&lt;p&gt;使用call_user_func可以执行一个类的某个方法，而且可以给方法传参数，它跟实例化一个类再调用方法有什么区别呢？看下面的例子。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;class A
{
    public function __Construct($a,$b,$c)
    {
        echo &amp;lsquo;Construct&amp;rsquo;.$a.$b.$c;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function test($a,$b,$c)
{
    echo &#39; test&#39;.$a.$b.$c;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;$a = new A(1,2,3);
$a-&amp;gt;test(1,2,3);&lt;/p&gt;

&lt;p&gt;call_user_func([&amp;lsquo;A&amp;rsquo;,&amp;lsquo;test&amp;rsquo;],1,2,3);&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP反射类ReflectionClass</title>
      <link>http://tanteng.me/2015/10/php-reflectionclass/</link>
      <pubDate>Fri, 30 Oct 2015 02:46:56 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/10/php-reflectionclass/</guid>
      <description>&lt;p class=&#34;lang:php decode:true &#34;&gt;
  首先定义一个类A，用ReflectionClass得到A的反射类对象，通过ReflectionClass对象可以得到类的各种属性，包括命名空间，父类，类名等，使用newInstanceArgs可以传入构造函数的参数创建一个新的类的实例。
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class A
{
    public $name;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function __Construct($name,$des)
{
    $this-&amp;amp;gt;name = $name.&#39;,&#39;.$des;
}
public function aa()
{
    echo $this-&amp;amp;gt;name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;$class = new ReflectionClass(&amp;lsquo;A&amp;rsquo;);&lt;/p&gt;

&lt;p&gt;$aaa = $class-&amp;gt;newInstanceArgs([&amp;lsquo;blog.tanteng.me&amp;rsquo;,&amp;lsquo;blog&amp;rsquo;]);&lt;/p&gt;

&lt;p&gt;$aaa-&amp;gt;aa();&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP约束参数类型</title>
      <link>http://tanteng.me/2015/10/php-oop-typehinting/</link>
      <pubDate>Thu, 29 Oct 2015 03:10:33 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/10/php-oop-typehinting/</guid>
      <description>&lt;p&gt;PHP5起可以约束参数类型，在Yii2框架中使用很多，可以指定一个类的方法或者函数参数必须是某个类型，类型可以是对象，数组，字符串，整形。如果指定了参数类型，那么传入的值必须是符合类型约束的，否则会报异常错误。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>写一个PHP单例模式的类</title>
      <link>http://tanteng.me/2015/10/php-simple-singleton-pattern-class/</link>
      <pubDate>Sun, 25 Oct 2015 10:24:12 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/10/php-simple-singleton-pattern-class/</guid>
      <description>&lt;p&gt;最近为了解决一个问题，需要写一个PHP的单例模式的类，以前也小有研究，其实项目中包括框架自身许多地方也是使用的单例模式，但没自己写过，于是自己随手写了一个实现单机模式的简单类。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何防止ajax重复提交</title>
      <link>http://tanteng.me/2015/10/redis-jquery-ajax/</link>
      <pubDate>Sun, 25 Oct 2015 07:00:21 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/10/redis-jquery-ajax/</guid>
      <description>&lt;p&gt;关于防止重复提交，可以参考如下链接：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.tanteng.me/2015/08/redis-lock/&#34; target=&#34;_blank&#34;&gt;使用Redis加锁防止重复提交&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.tanteng.me/2015/07/form-submit/&#34; target=&#34;_blank&#34;&gt;防止表单重复提交的几种方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.tanteng.me/2015/05/js-lock/&#34; target=&#34;_blank&#34;&gt;jquery的data方法用法&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本文讲讲如何使用redis和jquery防止ajax重复提交，如果按钮是button，点击按钮之后，js使按钮禁用，程序那边同时也加锁即可。如果按钮是a标签，则需要使用jquery的data方法在页面上加锁，具体方法见上面第3个链接。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP数组array_merge和&#43;的区别</title>
      <link>http://tanteng.me/2015/10/php-array-merge/</link>
      <pubDate>Fri, 16 Oct 2015 15:04:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/10/php-array-merge/</guid>
      <description>&lt;p&gt;这个例子比较全面的比较了PHP合并两个数组常见的方法array_merge和+的区别：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$array1 = array(
    &amp;lsquo;test1&amp;rsquo; =&amp;gt; &amp;lsquo;test1&amp;rsquo;,
    &amp;lsquo;test2&amp;rsquo; =&amp;gt; &amp;lsquo;test2&amp;rsquo;,
    8       =&amp;gt; &amp;lsquo;9&amp;rsquo;,
    &amp;lsquo;10&amp;rsquo;    =&amp;gt; &amp;lsquo;1010&amp;rsquo;,
    &amp;lsquo;s10&amp;rsquo;   =&amp;gt; &amp;lsquo;s10&amp;rsquo;,
);&lt;/p&gt;

&lt;p&gt;$array2 = array(
    &amp;lsquo;test1&amp;rsquo; =&amp;gt; &amp;lsquo;test1+&amp;rsquo;,
    &amp;lsquo;test2&amp;rsquo; =&amp;gt; &amp;lsquo;test2+&amp;rsquo;,
    &amp;lsquo;++&amp;rsquo;    =&amp;gt; &amp;lsquo;++&amp;rsquo;,
    8       =&amp;gt; &amp;lsquo;9999&amp;rsquo;,
    &amp;lsquo;10&amp;rsquo;    =&amp;gt; &amp;lsquo;10101010&amp;rsquo;,
    &amp;lsquo;s10&amp;rsquo;   =&amp;gt; &amp;lsquo;s10101010&amp;rsquo;,
);&lt;/p&gt;

&lt;p&gt;$result = array_merge($array1,$array2);
$result2 = $array1+$array2;
var_dump($result);
var_dump($result2);
exit;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac终端如何查看本机ip和mac地址</title>
      <link>http://tanteng.me/2015/10/mac-ip-addr/</link>
      <pubDate>Sat, 10 Oct 2015 14:46:28 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/10/mac-ip-addr/</guid>
      <description>&lt;p&gt;windows命令行输入ipconfig即可查看本机的ip地址和mac物理地址，macbook终端输入什么命令查看本机ip和mac地址呢？&lt;/p&gt;

&lt;p&gt;打开终端输入ifconfig命名，会显示一大堆关于网络、网卡的信息，如下：&lt;/p&gt;

&lt;p&gt;tantengdeMacBook-Pro:~ tanteng$ ifconfig&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于编程语言的性能</title>
      <link>http://tanteng.me/2015/09/program-language-performance/</link>
      <pubDate>Sun, 27 Sep 2015 02:43:46 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/09/program-language-performance/</guid>
      <description>关于“性能”，Charles 在算法导论课上的观点很好： 在编程上，性能的重要性是排在用户体验、安全性、可扩展性、稳定性等方面之后，是最不重要的</description>
    </item>
    
    <item>
      <title>Mac下firefox插件hostadmin切换host权限不足</title>
      <link>http://tanteng.me/2015/09/mac-firefox-hostadmin/</link>
      <pubDate>Fri, 04 Sep 2015 16:58:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/09/mac-firefox-hostadmin/</guid>
      <description>在Mac下firefox插件hostadmin切换host时提示权限不足，解决办法，在终端输入以下命令即可： sudo chmod og+w /etc/hosts chmod修改权限，og</description>
    </item>
    
    <item>
      <title>PHP变量名区分大小写，函数和方法名不区分大小写</title>
      <link>http://tanteng.me/2015/09/php-lower-diff/</link>
      <pubDate>Fri, 04 Sep 2015 01:35:02 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/09/php-lower-diff/</guid>
      <description>PHP变量名区分大小写，函数和方法名不区分大小写</description>
    </item>
    
    <item>
      <title>Python3异常处理和异常类型</title>
      <link>http://tanteng.me/2015/08/python-excption/</link>
      <pubDate>Wed, 19 Aug 2015 02:34:08 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/python-excption/</guid>
      <description>&lt;h3 id=&#34;python的异常处理&#34;&gt;Python的异常处理&lt;/h3&gt;

&lt;p&gt;如下是使用Python的xlrd模块打款excel文件，这个操作可能会出现异常，使用try捕捉异常，进行处理，防止程序的中断运行，并且记录异常信息到日志。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true &#34;&gt;def save_file(file, filename):
    &amp;ldquo;&amp;rdquo;&amp;rdquo;
    打开excel文件
    &amp;ldquo;&amp;rdquo;&amp;rdquo;
    try:
        book = xlrd.open_workbook(file)
        sheet = book.sheet_by_index(0)
    except Exception as e:
        logging.info(&amp;lsquo;错误：{0} 文件：{1}&amp;rsquo;.format(e, file))
        shutil.copy2(file, &amp;lsquo;./error&amp;rsquo; + filename)
        return False
    row_nums = sheet.nrows
    col_nums = sheet.ncols&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python中for循环的else</title>
      <link>http://tanteng.me/2015/08/python-for-else/</link>
      <pubDate>Mon, 17 Aug 2015 07:51:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/python-for-else/</guid>
      <description>&lt;p class=&#34;&#34;&gt;
  Python中循环语句for或者while后else表示循环条件不成立的时候执行，如：
&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true &#34;&gt;# -&lt;em&gt;- coding:utf-8 -&lt;/em&gt;-
for i in range(10):
    print(i)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if i == 5:  # 此时不会执行else，当i大于等于10的时候，就不满足for条件，就执行else
    print(&amp;quot;Too big - I&#39;m giving up!&amp;quot;)
    break
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;else:
    print(&amp;ldquo;Completed successfully&amp;rdquo;)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery.cookie的基本用法</title>
      <link>http://tanteng.me/2015/08/jquery-cookie-base/</link>
      <pubDate>Fri, 14 Aug 2015 01:35:24 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/jquery-cookie-base/</guid>
      <description>&lt;p&gt;jQuery.cookie的基本用法：&lt;/p&gt;

&lt;p&gt;Include script &lt;em&gt;after&lt;/em&gt; the jQuery library (unless you are packaging scripts somehow else):&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:js decode:true&#34;&gt;&amp;lt;script src=&amp;ldquo;/path/to/jquery.cookie.js&amp;rdquo;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create session cookie:&lt;/p&gt;

&lt;div class=&#34;highlight highlight-javascript&#34;&gt;
  &lt;code class=&#34;lang:js decode:true&#34;&gt;$.cookie(&#39;name&#39;, &#39;value&#39;);&lt;/code&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>使用jquery的cookie实例</title>
      <link>http://tanteng.me/2015/08/jquery-cookie/</link>
      <pubDate>Thu, 13 Aug 2015 13:03:13 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/jquery-cookie/</guid>
      <description>&lt;p&gt;jquery的cookie插件可以方便操作cookie，首先引入jquery.cookie.js文件，可以去官网下载。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:js decode:true&#34;&gt;&amp;lt;script type=&amp;ldquo;text/javascript&amp;rdquo; src=&amp;rdquo;&lt;strong&gt;STATIC&lt;/strong&gt;/common/js/jquery.cookie.js&amp;rdquo;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以下使用jquery的cookie实现一个简单的功能，一个公共栏，可以点击展开或者收缩，第一次进入页面默认展开，第二次以后进入页面默认收缩，但是点击也可以展开。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP浮点数运算精度的问题</title>
      <link>http://tanteng.me/2015/08/php-float/</link>
      <pubDate>Wed, 12 Aug 2015 06:24:28 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/php-float/</guid>
      <description>&lt;p&gt;在用PHP进行浮点数的运算中，遇到一个坑，没有得到预期中的结果，如下代码：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$a = 69.1;&lt;/p&gt;

&lt;p&gt;$b = $a*100;&lt;/p&gt;

&lt;p&gt;$c = $b-6910;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;你猜$c的值是多少？$c输出的值是-9.0949470177293E-13.为什么会这样？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用vagrant安装VirtualBox虚拟机说明</title>
      <link>http://tanteng.me/2015/08/virtualbox-vagrant/</link>
      <pubDate>Tue, 11 Aug 2015 08:53:12 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/virtualbox-vagrant/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-8553&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/111.png&#34; alt=&#34;111&#34; width=&#34;96&#34; height=&#34;173&#34; /&gt;&lt;/p&gt;

&lt;p&gt;首先安装这个玩意VirtualBox~~&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-8554&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/222.png&#34; alt=&#34;222&#34; width=&#34;98&#34; height=&#34;131&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后安装这个玩意vagrant&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP匿名函数的实例</title>
      <link>http://tanteng.me/2015/08/php-closure-demo/</link>
      <pubDate>Tue, 11 Aug 2015 08:35:47 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/php-closure-demo/</guid>
      <description>PHP5.3起就支持匿名函数，可以放心在生产环境中使用，对于PHP的很多新特性该用的地方要大胆使用，可以使代码更简洁，功能实现也更加方便。 以</description>
    </item>
    
    <item>
      <title>使用Redis防止重复提交</title>
      <link>http://tanteng.me/2015/08/redis-lock/</link>
      <pubDate>Tue, 11 Aug 2015 08:21:10 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/redis-lock/</guid>
      <description>&lt;p&gt;使用Redis可以很方便的防止表单或者按钮重复提交，给动作加锁，在一定时间内不能再次执行。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;//防止重复提交
$lock&lt;em&gt;nopay = &amp;lsquo;nopay&lt;/em&gt;&amp;rsquo;.$sb_id.$sb_uid.$pay_money;
if(!$this-&amp;gt;lock(10,$lock_nopay)){
    $this-&amp;gt;error(&amp;ldquo;当前取消打款操作尚未完成，请勿重复操作！&amp;rdquo;);
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里调用lock方法，锁定10秒钟，10秒钟内如果再次提交就中断操作，认为是重复提交。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP队列服务HTTPSQS的安装和使用</title>
      <link>http://tanteng.me/2015/08/php-httpsqs/</link>
      <pubDate>Tue, 11 Aug 2015 05:38:27 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/php-httpsqs/</guid>
      <description>&lt;p&gt;HTTPSQS(HTTP Simple Queue Service)是一个基于HTTP GET/POST请求的简单队列服务。&lt;figure id=&#34;attachment_8542&#34; style=&#34;width: 500px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/httpsqs_elements.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;wp-image-8542 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/httpsqs_elements.png&#34; alt=&#34;PHP队列服务HTTPSQS的安装和使用&#34; width=&#34;500&#34; height=&#34;503&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/httpsqs_elements.png 500w, https://blog.tanteng.me/wp-content/uploads/2015/08/httpsqs_elements-150x150.png 150w, https://blog.tanteng.me/wp-content/uploads/2015/08/httpsqs_elements-298x300.png 298w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34; /&gt;&lt;/a&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;PHP队列原理图&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用mod_concatx扩展合并js,css</title>
      <link>http://tanteng.me/2015/08/mod-concat-js-css/</link>
      <pubDate>Tue, 11 Aug 2015 01:39:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/mod-concat-js-css/</guid>
      <description>&lt;p&gt;PHP的mod_concatx模块扩展可以方便的把多个js，css文件合并成一个文件，以加速页面的渲染，减少请求时间和服务器压力。mod_concatx模块是在mod_concat基础上修改的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:xhtml decode:true &#34;&gt;&amp;lt;link rel=&amp;ldquo;stylesheet&amp;rdquo; type=&amp;ldquo;text/css&amp;rdquo; media=&amp;ldquo;screen&amp;rdquo; ←
    href=&amp;ldquo;&lt;a href=&#34;http://lemon.holsman.net:8001/cdn/??music2.css,common.css&amp;quot;&#34;&gt;http://lemon.holsman.net:8001/cdn/??music2.css,common.css&amp;quot;&lt;/a&gt; /&amp;gt;
&amp;lt;script type=&amp;ldquo;text/javascript&amp;rdquo;  ←
    src=&amp;ldquo;&lt;a href=&#34;http://lemon.holsman.net:8001/cdn/??music2.js,mp.js,dalai_llama.js,ratings_widget.js,widget_config.js,common.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#34;&gt;http://lemon.holsman.net:8001/cdn/??music2.js,mp.js,dalai_llama.js,ratings_widget.js,widget_config.js,common.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/a&gt;
&amp;lt;script language=&amp;ldquo;javascript&amp;rdquo; type=&amp;ldquo;text/javascript&amp;rdquo; ←
    src=&amp;ldquo;&lt;a href=&#34;http://tangerine.holsman.net:8001/o/??journals_blog_this.js,adsWrapper.js,flashtag.js,feeds_subscribe.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#34;&gt;http://tangerine.holsman.net:8001/o/??journals_blog_this.js,adsWrapper.js,flashtag.js,feeds_subscribe.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/a&gt;
&amp;lt;script type=&amp;ldquo;text/javascript&amp;rdquo;  ←
    src=&amp;ldquo;&lt;a href=&#34;http://orange.holsman.net:8001/digital/??dm_client_aol.js,cannae.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#34;&gt;http://orange.holsman.net:8001/digital/??dm_client_aol.js,cannae.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP5.5的迭代生成器</title>
      <link>http://tanteng.me/2015/08/php-yield/</link>
      <pubDate>Sat, 08 Aug 2015 16:12:17 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/php-yield/</guid>
      <description>&lt;p&gt;PHP5.5引入了迭代生成器的概念，迭代的概念早就在PHP有了，但是迭代生成器是PHP的一个新特性，这跟python3中的迭代生成器类似，看看PHP5.5的迭代生成器如何定义。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;&amp;lt;?php
    function xrange($start, $end, $step = 1) {
        for ($i = $start; $i &amp;lt;= $end; $i += $step) {
            yield $i;
        }
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach (xrange(1, 1000000) as $num) {
    echo $num, &amp;quot;\n&amp;quot;;
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>PHP5.6 curl去除@语法</title>
      <link>http://tanteng.me/2015/08/php5-6-curl/</link>
      <pubDate>Tue, 04 Aug 2015 10:24:53 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/php5-6-curl/</guid>
      <description>&lt;p&gt;在一个传图方法中用到了curl上传文件，在文件名前加上@语法表示上传文件，这在PHP5.3中是正常的，但是在PHP5.6中彻底废除了@语法，导致上传图片无法使用。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php mark:5 decode:true &#34;&gt;//支持远程文件上传
if(empty($urlinfo[&amp;lsquo;host&amp;rsquo;])){
    $tmp_name=dirname($file[&amp;lsquo;tmp_name&amp;rsquo;]).&amp;lsquo;/&amp;rsquo;.$file[&amp;lsquo;title&amp;rsquo;].&amp;lsquo;.&amp;rsquo;.$file[&amp;lsquo;extension&amp;rsquo;];//加上文件后缀
    rename($file[&amp;lsquo;tmp_name&amp;rsquo;],$tmp_name);
    $fields[&amp;lsquo;file&amp;rsquo;] = &amp;lsquo;@&amp;rsquo;.$tmp_name;//加@符号curl就会把它当成是文件上传处理
}else{
    $fields[&amp;lsquo;url&amp;rsquo;]=$file[&amp;lsquo;tmp_name&amp;rsquo;];
}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS代码优化及规范</title>
      <link>http://tanteng.me/2015/08/js-optimization/</link>
      <pubDate>Tue, 04 Aug 2015 01:35:25 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/js-optimization/</guid>
      <description>&lt;p&gt;1.不能用页面的index=0 1 2来寻找对应的值（防止列表结构（增加或者删除列）发生变化，代码就要做相应的修改）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/js1.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone wp-image-8477 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/js1.png&#34; alt=&#34;js1&#34; width=&#34;484&#34; height=&#34;332&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/js1.png 484w, https://blog.tanteng.me/wp-content/uploads/2015/08/js1-300x206.png 300w&#34; sizes=&#34;(max-width: 484px) 100vw, 484px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在标签中对每列的单元格添加唯一的标识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP在shell里面换行使用PHP_EOL</title>
      <link>http://tanteng.me/2015/08/php-shell-php_eol/</link>
      <pubDate>Sat, 01 Aug 2015 06:34:05 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/php-shell-php_eol/</guid>
      <description>&lt;p&gt;PHP在shell里面换行使用PHP_EOL，shell不认识&lt;br&gt;&lt;br/&gt;之类的html标记。或者使用PHP_EOL (string)常量，可以取得运行系统中换行符。linux中是\n, win中是\r\n, mac中是\r.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python根据ObjectId下载GridFS文档</title>
      <link>http://tanteng.me/2015/07/python-gridfs-objectid/</link>
      <pubDate>Thu, 30 Jul 2015 03:56:15 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-gridfs-objectid/</guid>
      <description>&lt;p&gt;使用MongoDB的GridFS存取文件，如何用Python根据ObjectId来下载指定的文档呢？这里需要用到bson.objectid模块中的方法来生成MongoDB的ObjectId.&lt;/p&gt;

&lt;p&gt;查询语句：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true &#34;&gt;file = fs.find_one({&amp;rsquo;_id&amp;rsquo;: ObjectId(&amp;lsquo;55b98b70498e38fdda304209&amp;rsquo;)})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里ObjectId需要引入bson.objectid才能使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在SAE执行PHP计划任务</title>
      <link>http://tanteng.me/2015/07/sae-cron/</link>
      <pubDate>Thu, 23 Jul 2015 01:30:56 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/sae-cron/</guid>
      <description>&lt;p&gt;在SAE中运行PHP计划任务，是编辑APPNAME/1/config.yaml文件(APPNAME是你的应用名，1代表版本号)，输入cron作业的描述。&lt;/p&gt;

&lt;p&gt;目前SAE平台支持使用类自然语言或者unix crontab语言描述cron任务。&lt;/p&gt;

&lt;p&gt;本页有两个示例代码，将下面的任意一种config.yaml保存后，放置于应用目录中即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>不同语言的Unix时间戳函数</title>
      <link>http://tanteng.me/2015/07/unix-timestamp/</link>
      <pubDate>Tue, 21 Jul 2015 06:09:56 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/unix-timestamp/</guid>
      <description>&lt;p&gt;以下是不同语言的Unix时间戳(Unix timestamp)函数：&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      Java
    &lt;/td&gt;
    
    &lt;td&gt;
      time
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      JavaScript
    &lt;/td&gt;
    
    &lt;td&gt;
      Math.round(new Date().getTime()/1000)&lt;br /&gt; getTime()返回数值的单位是毫秒
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      Microsoft .NET / C#
    &lt;/td&gt;
    
    &lt;td&gt;
      epoch = (DateTime.Now.ToUniversalTime().Ticks &amp;#8211; 621355968000000000) / 10000000
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      MySQL
    &lt;/td&gt;
    
    &lt;td&gt;
      SELECT unix_timestamp(now())
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      Perl
    &lt;/td&gt;
    
    &lt;td&gt;
      time
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      PHP
    &lt;/td&gt;
    
    &lt;td&gt;
      time()
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      PostgreSQL
    &lt;/td&gt;
    
    &lt;td&gt;
      SELECT extract(epoch FROM now())
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      Python
    &lt;/td&gt;
    
    &lt;td&gt;
      先 import time 然后 time.time()
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      Ruby
    &lt;/td&gt;
    
    &lt;td&gt;
      获取Unix时间戳：Time.now 或 Time.new&lt;br /&gt; 显示Unix时间戳：Time.now.to_i
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      SQL Server
    &lt;/td&gt;
    
    &lt;td&gt;
      SELECT DATEDIFF(s, &amp;#8216;1970-01-01 00:00:00&amp;#8217;, GETUTCDATE())
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      Unix / Linux
    &lt;/td&gt;
    
    &lt;td&gt;
      date +%s
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      VBScript / ASP
    &lt;/td&gt;
    
    &lt;td&gt;
      DateDiff(&amp;#8220;s&amp;#8221;, &amp;#8220;01/01/1970 00:00:00&amp;#8221;, Now())
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;uttd&#34;&gt;
      其他操作系统&lt;br /&gt; (如果Perl被安装在系统中)
    &lt;/td&gt;
    
    &lt;td&gt;
      命令行状态：perl -e &amp;#8220;print time&amp;#8221;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>PhpStorm 9.0注册码（License Key）</title>
      <link>http://tanteng.me/2015/07/phpstorm-9-0%E6%B3%A8%E5%86%8C%E7%A0%81license-key/</link>
      <pubDate>Fri, 17 Jul 2015 15:38:31 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/phpstorm-9-0%E6%B3%A8%E5%86%8C%E7%A0%81license-key/</guid>
      <description>&lt;p&gt;PhpStorm注册码&lt;/p&gt;

&lt;p&gt;User Name:&lt;/p&gt;

&lt;p&gt;EMBRACE&lt;/p&gt;

&lt;p&gt;License Key:&lt;/p&gt;

&lt;p&gt;===== LICENSE BEGIN =====&lt;/p&gt;

&lt;p&gt;43136-12042010&lt;/p&gt;

&lt;p&gt;00002UsvSON704l&amp;#8221;dILe1PVx3y4&amp;#8243;B3&lt;/p&gt;

&lt;p&gt;49AU6oSDJrsjE8nMOQh&amp;#8221;8HTDJHIUUh&lt;/p&gt;

&lt;p&gt;gd1BebYc5U&amp;#8221;6OxDbVsALB4Eb10PW8&amp;#8243;&lt;/p&gt;

&lt;p&gt;===== LICENSE END =====&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python连接Mysql常用的库（mysqlclient示例）</title>
      <link>http://tanteng.me/2015/07/python-mysql/</link>
      <pubDate>Wed, 15 Jul 2015 02:18:38 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-mysql/</guid>
      <description>&lt;p&gt;Python连接Mysql常用的库有MySQLdb，mysqlclient，MySQL Connector/Python，但是django文档上推荐使用mysqlclient，以下截取django官网关于MySQL API的介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python编码风格</title>
      <link>http://tanteng.me/2015/07/python-encoding-style/</link>
      <pubDate>Tue, 14 Jul 2015 08:45:15 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-encoding-style/</guid>
      <description>&lt;p&gt;&lt;span id=&#34;131&#34;&gt;对于 Python 而言， &lt;span id=&#34;index-7&#34;&gt; &lt;/span&gt; PEP 8 已成为大多数项目遵循的风格指南；&lt;/span&gt;&lt;span id=&#34;132&#34;&gt;它给出了一个高度可读，视觉友好的编码风格。&lt;/span&gt;&lt;span id=&#34;133&#34;&gt;每个 Python 开发者应该阅读一下；&lt;/span&gt;&lt;span id=&#34;134&#34;&gt;这里是为你提取出来的最重要的要点：&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3接收命令行参数sys.argv用法</title>
      <link>http://tanteng.me/2015/07/python3-sys-argv/</link>
      <pubDate>Mon, 13 Jul 2015 15:59:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python3-sys-argv/</guid>
      <description>&lt;p&gt;Python3中，使用sys.argv可以接收命令行传入的参数，需要import sys模块，sys.argv第一个参数是文件名，无需定义，第二参数开始是命令行输入的参数，以空格隔开。&lt;/p&gt;

&lt;p&gt;举例如下，运行sys_argv.py脚本附带两个参数分别是run1和run2，运行结果如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true&#34;&gt;&amp;gt;&amp;gt;&amp;gt;python3 sys_argv.py run1 run2
I&amp;rsquo;m action1
I&amp;rsquo;m action2&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么Python类的方法需要加self作为第一个参数？</title>
      <link>http://tanteng.me/2015/07/python-self/</link>
      <pubDate>Sun, 12 Jul 2015 10:15:31 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-self/</guid>
      <description>&lt;p&gt;为什么Python类的方法需要加self作为第一个参数？比如Python类的方法都是这样定义的：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class CharField(Field):
    description = _(&amp;ldquo;String (up to %(max_length)s)&amp;ldquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def __init__(self, *args, **kwargs):
    super(CharField, self).__init__(*args, **kwargs)
    self.validators.append(validators.MaxLengthValidator(self.max_length))

def check(self, **kwargs):
    errors = super(CharField, self).check(**kwargs)
    errors.extend(self._check_max_length_attribute(**kwargs))
    return errors&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到一篇文章讲这个问题，转载过来了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>local variable ‘count’ referenced before assignment</title>
      <link>http://tanteng.me/2015/07/local-variable-referenced-before-assignment/</link>
      <pubDate>Sat, 11 Jul 2015 14:34:00 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/local-variable-referenced-before-assignment/</guid>
      <description>&lt;p&gt;在写一个Python闭包函数实现计数器功能的时候，出现了报错：local variable &amp;#8216;count&amp;#8217; referenced before assignment.这是怎么回事呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python函数中的函数(闭包示例)</title>
      <link>http://tanteng.me/2015/07/python-closure/</link>
      <pubDate>Sat, 11 Jul 2015 14:21:51 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-closure/</guid>
      <description>&lt;p&gt;Python函数中也可以定义函数，也就是闭包。跟js中的闭包概念其实差不多，举个Python中闭包的例子。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true&#34;&gt;def make_adder(addend):
    def adder(augend):
        return augend + addend
    return adder&lt;/p&gt;

&lt;p&gt;p = make_adder(23)
q = make_adder(44)&lt;/p&gt;

&lt;p&gt;print(p(100))
print(q(100))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行结果是：123和144.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3可变参数*args,**kwargs及区别</title>
      <link>http://tanteng.me/2015/07/python-args-kwargs/</link>
      <pubDate>Sat, 11 Jul 2015 13:37:44 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-args-kwargs/</guid>
      <description>&lt;p&gt;在Python的函数参数中经常可以看到*args和**kwargs这样的写法，这是Python的魔法参数，也就是可变参数，它支持传入多个参数，下面看看它们的区别。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3基础:String模块ascii_letters和digits</title>
      <link>http://tanteng.me/2015/07/python3-ascii-letters/</link>
      <pubDate>Sat, 11 Jul 2015 05:10:10 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python3-ascii-letters/</guid>
      <description>&lt;p&gt;本文介绍Python3中String模块ascii_letters和digits方法，其中ascii_letters是生成所有字母，从a-z和A-Z,digits是生成所有数字0-9.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3中的真除和Floor除法</title>
      <link>http://tanteng.me/2015/07/python3-floor-division/</link>
      <pubDate>Fri, 10 Jul 2015 13:43:54 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python3-floor-division/</guid>
      <description>&lt;p&gt;在Python3中，除法运算有两种，一种是真除，一种是Floor除法，这两者是有分别的，分别如代码所示：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true python&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;
2.5
&amp;gt;&amp;gt;&amp;gt;10//4
2
&amp;gt;&amp;gt;&amp;gt;&lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;.0
2.5
&amp;gt;&amp;gt;&amp;gt;10//4.0
2.0&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python保存MongoDB上的文件到本地</title>
      <link>http://tanteng.me/2015/07/python-mongodb-save-file/</link>
      <pubDate>Fri, 10 Jul 2015 09:47:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-mongodb-save-file/</guid>
      <description>MongoDB上的文档通过GridFS来操作，Python也可以通过pymongo连接MongoDB数据库，使用pymongo模块的grid</description>
    </item>
    
    <item>
      <title>Python中的switch case</title>
      <link>http://tanteng.me/2015/07/python%E4%B8%AD%E7%9A%84switch-case/</link>
      <pubDate>Thu, 09 Jul 2015 12:51:21 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python%E4%B8%AD%E7%9A%84switch-case/</guid>
      <description>&lt;p&gt;Python本身并没有其他语言都有的switch,case这种语言结构，那么在Python中，是如何代替switch的呢？&lt;/p&gt;

&lt;p&gt;Python使用字典的数据类型来代替switch，发挥switch的功能，代码如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP return 的其他用法</title>
      <link>http://tanteng.me/2015/07/php-return/</link>
      <pubDate>Wed, 08 Jul 2015 15:22:02 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/php-return/</guid>
      <description>&lt;p&gt;PHP 的 return 的含义大家很清楚了，几乎随处可见，但是见过在函数外使用 return 的吗？如下代码：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;require_once(&amp;lsquo;./bb-load.php&amp;rsquo;);&lt;/p&gt;

&lt;p&gt;bb_repermalink(); // The magic happens here.&lt;/p&gt;

&lt;p&gt;if ($self) {
    if (strpos($self, &amp;lsquo;.php&amp;rsquo;) !== false) {
        require($self);
    } else {
        require(BB_PATH . &amp;lsquo;profile-base.php&amp;rsquo;);
    }
    return;
}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>防止表单重复提交的方式</title>
      <link>http://tanteng.me/2015/07/form-submit/</link>
      <pubDate>Wed, 08 Jul 2015 15:12:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/form-submit/</guid>
      <description>&lt;p&gt;关于防止表单重复提交的做法有很多，本人知道的有如下，简单讲讲几种方式。有redis，session，jquery等几种方法。&lt;/p&gt;

&lt;p&gt;1.有redis的环境&lt;/p&gt;

&lt;p&gt;把提交的动作action，参数之类的作为redis的key，存进redis，设置一个很短的缓存时间，提交的时候判断如果存在这个key，说明是重复提交数据。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP连接mongodb认证错误:Failed to connect,Authentication failed</title>
      <link>http://tanteng.me/2015/07/authentication-failed/</link>
      <pubDate>Wed, 08 Jul 2015 06:40:56 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/authentication-failed/</guid>
      <description>&lt;p&gt;PHP扩展php_mongo.dll无法通过用户名密码认证的方式连接mongodb数据库，报错如下：&lt;strong&gt;Fatal error&lt;/strong&gt;: Uncaught exception &amp;#8216;MongoConnectionException&amp;#8217; with message &amp;#8216;Failed to connect to: 127.0.0.1:27017: Authentication failed on database &amp;#8216;js_send_excel&amp;#8217; with username &amp;#8216;tanteng22&amp;#8242;: auth failed&amp;#8217; in D:\xampp\htdocs\v3\index.php:6 Stack trace: #0 D:\xampp\htdocs\v3\index.php(6): MongoClient-&amp;gt;__construct(&amp;#8216;mongodb://tante&amp;#8230;&amp;#8217;) #1 {main} thrown in &lt;strong&gt;D:\xampp\htdocs\v3\index.php&lt;/strong&gt; on line &lt;strong&gt;6&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python连接MongoDB数据库示例（带用户名密码）</title>
      <link>http://tanteng.me/2015/07/pymongo-cllient/</link>
      <pubDate>Tue, 07 Jul 2015 10:39:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/pymongo-cllient/</guid>
      <description>Python使用pymongo操作MongoDB数据库，首先需要安装pymongo模块，如下示例是通过pymongo连接MongoDB数据库</description>
    </item>
    
    <item>
      <title>jQuery inArray不存在返回-1</title>
      <link>http://tanteng.me/2015/07/jquery-inarray/</link>
      <pubDate>Mon, 06 Jul 2015 02:33:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/jquery-inarray/</guid>
      <description>判断上传的文件名扩展名是否符合要求，同时禁用提交按钮，这里用到了jQuery的inArray函数，判断是否在js数组中，不存在返回-1. //</description>
    </item>
    
    <item>
      <title>Python彩蛋import this</title>
      <link>http://tanteng.me/2015/07/python-import-this/</link>
      <pubDate>Sun, 05 Jul 2015 11:57:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-import-this/</guid>
      <description>&lt;p&gt;Python有个彩蛋，比如在交互模式下输入import this，便会看到如下语句，这是Python的一些思想哲学以及Python的理念。&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-8363 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/07/python_import_this.jpg&#34; alt=&#34;python彩蛋&#34; width=&#34;684&#34; height=&#34;440&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/07/python_import_this.jpg 684w, https://blog.tanteng.me/wp-content/uploads/2015/07/python_import_this-300x193.jpg 300w&#34; sizes=&#34;(max-width: 684px) 100vw, 684px&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用array_map()和array_reduce()替代foreach循环</title>
      <link>http://tanteng.me/2015/07/array-map-reduce-foreach/</link>
      <pubDate>Fri, 03 Jul 2015 08:26:56 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/array-map-reduce-foreach/</guid>
      <description>&lt;p&gt;有时候不一定非得使用foreach，有更好的PHP内置数组函数处理数组，如使用array_map()和array_reduce()替代foreach循环。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解PHP array_reduce函数</title>
      <link>http://tanteng.me/2015/07/php-array-reduce/</link>
      <pubDate>Fri, 03 Jul 2015 03:28:26 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/php-array-reduce/</guid>
      <description>&lt;p&gt;PHP的array_reduce函数作用是（官方定义）：array_reduce() 将回调函数 function 迭代地作用到 input 数组中的每一个单元中，从而将数组简化为单一的值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ThinkPHP扩展MongoDB Model支持getGridFS存取文件</title>
      <link>http://tanteng.me/2015/06/thinkphp-mongodb-getgridfs/</link>
      <pubDate>Fri, 19 Jun 2015 09:44:09 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/thinkphp-mongodb-getgridfs/</guid>
      <description>&lt;p&gt;ThinkPHP自带MongoDB Model，Model继承MongoDBModel可以操作MongoDB数据库，但只能操作基本的一些MongoDB操作，无法操作getGridFS存取文件，需要扩展Driver/Db/DbMongo.class.php文件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP操作GridFS存储文件到MongoDB的三种方式</title>
      <link>http://tanteng.me/2015/06/php-mongodb-gridfs/</link>
      <pubDate>Thu, 18 Jun 2015 08:47:59 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/php-mongodb-gridfs/</guid>
      <description>一般情况采取第一种方法，直接传文件，第二种方法适合生成的数据不用保存到本地再上传而是直接以二进制存到MongoDB，第三种方式是直接把表单上</description>
    </item>
    
    <item>
      <title>MongoDB GridFS存取文件PHP示例</title>
      <link>http://tanteng.me/2015/06/mongodb-gridfs-php/</link>
      <pubDate>Thu, 18 Jun 2015 03:20:51 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/mongodb-gridfs-php/</guid>
      <description>&lt;p&gt;最近项目需要用到MongoDB存取文件，这里有个简单的PHP示例：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;public function run(){
    //初始化gridfs
    $m = new MongoClient(); // 连接
    $db = $m-&amp;gt;selectDB(&amp;ldquo;excel&amp;rdquo;);
    //dump($m);exit;
    //$collection = $db-&amp;gt;testexcel;
    $grid = $db-&amp;gt;getGridFS(); //取得gridfs对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//gridfs有三种方式存储文件
//第一种直接存储文件
$id = $grid-&amp;amp;gt;storeFile(dirname(__FILE__).&amp;quot;/EmptyAction.class.php&amp;quot;);
echo $id;

//获取文件
$file = $grid-&amp;amp;gt;findOne(array(&#39;_id&#39;=&amp;amp;gt;$id)); //以_id为索引取得文件 
//header(&#39;Content-type: image/png&#39;); //输出图片头 
dump($file);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>window.location.assign和window.location.href区别</title>
      <link>http://tanteng.me/2015/06/window-location-assign-href/</link>
      <pubDate>Fri, 12 Jun 2015 06:14:30 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/window-location-assign-href/</guid>
      <description>&lt;p&gt;window.location.assign(url) 和 window.location.href=url 实现功能是一样的，都是跳转到网址，只是用法稍微不同。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:js decode:true &#34;&gt;window.location.assign(url);
window.location = url;
window.location.href = url;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;最大的不同是，assign 会添加记录到浏览历史，点击后退可以返回之前页面。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sublime插件推荐（PHP,html,js）</title>
      <link>http://tanteng.me/2015/06/sublime-php-html-js/</link>
      <pubDate>Fri, 12 Jun 2015 03:47:31 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/sublime-php-html-js/</guid>
      <description>这是几款针对PHP,html,js的sublime插件，推荐使用。 DocBlockr 代码注释自动生成 Go To Definition 代码引用位置 PHPcs 语法检查 jQuery jQuery自动提示 PHPdoc 也是</description>
    </item>
    
    <item>
      <title>MySQL zerofill是什么意思？</title>
      <link>http://tanteng.me/2015/06/mysql-zerofill/</link>
      <pubDate>Thu, 11 Jun 2015 08:39:41 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/mysql-zerofill/</guid>
      <description>zerofill，字面上理解就是填充0.在MySQL列中使用zerofill，如插入int(4)，你插入1，显示0001，你插入55555，</description>
    </item>
    
    <item>
      <title>将left join拆分成多条sql语句</title>
      <link>http://tanteng.me/2015/06/left-join-split-sql/</link>
      <pubDate>Tue, 09 Jun 2015 16:29:05 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/left-join-split-sql/</guid>
      <description>&lt;p&gt;本文讲解如何把一条带有一个或多个left join或right join的sql语句拆分成多条sql语句。MySQL进行连表查询效率是很低的，特别是数据很大，而且并发量很高的情况，索引都无法解决问题，最好的办法就是把sql语句拆分成多条单表查询的sql。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入理解Yii2</title>
      <link>http://tanteng.me/2015/06/yii2-digpage/</link>
      <pubDate>Fri, 05 Jun 2015 15:54:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/yii2-digpage/</guid>
      <description>推荐一个网站： http://www.digpage.com/index.html</description>
    </item>
    
    <item>
      <title>array_unshift,array_shift及array_pop,array_push的定义</title>
      <link>http://tanteng.me/2015/06/array-unshift-shift-pop-push/</link>
      <pubDate>Thu, 04 Jun 2015 15:48:22 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/array-unshift-shift-pop-push/</guid>
      <description>array_unshift,array_shift,array_pop,array_push这几个函数容易混淆，其实概念很简单，定义如下： a</description>
    </item>
    
    <item>
      <title>WordPress标签云和列表移除指定ID不显示</title>
      <link>http://tanteng.me/2015/06/cat-tag-exclude/</link>
      <pubDate>Thu, 04 Jun 2015 05:04:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/cat-tag-exclude/</guid>
      <description>&lt;p&gt;WordPress的标签页和列表挂件，如果想把某些标签或列表不予显示，可以使用如下两个钩子方法实现，具体代码如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;//移除部分标签不在标签云显示
function remove_tags($args){
    $new_args = array(
            &amp;lsquo;exclude&amp;rsquo; =&amp;gt; &amp;lsquo;30,40,128,131,83&amp;rsquo;,
        );
    return array_merge($args,$new_args);
}
add_filter( &amp;lsquo;widget_tag_cloud_args&amp;rsquo;, &amp;lsquo;remove_tags&amp;rsquo; );&lt;/p&gt;

&lt;p&gt;//移除部分标签不在列表widget显示
function exclude_widget_categories($args){
    $exclude = &amp;ldquo;4,6,12,88,172&amp;rdquo;; // The IDs of the excluding categories
    $args[&amp;ldquo;exclude&amp;rdquo;] = $exclude;
    return $args;
}
add_filter(&amp;ldquo;widget_categories_args&amp;rdquo;,&amp;ldquo;exclude_widget_categories&amp;rdquo;);&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PC站和移动站适配三种方式</title>
      <link>http://tanteng.me/2015/06/pc-mobile-adapter/</link>
      <pubDate>Thu, 04 Jun 2015 04:00:28 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/pc-mobile-adapter/</guid>
      <description>&lt;h3 id=&#34;pc站和移动站适配三种方式&#34;&gt;PC站和移动站适配三种方式&lt;/h3&gt;

&lt;p&gt;目前较流量的PC站与移动站配置方式有三种，百度站在搜索引擎角度将这三种分别称为跳转适配、代码适配和自适应，以下为这三种配置方式的名词解释及异同对比。&lt;/p&gt;

&lt;p&gt;1，&lt;strong&gt;跳转适配&lt;/strong&gt;：该方法会利用单独的网址向每种设备提供不同的代码。这种配置会尝试检测用户所使用的设备或&lt;span lang=&#34;EN-US&#34;&gt;ua&lt;/span&gt;，然后使用 &lt;span lang=&#34;EN-US&#34;&gt;HTTP &lt;/span&gt;重定向和 &lt;span lang=&#34;EN-US&#34;&gt;Vary HTTP &lt;/span&gt;标头重定向到相应的页面。&lt;/p&gt;

&lt;p&gt;2，&lt;strong&gt;代码适配&lt;/strong&gt;：该方法使用相同的网址（不考虑用户所使用的设备），但会根据服务器对用户所用浏览器的了解（&lt;span lang=&#34;EN-US&#34;&gt;ua&lt;/span&gt;），针对不同设备类型生成不同版本的 &lt;span lang=&#34;EN-US&#34;&gt;HTML&lt;/span&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP匿名函数</title>
      <link>http://tanteng.me/2015/06/php-anonymous-function/</link>
      <pubDate>Mon, 01 Jun 2015 09:00:12 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/06/php-anonymous-function/</guid>
      <description>&lt;p&gt;PHP5.3以来也出现了很多新的特性：&lt;/p&gt;

&lt;p&gt;PHP5.2 以前：autoload, PDO 和 MySQLi, 类型约束&lt;/p&gt;

&lt;p&gt;PHP5.2：JSON 支持&lt;/p&gt;

&lt;p&gt;PHP5.3：弃用的功能，匿名函数，新增魔术方法，命名空间，后期静态绑定，Heredoc 和 Nowdoc, const, 三元运算符，Phar&lt;/p&gt;

&lt;p&gt;PHP5.4：Short Open Tag, 数组简写形式，Traits, 内置 Web 服务器，细节修改&lt;/p&gt;

&lt;p&gt;PHP5.5：yield, list() 用于 foreach, 细节修改&lt;/p&gt;

&lt;p&gt;PHP5.6: 常量增强，可变函数参数，命名空间增强&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>修改bash_profile文件切换Mac默认PHP版本为MAMP</title>
      <link>http://tanteng.me/2015/05/bash_profile-mac-php/</link>
      <pubDate>Sat, 30 May 2015 15:42:46 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/bash_profile-mac-php/</guid>
      <description>&lt;p&gt;Mac自带了PHP开发环境，但是很多开发者装了MAMP集成环境，打开终端输入：which php，会显示/usr/bin/php，是系统自带的PHP版本，要切换默认的PHP版本为MAMP下的PHP，需要修改系统bash_profile并执行这个shell脚本。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS闭包的两个例子</title>
      <link>http://tanteng.me/2015/05/js-closure-example/</link>
      <pubDate>Wed, 27 May 2015 13:48:26 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/js-closure-example/</guid>
      <description>&lt;p&gt;之前一篇文章&lt;a href=&#34;https://blog.tanteng.me/2015/05/js-closure/&#34; target=&#34;_blank&#34;&gt;详解js闭包&lt;/a&gt;讲了什么是JS闭包，以及JS闭包的优缺点，本文再看两个JS闭包的例子，进一步理解JS闭包的作用域和特性。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:js decode:true &#34;&gt;var foo = ( function() {
    var secret = &amp;lsquo;secret&amp;rsquo;;
    // “闭包”内的函数可以访问 secret 变量，而 secret 变量对于外部却是隐藏的
    return {
        get_secret: function () {
            // 通过定义的接口来访问 secret
            return secret;
        },
        new_secret: function ( new_secret ) {
            // 通过定义的接口来修改 secret
            secret = new_secret;
        }
    };
} () );&lt;/p&gt;

&lt;p&gt;foo.get_secret (); // 得到 &amp;lsquo;secret&amp;rsquo;
foo.secret; // Type error，访问不能
foo.new_secret (&amp;lsquo;a new secret&amp;rsquo;); // 通过函数接口，我们访问并修改了 secret 变量
foo.get_secret (); // 得到 &amp;lsquo;a new secret&amp;rsquo;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>初识PHP Static延迟静态绑定</title>
      <link>http://tanteng.me/2015/05/php-static-bind/</link>
      <pubDate>Wed, 27 May 2015 03:38:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/php-static-bind/</guid>
      <description>&lt;p&gt;PHP5.3以后引入了延迟静态绑定static，它是为了解决什么问题呢？php的继承模型中有一个存在已久的问题，那就是在父类中引用扩展类的最终状态比较困难。来看一个例子。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class A&lt;br /&gt;
{&lt;br /&gt;
    public static function echoClass(){&lt;br /&gt;
        echo &lt;strong&gt;CLASS&lt;/strong&gt;;&lt;br /&gt;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static function test(){  
    self::echoClass();        
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;class B extends A&lt;br /&gt;
{&lt;br /&gt;
    public static function echoClass()&lt;br /&gt;
    {&lt;br /&gt;
         echo &lt;strong&gt;CLASS&lt;/strong&gt;;&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;B::test(); //输出A&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>详解js闭包</title>
      <link>http://tanteng.me/2015/05/js-closure/</link>
      <pubDate>Tue, 26 May 2015 10:23:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/js-closure/</guid>
      <description>详解js闭包： http://segmentfault.com/a/1190000000652891</description>
    </item>
    
    <item>
      <title>你知道一副牌中有多少种牛牛的情况吗？？</title>
      <link>http://tanteng.me/2015/05/niuniu/</link>
      <pubDate>Tue, 26 May 2015 08:25:25 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/niuniu/</guid>
      <description>&lt;p&gt;前段时间开始学习一门编程语言Python，想到玩的一种牌类游戏，叫牛牛，以前我不会玩，也是最近学会的，然后就想到写个程序列举出一副牌中所有牛牛的牌型，觉得很有意思，于是就动手写。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 开发者该知道的 5 个 Composer 小技巧</title>
      <link>http://tanteng.me/2015/05/php-composer/</link>
      <pubDate>Tue, 26 May 2015 03:49:35 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/php-composer/</guid>
      <description>Composer是新一代的PHP依赖管理工具。其介绍和基本用法可以看这篇《Composer PHP依赖管理的新时代》。本文介绍使用Compos</description>
    </item>
    
    <item>
      <title>REST模式GET，POST，PUT，DELETE</title>
      <link>http://tanteng.me/2015/05/rest-get-post-put-delete/</link>
      <pubDate>Sat, 23 May 2015 15:35:02 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/rest-get-post-put-delete/</guid>
      <description>&lt;p&gt;HTTP常见的请求方式我们熟知的有GET和POST，这两个很好理解，但是在Rest中跟我们平常的理解又有所不同，本文重点介绍一下Rest模式这几种方式的概念，以及它们的使用场景。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DIRECTORY_SEPARATOR 和 PATH_SEPARATOR的区别</title>
      <link>http://tanteng.me/2015/05/directory-path-separator/</link>
      <pubDate>Thu, 21 May 2015 10:25:40 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/directory-path-separator/</guid>
      <description>&lt;p&gt;DIRECTORY_SEPARATOR：目录分隔符，linux上就是&amp;#8217;/&amp;#8217;,windows上是&amp;#8217;&amp;amp;#8217;.&lt;/p&gt;

&lt;p&gt;PATH_SEPARATOR：路径分隔符，include多个路径使用，在win下，当你要include多个路径的话，你要用&amp;#8221;;&amp;#8221;隔开，但在linux下就使用&amp;#8221;:&amp;#8221;隔开的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于 utf8mb4，它和 utf8 有什么区别</title>
      <link>http://tanteng.me/2015/05/utf8mb4/</link>
      <pubDate>Wed, 20 May 2015 15:16:47 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/utf8mb4/</guid>
      <description>&lt;p&gt;最近经常看到一个没见过的编码格式叫utf8mb4，总是和emoj表情联系在一起，什么是utf8mb4，它和utf8有什么区别呢？&lt;/p&gt;

&lt;p&gt;utf8mb4是一种可支持4个字节UTF编码，一个字符最多能有4字节，所以能支持更多的字符集。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>left join多张表查出重复数据的解决办法</title>
      <link>http://tanteng.me/2015/05/left-join-duplication/</link>
      <pubDate>Tue, 19 May 2015 08:53:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/left-join-duplication/</guid>
      <description>&lt;p&gt;今天线上出现一个问题，查询售后订单出现很多重复的内容，经查，是left join多张表导致的查询出重复数据。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>js防止按钮重复提交</title>
      <link>http://tanteng.me/2015/05/js-lock/</link>
      <pubDate>Tue, 19 May 2015 03:29:30 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/js-lock/</guid>
      <description>&lt;p&gt;js控制按钮防止ajax重复提交数据，按钮不是button，是a标签。&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:js decode:true&#34;&gt;if($(&amp;ldquo;body&amp;rdquo;).data(&amp;ldquo;applycancel&amp;rdquo;)==&amp;ldquo;lock&amp;rdquo;){
  return false;
}else{
    $(&amp;ldquo;body&amp;rdquo;).data(&amp;ldquo;applycancel&amp;rdquo;,&amp;ldquo;lock&amp;rdquo;);
}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何高效使用Django QuerySets</title>
      <link>http://tanteng.me/2015/05/django-querysets/</link>
      <pubDate>Fri, 15 May 2015 16:07:40 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/django-querysets/</guid>
      <description>这是一篇很好的文章，讲如何高效使用Django QuerySets，有很多例子： http://www.oschina.net/translate/django-querysets</description>
    </item>
    
    <item>
      <title>Python斐波拉契数列生成器</title>
      <link>http://tanteng.me/2015/05/python-fib-generator/</link>
      <pubDate>Wed, 13 May 2015 08:08:58 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-fib-generator/</guid>
      <description>&lt;p&gt;利用Python生成器定义斐波拉契数列generator：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true&#34;&gt;def fib(max):
    n, a, b = 0, 0, 1
    while n &amp;lt; max:
        yield b
        a, b = b, a + b
        n = n + 1&lt;/p&gt;

&lt;p&gt;for i in fib(30):
    print(i)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 3使用Mysql几种方式</title>
      <link>http://tanteng.me/2015/05/python3-mysql/</link>
      <pubDate>Tue, 12 May 2015 13:46:01 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python3-mysql/</guid>
      <description>&lt;p&gt;There are currently a few options for using Python 3 with mysql:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pypi.python.org/pypi/mysql-connector-python&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://pypi.python.org/pypi/mysql-connector-python&#34;&gt;https://pypi.python.org/pypi/mysql-connector-python&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Officially supported by Oracle&lt;/li&gt;
&lt;li&gt;Pure python&lt;/li&gt;
&lt;li&gt;A little slow&lt;/li&gt;
&lt;li&gt;Not compatible with MySQLdb&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Python使用tablib生成excel文件简单示例</title>
      <link>http://tanteng.me/2015/05/python-tablib-excel/</link>
      <pubDate>Tue, 12 May 2015 08:45:33 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-tablib-excel/</guid>
      <description>&lt;p&gt;&lt;code class=&#34;lang:python decode:true&#34;&gt;import tablib
headers = (&amp;lsquo;lie1&amp;rsquo;, &amp;lsquo;lie2&amp;rsquo;, &amp;lsquo;lie3&amp;rsquo;, &amp;lsquo;lie4&amp;rsquo;, &amp;lsquo;lie5&amp;rsquo;)
mylist = [(&amp;lsquo;23&amp;rsquo;,&amp;lsquo;23&amp;rsquo;,&amp;lsquo;34&amp;rsquo;,&amp;lsquo;23&amp;rsquo;,&amp;lsquo;34&amp;rsquo;),(&amp;lsquo;sadf&amp;rsquo;,&amp;lsquo;23&amp;rsquo;,&amp;lsquo;sdf&amp;rsquo;,&amp;lsquo;23&amp;rsquo;,&amp;lsquo;fsad&amp;rsquo;)]
mylist = tablib.Dataset(*mylist, headers=headers)
with open(&amp;lsquo;excel.xlsx&amp;rsquo;, &amp;lsquo;wb&amp;rsquo;) as f:
    f.write(mylist.xlsx)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这是一个基本的最简单的使用tablib生成excel文件的示例，首先要安装tablib模块，在命令行输入:pip intall tablib，即可自动下载安装。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>from urllib import request和import urlib.request的区别</title>
      <link>http://tanteng.me/2015/05/python-from-import/</link>
      <pubDate>Tue, 12 May 2015 07:41:07 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-from-import/</guid>
      <description>&lt;p&gt;Python中from urllib import request和import urlib.request的区别：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true &#34;&gt;from urllib import request&lt;/p&gt;

&lt;h1 id=&#34;access-request-directly&#34;&gt;access request directly.&lt;/h1&gt;

&lt;p&gt;mine = request()&lt;/p&gt;

&lt;p&gt;import urllib.request&lt;/p&gt;

&lt;h1 id=&#34;used-as-urllib-request&#34;&gt;used as urllib.request&lt;/h1&gt;

&lt;p&gt;mine = urllib.request()&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bs4(beautiful soup 4)简单抓取示例</title>
      <link>http://tanteng.me/2015/05/bs4-example/</link>
      <pubDate>Tue, 12 May 2015 03:50:01 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/bs4-example/</guid>
      <description>&lt;p&gt;参照bs4官方中文文档&lt;a href=&#34;http://beautifulsoup.readthedocs.org/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;http://beautifulsoup.readthedocs.org/en/latest/&#34;&gt;http://beautifulsoup.readthedocs.org/en/latest/&lt;/a&gt;&lt;/a&gt;照着写了个简单的例子，感觉它非常强大！！&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true &#34;&gt;import urllib.request
from bs4 import BeautifulSoup
import sys&lt;/p&gt;

&lt;p&gt;url = &amp;lsquo;&lt;a href=&#34;https://blog.tanteng.me&#39;&#34;&gt;https://blog.tanteng.me&#39;&lt;/a&gt;
html = urllib.request.urlopen(url).read()&lt;/p&gt;

&lt;p&gt;soup = BeautifulSoup(html)
h1s = soup.find&lt;em&gt;all(&amp;lsquo;h1&amp;rsquo;,class&lt;/em&gt;=&amp;lsquo;entry-title&amp;rsquo;)&lt;/p&gt;

&lt;p&gt;&amp;rdquo;&amp;lsquo;打印所有H1标题和链接&amp;rdquo;&amp;rsquo;
for h1 in h1s:
    #print(h1)
    print(h1.get_text())
    print(h1.a.attrs[&amp;lsquo;href&amp;rsquo;])&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>beautiful soul 4 for Python3中文文档</title>
      <link>http://tanteng.me/2015/05/beautiful-soul-4-for-python3/</link>
      <pubDate>Mon, 11 May 2015 13:29:48 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/beautiful-soul-4-for-python3/</guid>
      <description>beautiful soul 4 for Python3中文文档： http://beautifulsoup.readthedocs.org/en/latest/#</description>
    </item>
    
    <item>
      <title>Python文件名不能和已有模块名重名</title>
      <link>http://tanteng.me/2015/05/python-filename/</link>
      <pubDate>Mon, 11 May 2015 09:14:32 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-filename/</guid>
      <description>今天学习Python正则表达式，用到了re模块，新建了一个“re.py”文件写几行代码，但就是通不过编译，提示错误：&amp;#8217;modul</description>
    </item>
    
    <item>
      <title>Python3 requests包抓取并保存网页源码</title>
      <link>http://tanteng.me/2015/05/requests-html/</link>
      <pubDate>Mon, 11 May 2015 05:44:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/requests-html/</guid>
      <description>&lt;p&gt;使用Python 3的requests模块抓取网页源码并保存到文件示例：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python mark:3-4 decode:true&#34;&gt;import requests
html = requests.get(&amp;ldquo;&lt;a href=&#34;http://www.baidu.com&amp;quot;&#34;&gt;http://www.baidu.com&amp;quot;&lt;/a&gt;)
with open(&amp;lsquo;test.txt&amp;rsquo;,&amp;lsquo;w&amp;rsquo;,encoding=&amp;lsquo;utf-8&amp;rsquo;) as f:
    f.write(html.text)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python作用域代码演示</title>
      <link>http://tanteng.me/2015/05/python-scope/</link>
      <pubDate>Sun, 10 May 2015 04:24:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-scope/</guid>
      <description>&lt;p&gt;每一个编程语言都有变量的作用域的概念，Python也不例外，以下是Python作用域的代码演示：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:python decode:true &#34;&gt;def scope_test():
    def do_local():
        spam = &amp;ldquo;local spam&amp;rdquo;
    def do_nonlocal():
        nonlocal spam
        spam = &amp;ldquo;nonlocal spam&amp;rdquo;
    def do_global():
        global spam
        spam = &amp;ldquo;global spam&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spam = &amp;quot;test spam&amp;quot;
do_local()
print(&amp;quot;After local assignment:&amp;quot;, spam)
do_nonlocal()
print(&amp;quot;After nonlocal assignment:&amp;quot;, spam)
do_global()
print(&amp;quot;After global assignment:&amp;quot;, spam)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;scope_test()
print(&amp;ldquo;In global scope:&amp;ldquo;, spam)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用pip安装Django for Python3</title>
      <link>http://tanteng.me/2015/05/django-python3-install/</link>
      <pubDate>Sat, 09 May 2015 07:25:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/django-python3-install/</guid>
      <description>&lt;p&gt;Django官网介绍说，推荐使用Python 3，对应的Django版本是1.8.1，使用pip install Django==1.8.1通过Python命令行下载并安装。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python字典get方法小例子</title>
      <link>http://tanteng.me/2015/05/python-dict-get/</link>
      <pubDate>Fri, 08 May 2015 15:34:06 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-dict-get/</guid>
      <description>&lt;p&gt;Python定义一个字典：dict = {&amp;#8216;iphone&amp;#8217;:&amp;#8217;apple&amp;#8217;,&amp;#8217;xiaomi&amp;#8217;,&amp;#8217;xiaomi&amp;#8217;,&amp;#8217;huawei&amp;#8217;:&amp;#8217;hua&amp;#8217;}，那么我要查找键名为xiaomi对应的值，如果我们知道存在这个键，直接dict[&amp;#8216;xiaomi&amp;#8217;]就好了，但是要判断有没有这个键存在怎么办呢？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py2.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-8013&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py2.png&#34; alt=&#34;py2&#34; width=&#34;440&#34; height=&#34;272&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py2.png 440w, https://blog.tanteng.me/wp-content/uploads/2015/05/py2-300x185.png 300w&#34; sizes=&#34;(max-width: 440px) 100vw, 440px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python减少循环层次和缩进技巧</title>
      <link>http://tanteng.me/2015/05/python-for-level/</link>
      <pubDate>Fri, 08 May 2015 15:16:27 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-for-level/</guid>
      <description>&lt;p&gt;我们知道Python中冒号和缩进代表大括号，这样写已经可以节省很多代码行数，但是可以更优化，尽可能减少循环的层次和缩进，让代码看起来更简洁，逻辑更清楚。不仅Python语言如此，其他语言也一样。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py1.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-8008&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py1.png&#34; alt=&#34;py1&#34; width=&#34;440&#34; height=&#34;275&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py1.png 440w, https://blog.tanteng.me/wp-content/uploads/2015/05/py1-300x188.png 300w&#34; sizes=&#34;(max-width: 440px) 100vw, 440px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python中requirements.pip文件的作用</title>
      <link>http://tanteng.me/2015/05/python-requirements-pip/</link>
      <pubDate>Fri, 08 May 2015 03:17:35 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-requirements-pip/</guid>
      <description>&lt;p&gt;在很多Python项目中都包含一个requirements.pip文件，里面写的是一些包的名称和版本之类的信息，这是做什么用的呢？&lt;/p&gt;

&lt;p&gt;比如一个requirements.pip文件内容如下：&lt;/p&gt;

&lt;p&gt;html5lib==0.999&lt;/p&gt;

&lt;p&gt;ipdb==0.8&lt;/p&gt;

&lt;p&gt;ipython==2.3.1&lt;/p&gt;

&lt;p&gt;mongo==0.2.0&lt;/p&gt;

&lt;p&gt;path.py==7.0&lt;/p&gt;

&lt;p&gt;python-dateutil==2.3&lt;/p&gt;

&lt;p&gt;requests==2.5.0&lt;/p&gt;

&lt;p&gt;unicodecsv==0.9.4&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python中__name__的含义</title>
      <link>http://tanteng.me/2015/05/python-name/</link>
      <pubDate>Fri, 08 May 2015 02:47:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-name/</guid>
      <description>&lt;p&gt;学习python中会发现很多python脚本都会有一句话：if __name__ == &amp;#8216;__main__&amp;#8217;。这有点像C，java中的主函数。那么Python中__name__具有什么含义呢？网上很多说法和教程，但是百闻不如一见，要自己动手去发现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在SAE上部署django</title>
      <link>http://tanteng.me/2015/05/sae-django/</link>
      <pubDate>Tue, 05 May 2015 13:26:26 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/sae-django/</guid>
      <description>&lt;p&gt;新浪SAE免费了，每月5G流量用不完，用来折腾一下Python，SAE支持PHP、Java、Python三大语言，SAE上的Python环境提供了django WEB开发框架，看看如何在SAE上部署django吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python中文基础教程</title>
      <link>http://tanteng.me/2015/05/python-guide-chinese/</link>
      <pubDate>Tue, 05 May 2015 06:13:07 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-guide-chinese/</guid>
      <description>python中文基础教程： http://www.pythondoc.com/pythontutorial3/index.html</description>
    </item>
    
    <item>
      <title>Redis如何存取PHP多维数组</title>
      <link>http://tanteng.me/2015/04/redis-php-array/</link>
      <pubDate>Tue, 21 Apr 2015 03:09:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/04/redis-php-array/</guid>
      <description>&lt;p&gt;Redis本身不支持存取PHP数组的数据结构，但是如何存取PHP的数组呢？可以把数组序列化，以字符串的形式缓存到Redis中。&lt;/p&gt;

&lt;p&gt;其实很多框架或封装好的Redis类中，都做好了自动转化，直接存数据就可以了。如代码：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;public function testSavePHPArray() {
    $array = [&amp;lsquo;array1&amp;rsquo;,&amp;lsquo;array2&amp;rsquo;,[&amp;lsquo;array3key&amp;rsquo;=&amp;gt;&amp;lsquo;array3value&amp;rsquo;]];
    $redis = RedisHandle::getInstance();
    $redis-&amp;gt;set(&amp;lsquo;save_php_array_test&amp;rsquo;,$array);
}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery最佳实践</title>
      <link>http://tanteng.me/2015/04/jquery-best-practice/</link>
      <pubDate>Thu, 16 Apr 2015 15:41:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/04/jquery-best-practice/</guid>
      <description>jQuery最佳实践 本文介绍了jQuery的不同写法的效率，开发中可以借鉴这些经验，提高前端运行性能。 阮一峰博客：http://www.ru</description>
    </item>
    
    <item>
      <title>在mac终端中如何切换到Python3</title>
      <link>http://tanteng.me/2015/04/terminal-python3/</link>
      <pubDate>Sun, 12 Apr 2015 07:05:09 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/04/terminal-python3/</guid>
      <description>&lt;p&gt;在Mac中自带了Python 2.7的版本，因此在终端中输入&amp;#8221;python&amp;#8221;命令默认进入了Python2.7的环境，那么如何在mac终端中如何切换到Python3呢？&lt;/p&gt;

&lt;p&gt;首先你得去Python官网下载mac版的Python 3.4并安装。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery用eval解析json字符串</title>
      <link>http://tanteng.me/2015/04/jquery-eval-json/</link>
      <pubDate>Sat, 11 Apr 2015 08:58:38 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/04/jquery-eval-json/</guid>
      <description>&lt;p&gt;这里以jquery异步获取的数据类型——json对象和字符串为依据，分别介绍两种方式获取到的结果处理方式。&lt;/p&gt;

&lt;p&gt;1.对于服务器返回的JSON字符串，如果jquery异步请求没做类型说明，或者以字符串方式接受，那么需要做一次对象化处理，方式不是太麻烦，就是将该字符串放于eval()中执行一次。这种方式也适合以普通javascipt方式获取json对象，以下举例说明：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:js decode:true&#34;&gt;var dataObj=eval(&amp;ldquo;(&amp;rdquo;+data+&amp;ldquo;)&amp;rdquo;);//转换为json对象
alert(dataObj.root.length);//输出root的子对象数量
$.each(dataObj.root,fucntion(idx,item){
if(idx==0){
return true;
}&lt;/p&gt;

&lt;p&gt;//输出每个root子对象的名称和值
alert(&amp;ldquo;name:&amp;ldquo;+item.name+&amp;rdquo;,value:&amp;ldquo;+item.value);
})&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>什么时候使用mysql事务？</title>
      <link>http://tanteng.me/2015/04/mysql-commit/</link>
      <pubDate>Tue, 07 Apr 2015 15:25:18 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/04/mysql-commit/</guid>
      <description>&lt;p&gt;突然想到一个问题，mysql中我们经常用到事务，比如一次向几张表插入内容，如果中间出错了可以回滚，但是实际开发中，像这种一次可能向多个数据表写入数据的情况，并没有采用事务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>js中Null，undefined，””，0，false的区别</title>
      <link>http://tanteng.me/2015/04/js-null-undefined/</link>
      <pubDate>Thu, 02 Apr 2015 15:58:08 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/04/js-null-undefined/</guid>
      <description>&lt;p&gt;1、undefined、null、&amp;#8221;&amp;#8221;、0、false这五个值在if语句中做判断，都会执行false分支&lt;/p&gt;

&lt;p&gt;2、undefined和null比较特殊，虽然null的类型是object，但是null不具有任何对象的特性，就是说我们并不能执行null.toString()、null.constructor等对象实例的默认调用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jquery性能优化技巧</title>
      <link>http://tanteng.me/2015/04/jquery-performance/</link>
      <pubDate>Thu, 02 Apr 2015 14:44:21 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/04/jquery-performance/</guid>
      <description>&lt;p&gt;jquery是在客户端执行，相对于网站后端开发语言来说，往往不强调js，jquery性能优化的概念，但是在页面非常复杂，各种js，ajax请求多的情况下，优化jquery的性能可以大大提高用户体验，加快页面的响应速度，还是非常有必要的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jsonp解决ajax跨域代码示例</title>
      <link>http://tanteng.me/2015/04/jsonp-ajax/</link>
      <pubDate>Wed, 01 Apr 2015 15:12:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/04/jsonp-ajax/</guid>
      <description>&lt;p&gt;有两个子域名，a.xx.com和b.xx.com，现在我在a.xx.com一个页面中发送ajax请求b.xx.com一个控制器中的方法，希望得到返回数据，但是返回状态302，应该是跨域问题没有解决。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>js闭包之作用域链</title>
      <link>http://tanteng.me/2015/03/js-bibao/</link>
      <pubDate>Mon, 30 Mar 2015 16:00:03 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/03/js-bibao/</guid>
      <description>在理解闭包以前.最好能先理解一下作用域链的含义,简单来说,作用域链就是函数在定义的时候创建的,用于寻找使用到的变量的值的一个索引,而他内部的</description>
    </item>
    
    <item>
      <title>sequel导入sql文件的时候提示错误</title>
      <link>http://tanteng.me/2015/03/sequel-import/</link>
      <pubDate>Sat, 21 Mar 2015 10:50:22 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/03/sequel-import/</guid>
      <description>&lt;p&gt;sequel 导入 sql 文件的时候提示错误：An error occurred when reading the file, as it could not be read in the encoding you selected utf8.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MAMP如何修改mysql密码</title>
      <link>http://tanteng.me/2015/03/mamp-mysql-pass/</link>
      <pubDate>Sat, 14 Mar 2015 16:53:01 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/03/mamp-mysql-pass/</guid>
      <description>&lt;p&gt;MAMP是OS X系统下常用的PHP集成环境，如何修改MAMP登陆mysql的密码呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mac下sublime安装package control组件命令</title>
      <link>http://tanteng.me/2015/03/mac-sublime-package-control/</link>
      <pubDate>Wed, 11 Mar 2015 14:36:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/03/mac-sublime-package-control/</guid>
      <description>&lt;p&gt;在mac下安装sublime插件，首先要安装package control组件，需要按contro＋｀ 键调出控制台，然后输入以下针对OS X系统的命令即可。必须在联网模式下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP接口开发加密技术</title>
      <link>http://tanteng.me/2015/03/php-api-token/</link>
      <pubDate>Tue, 03 Mar 2015 11:57:13 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/03/php-api-token/</guid>
      <description>&lt;p&gt;PHP接口开发是PHP常见的技术，可以通过接口进行一些操作，可以访问接口获取数据，给app提供数据接口等，但是如果接口没有加密解密的过程，很容易发生盗用和不安全的操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>也谈PHP中$GLOBALS和global的区别</title>
      <link>http://tanteng.me/2015/01/php-globals-global-difference/</link>
      <pubDate>Sat, 31 Jan 2015 02:28:47 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/01/php-globals-global-difference/</guid>
      <description>&lt;p&gt;在PHP中经常遇到$GLOBALS和global来定义和访问全局变量，那么在什么地方该用$GLOBALS，而什么地方该用global呢？这就需要我们清除了解$GLOBALS和global的区别，我也谈谈PHP中$GLOBALS和global的不同，要真正弄懂它们的区别和共同点请仔细看这篇文章。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>char还是varchar</title>
      <link>http://tanteng.me/2015/01/char-varchar/</link>
      <pubDate>Fri, 30 Jan 2015 02:57:54 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/01/char-varchar/</guid>
      <description>&lt;p&gt;在mysql的数据库设计中，要给字段选用合适的类型，文本型的字段常见的有char，vchar，text等。比如网址一般选vchar，标题也可以vchar，姓名可以是char。那么选char还是vchar根据什么来选择呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wordpress自定义路由和url参数</title>
      <link>http://tanteng.me/2015/01/add_rewrite_tag_rule/</link>
      <pubDate>Thu, 29 Jan 2015 06:09:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/01/add_rewrite_tag_rule/</guid>
      <description>&lt;p&gt;wordpress可以使用rewrite API让url更加美观，需要用到两个相关的rewite函数，分别是add_rewrite_tag和add_rewrite_rule。下面看看具体的例子如何自定义wordpress路由规则，和自定义url参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在mysql中使用正则表达式</title>
      <link>http://tanteng.me/2015/01/mysql-regexp/</link>
      <pubDate>Thu, 29 Jan 2015 03:16:24 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/01/mysql-regexp/</guid>
      <description>&lt;p&gt;正则表达式广泛用于各种程序编程的地方，在mysql sql语句中使用正则表达式也可以解决很多查询问题，化繁为简，并且巧妙运用可以提高mysql查询效率。本文讲讲mysql中如何使用regexp语法运行含有正则表达式的sql语句。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Font Awesome图标</title>
      <link>http://tanteng.me/2015/01/f100-font-awesome/</link>
      <pubDate>Tue, 20 Jan 2015 06:08:30 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/01/f100-font-awesome/</guid>
      <description>css可以定义矢量图标，而不是传统的引用一张图片作为背景，或者用position定位的方式，这种图标叫做Font Awesome。常见的代码有</description>
    </item>
    
    <item>
      <title>CSS content属性</title>
      <link>http://tanteng.me/2015/01/css-content/</link>
      <pubDate>Tue, 20 Jan 2015 05:58:09 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/01/css-content/</guid>
      <description>&lt;p&gt;浏览网页的时候，审查元素，发现css定义了content属性，很好奇，css content属性是什么？content属性怎么用呢？比如这一段css代码：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PC版网页自动识别手机客户端并跳转</title>
      <link>http://tanteng.me/2015/01/pc-js-mobile/</link>
      <pubDate>Sun, 18 Jan 2015 15:23:15 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/01/pc-js-mobile/</guid>
      <description>&lt;p&gt;PC版网页自动识别手机客户端并跳转，用js进行判断是否手机客户端进行跳转最好，特别是静态网页，把这个过程通过js的方式放在用户客户端执行，可以大大减少服务器端额外处理的压力。但是有时需要通过在服务器端进行判断的情况除外。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>什么时候用require_once，什么时候用include</title>
      <link>http://tanteng.me/2015/01/require-once-include/</link>
      <pubDate>Fri, 16 Jan 2015 02:15:57 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/01/require-once-include/</guid>
      <description>&lt;p&gt;我们知道PHP中引入文件有几种方式，比如require_once和include，它们的区别很多文章都讲过了，那么具体在什么时候用require_once，什么时候用include呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flowplayer免费WEB视频播放器</title>
      <link>http://tanteng.me/2015/01/flowplayer-web-video/</link>
      <pubDate>Fri, 09 Jan 2015 09:33:20 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/01/flowplayer-web-video/</guid>
      <description>&lt;p&gt;Flowplayer是一款免费的WEB视频播放器，支持播放flv、swf等流媒体以及图片文件，能够非常流畅的播放视频文件，支持自定义配置和扩展。可以方便的引用，嵌入到网页中。不需要优酷等第三方视频播放。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP xml转换json</title>
      <link>http://tanteng.me/2014/12/php-xml2json/</link>
      <pubDate>Thu, 11 Dec 2014 02:46:44 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/12/php-xml2json/</guid>
      <description>&lt;p&gt;PHP xml转换json很简单，使用自带的xml类simplexml_load_file方法读取xml文件，再用json_encode函数直接把xml转换json格式。代码示例：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>extension_loaded检测扩展是否开启</title>
      <link>http://tanteng.me/2014/12/extension-loaded-json/</link>
      <pubDate>Tue, 09 Dec 2014 07:34:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/12/extension-loaded-json/</guid>
      <description>&lt;p&gt;PHP extension_loaded函数用于检测扩展有没有开启，常见的PHP扩展有curl，json，之所以用extension_loaded检测扩展是否开启，是因为兼容性的需要，开发的程序或插件在有的环境中可能没开启相应的扩展，就要判断一下是否采用其他方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTML6命名空间</title>
      <link>http://tanteng.me/2014/12/html6-namespace/</link>
      <pubDate>Mon, 08 Dec 2014 02:23:22 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/12/html6-namespace/</guid>
      <description>&lt;h3 id=&#34;html6-展望&#34;&gt;HTML6 展望&lt;/h3&gt;

&lt;p&gt;你有没有曾经希望能在 HTML 中使用自定义标签？比如：使用&lt;logo&gt;来显示你的网站logo，还有使用&lt;toolbar&gt;来显示工具栏等等。我们经常使 用&lt;div id=”container”&gt;和&lt;div id=”wrapper”&gt;来组织页面，在 HTML6 里我们希望可以直接使用象&lt;container&gt;和&lt;wrapper&gt;这样的自定义标签。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mysql关联表更新sql语句</title>
      <link>http://tanteng.me/2014/12/mysql-update-left-join/</link>
      <pubDate>Fri, 05 Dec 2014 07:35:41 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/12/mysql-update-left-join/</guid>
      <description>&lt;p&gt;比如有两张表，其中一张表某个字段的值要关联另一张表进行统计，就要用到mysql的update方法，并且left join另一张表进行联合查询。&lt;/p&gt;

&lt;p&gt;表1&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2014/12/update_left_join1.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-6747&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2014/12/update_left_join1.png&#34; alt=&#34;update left join&#34; width=&#34;599&#34; height=&#34;282&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2014/12/update_left_join1.png 599w, https://blog.tanteng.me/wp-content/uploads/2014/12/update_left_join1-300x141.png 300w, https://blog.tanteng.me/wp-content/uploads/2014/12/update_left_join1-150x70.png 150w&#34; sizes=&#34;(max-width: 599px) 100vw, 599px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wordpress插件安装数据库示例</title>
      <link>http://tanteng.me/2014/12/wp-plugin-database/</link>
      <pubDate>Wed, 03 Dec 2014 08:51:07 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/12/wp-plugin-database/</guid>
      <description>&lt;p&gt;开发wordpress插件，安装插件后自动安装插件自带的数据库，如何实现？本文讲解wordpress插件开发之安装数据库，演示激活插件自动安装数据库示例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EUC-CN是什么编码</title>
      <link>http://tanteng.me/2014/12/euc-cn/</link>
      <pubDate>Mon, 01 Dec 2014 10:21:27 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/12/euc-cn/</guid>
      <description>&lt;p&gt;PHP开发使用mb_detect_encoding函数可以检测字符串是什么编码，检测到字符串编码为EUC-CN，EUC-CN是什么编码？&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php range:1 decode:true &#34; title=&#34;mb_detect_encoding&#34;&gt;echo mb_detect_encoding($_GET[&amp;lsquo;tag&amp;rsquo;],array(&amp;ldquo;ASCII&amp;rdquo;,&amp;ldquo;UTF-8&amp;rdquo;,&amp;ldquo;GB2312&amp;rdquo;,&amp;ldquo;GBK&amp;rdquo;,&amp;ldquo;BIG5&amp;rdquo;));
exit;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;mb_detect_encoding检测编码函数用法，需要两个参数，第一个参数是要检测的字符串，第二个参数是一个数组，包含要检测的编码类型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wordpress自定义参数和重写路由规则</title>
      <link>http://tanteng.me/2014/12/wordpress-query-rewrite/</link>
      <pubDate>Mon, 01 Dec 2014 06:54:25 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/12/wordpress-query-rewrite/</guid>
      <description>&lt;p&gt;在wordpress的开发中，需要添加url自定义参数传送接收值，同时重写路由规则保证url地址的美观，要用到add_rewrite_rule函数，和init动作和query_vars过滤器。如下代码示例了添加url自定义参数和定义路由规则的方法：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34; title=&#34;wordpress自定义参数和重写路由规则&#34;&gt;function products_plugin_rules() {
   add_rewrite_rule(&amp;lsquo;products/?([^/]*)&amp;lsquo;, &amp;lsquo;index.php?pagename=products&amp;amp;product_id=$matches[1]&amp;lsquo;, &amp;lsquo;top&amp;rsquo;);
}&lt;/p&gt;

&lt;p&gt;function products_plugin_query_vars($vars) {
   $vars[] = &amp;lsquo;product_id&amp;rsquo;;
   return $vars;
}&lt;/p&gt;

&lt;p&gt;add_action(&amp;lsquo;init&amp;rsquo;, &amp;lsquo;products_plugin_rules&amp;rsquo;);
add_filter(&amp;lsquo;query_vars&amp;rsquo;, &amp;lsquo;products_plugin_query_vars&amp;rsquo;);
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP定义二维数组静态变量类型</title>
      <link>http://tanteng.me/2014/12/php-array-static/</link>
      <pubDate>Mon, 01 Dec 2014 06:18:50 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/12/php-array-static/</guid>
      <description>&lt;p&gt;PHP定义静态变量类型就是在变量前加上关键字static，如static $string=&amp;#8221;,static $array=array();但是如何给二维数组定义静态变量类型，如static $array[&amp;#8216;abc&amp;#8217;]=array()这样定义行吗？&lt;/p&gt;

&lt;p&gt;这样定义PHP二维数组静态类型是错的，比如要定义$array[&amp;#8216;abc&amp;#8217;]为静态变量，只需给$array定义成静态变量，如static $array=array().&lt;/p&gt;

&lt;p&gt;定义静态变量是针对这个变量的，一个数组就是一个变量，无论它是一位数组还是二维数组，不存在定义数组下面的元素为静态变量，只有这个变量本身是什么类型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP xss安全过滤函数</title>
      <link>http://tanteng.me/2014/12/php-xss/</link>
      <pubDate>Mon, 01 Dec 2014 02:21:53 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/12/php-xss/</guid>
      <description>PHP xss安全过滤函数 /** * xss过滤函数 * * @param $string * @return string */ function remove_xss($string) { $string = preg_replace(&amp;lsquo;/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+/S&amp;rsquo;, &amp;ldquo;, $string); $parm1 = Array(&#39;javascript&#39;, &#39;vbscript&#39;, &#39;expression&#39;, &#39;applet&#39;, &#39;meta&#39;, &#39;xml&#39;, &#39;blink&#39;, &#39;link&#39;, &#39;script&#39;, &#39;embed&#39;, &#39;object&#39;, &#39;iframe&#39;, &#39;frame&#39;, &#39;frameset&#39;, &#39;ilayer&#39;, &#39;layer&#39;, &#39;bgsound&#39;, &#39;title&#39;, &#39;base&#39;); $parm2 = Array(&#39;onabort&#39;, &#39;onactivate&#39;, &#39;onafterprint&#39;, &#39;onafterupdate&#39;, &#39;onbeforeactivate&#39;, &#39;onbeforecopy&#39;, &#39;onbeforecut&#39;, &#39;onbeforedeactivate&#39;, &#39;onbeforeeditfocus&#39;, &#39;onbeforepaste&#39;, &#39;onbeforeprint&#39;, &#39;onbeforeunload&#39;,</description>
    </item>
    
    <item>
      <title>借助Nginx搭建反向代理服务器</title>
      <link>http://tanteng.me/2014/11/nginx-reverse-proxy/</link>
      <pubDate>Sat, 29 Nov 2014 04:16:13 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/nginx-reverse-proxy/</guid>
      <description>&lt;h1 id=&#34;一-反向代理-web服务器的-经纪人&#34;&gt;一、反向代理：Web服务器的“经纪人”&lt;/h1&gt;

&lt;h2 id=&#34;1-1-反向代理初印象&#34;&gt;1.1 反向代理初印象&lt;/h2&gt;

&lt;p&gt;反向代理（Reverse Proxy）方式是指以&lt;strong&gt;代理服务器来&lt;/strong&gt;接受internet上的连接请求，然后将&lt;strong&gt;请求转发&lt;/strong&gt;给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为_&lt;strong&gt;一个服务器&lt;/strong&gt;_。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://images.cnitblog.com/i/381412/201407/182145306624536.jpg&#34; alt=&#34;lbs&#34; width=&#34;499&#34; height=&#34;331&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mysql排序order by find_in_set</title>
      <link>http://tanteng.me/2014/11/find-in-set/</link>
      <pubDate>Sat, 29 Nov 2014 02:07:59 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/find-in-set/</guid>
      <description>&lt;p&gt;mysql进行排序的时候如果需要按照原始的顺序排序，就可以使用order by find_in_set()方法，具体用法如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:mysql decode:true&#34; title=&#34;FIND_IN_SET&#34;&gt;select * from ecs_goods where goods_id in ($idList) order by FIND_IN_SET(goods_id,&amp;lsquo;$idList&amp;rsquo;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这句mysql语句用到了find_in_set进行排序，意思是根据goods_id在$idList这个变量中的前后顺序进行排序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>preg_match过滤URL非法参数</title>
      <link>http://tanteng.me/2014/11/preg_match_illegal_parameters/</link>
      <pubDate>Wed, 26 Nov 2014 04:01:40 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/preg_match_illegal_parameters/</guid>
      <description>&lt;p&gt;PHP开发中经常用到URL传递参数，对传递的参数要进行安全过滤，过滤URL中非法参数，这是php安全的一个细小的地方，却事关安全的大事。URL参数一般都是数字或者字母加上&amp;#8221;-&amp;#8220;或者&amp;#8221;_&amp;#8221;组成，参数带有其他的符号的都要进行过滤，以免带来安全问题。对URL传参进行非法字符过滤，用preg_match很容易判断非法的参数。&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;if(!preg&lt;em&gt;match(&amp;ldquo;/^[a-z0-9&lt;/em&gt;-]+$/i&amp;rdquo;,$this-&amp;gt;commentid))
    $this-&amp;gt;_show_msg(L(&amp;lsquo;illegal_parameters&amp;rsquo;));
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用css media query控制iframe高度</title>
      <link>http://tanteng.me/2014/11/css-query-iframe-height/</link>
      <pubDate>Mon, 24 Nov 2014 07:22:13 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/css-query-iframe-height/</guid>
      <description>&lt;p&gt;在这个场景下，需要使用css media query控制iframe高度：比如一个iframe视频在PC网页上的高度和手机网页上的高度不同。iframe的高度只能设置成固定高度或者所在div的百分比，我们可以通过css query控制这个div的高度，实现iframe在PC和手机上不同高度。&lt;/p&gt;

&lt;p&gt;首先，我们在没有定义CSS Media Query的样式里添加：&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;css&#34;&gt;.iframe_height{
    height: 260px;
}
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sublime必备插件for PHP</title>
      <link>http://tanteng.me/2014/11/sublime-plugin-php/</link>
      <pubDate>Sat, 22 Nov 2014 08:19:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/sublime-plugin-php/</guid>
      <description>&lt;p&gt;Sublime Text真是一款写代码的利器，轻巧快捷，而且功能强大，用来写PHP代码再好不过了，告别以前用的笨重臃肿的Zend Studio，感觉一身轻松，PHP代码也更加优雅。但是PHP开发也经常和javascript，css，html等打交道，虽然Sublime Text本身也对他们友好，但是有以下PHP开发Sublime必备插件就更好了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>str_replace和preg_relace的用法和区别</title>
      <link>http://tanteng.me/2014/11/str_preg_relace/</link>
      <pubDate>Thu, 20 Nov 2014 08:37:06 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/str_preg_relace/</guid>
      <description>&lt;p&gt;str_replace和preg_relace这两个PHP系统函数都是用来“替换”的函数，str_replace主要用于字符串替换，而preg_relace顾名思义用于正则表达式替换，他们的具体用法和区别本文将举例说明。&lt;/p&gt;

&lt;h2 id=&#34;str-replace的用法&#34;&gt;str_replace的用法&lt;/h2&gt;

&lt;h3 id=&#34;1-字符串替换&#34;&gt;1.字符串替换&lt;/h3&gt;

&lt;p&gt;比如变量$a=&amp;#8217;sina,sohu,tantengvip&amp;#8217;,我要把这个$a字符串中的sina替换成qq，那么这样用str_replace函数：&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;$a = str_replace(&amp;lsquo;sina&amp;rsquo;,&amp;lsquo;qq&amp;rsquo;,$a);
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何禁止手机百度搜索自动转码</title>
      <link>http://tanteng.me/2014/11/baidu-transform/</link>
      <pubDate>Sun, 16 Nov 2014 12:33:19 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/baidu-transform/</guid>
      <description>&lt;p&gt;很多站长朋友都知道，网站在百度手机搜索中打开的时候，百度会对网页进行自动转码，变成“优化”之后的手机版网页，但是百度网页自动转码的效果并不让人满意，再说很多网站有自己的自适应手机版的网页，或者有对应的手机版本网站，不需要百度网页自动转码。那么如何禁止手机端百度搜索自动转码呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>出站链接对SEO的作用和好处</title>
      <link>http://tanteng.me/2014/11/outbound-link-seo/</link>
      <pubDate>Fri, 14 Nov 2014 03:28:09 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/outbound-link-seo/</guid>
      <description>&lt;p&gt;出站链接对SEO的作用是什么？使用wordpress seo插件的同学应该会注意到，发布文章的时候它会检测你设置的目标关键词，并给出SEO优化的提示，经常会提示：此页没有出站链接，请考虑适当增加一些。那么出站链接对SEO有什么作用和好处？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP常量DIRECTORY_SEPARATOR用法</title>
      <link>http://tanteng.me/2014/11/directory_separator/</link>
      <pubDate>Wed, 12 Nov 2014 07:11:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/directory_separator/</guid>
      <description>PHP常量DIRECTORYSEPARATOR代表反斜杠，因为windows系统和linux系统的反斜杠不一样。在 Windows 中，斜线（/）和反斜线（</description>
    </item>
    
    <item>
      <title>PHP 的“魔术常量”:__LINE__,__FILE__等</title>
      <link>http://tanteng.me/2014/11/php-line-class-dir/</link>
      <pubDate>Wed, 12 Nov 2014 06:46:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/php-line-class-dir/</guid>
      <description>&lt;p&gt;以下是在PHP开发中经常要用到的常量，称为PHP魔术常量：&lt;/p&gt;

&lt;p&gt;__LINE__ 文件中的当前行号。&lt;/p&gt;

&lt;p&gt;__FILE__ 文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP 4.0.2 起，__FILE__ 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。&lt;/p&gt;

&lt;p&gt;__DIR__ 文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHPCMS二次开发的正确方式</title>
      <link>http://tanteng.me/2014/11/phpcms-re-develop/</link>
      <pubDate>Wed, 12 Nov 2014 03:53:25 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/11/phpcms-re-develop/</guid>
      <description>&lt;p&gt;PHPCMS二次开发如何不影响程序升级？因为对源程序进行修改之后，PHPCMS 的程序升级，新程序发布的时候，我们不方便进行升级，直接覆盖会覆盖掉我们的修改。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP魔术方法：toString</title>
      <link>http://tanteng.me/2014/10/php-tostring/</link>
      <pubDate>Wed, 29 Oct 2014 09:32:49 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/10/php-tostring/</guid>
      <description>&lt;p&gt;PHP的魔术方法toString，可以直接echo这个实例输出字符串，示例如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&#34;lang:php decode:true &#34;&gt;class haha
{
    public function __toString()
    {
        return $this-&amp;gt;test();
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected function test()
{
    return &#39;hehe&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;$aa = new haha();
echo $aa;exit;//注意，只有echo的时候才会输出字符串，如果var_dump还是打印这个示例的结构。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打印结果：hehe&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Navicat将Sql Server 2000数据库导入（转换）到MySql中</title>
      <link>http://tanteng.me/2014/04/navicat-sql-server-2000/</link>
      <pubDate>Tue, 22 Apr 2014 06:03:20 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/04/navicat-sql-server-2000/</guid>
      <description>&lt;p&gt;大家都知道， Sql Server 2000的数据库只能运行在MS系列平台下，而我们有时需要将MS下的数据库移植到Linux或其他平台上，这是可能需要数据库的导入导出功能，但这样也未免太繁琐了，下面介绍一种简便的方法一步实现数据库的移植。&lt;/p&gt;

&lt;p&gt;Navicat 8是针对mysql的一个很好用的图形化管理工具，利用它导入功能把数据从sqlserver2000中直接导入到MySQL中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wordpress自定义上传文件路径</title>
      <link>http://tanteng.me/2014/03/wordpress-upload-path/</link>
      <pubDate>Wed, 19 Mar 2014 02:58:06 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/03/wordpress-upload-path/</guid>
      <description>&lt;p&gt;wordpress默认上传图片（文件）路径是uploads目录的‘年/月’文件夹，我们可以通过upload_dir钩子改变默认上传路径，自定义上传路径。&lt;/p&gt;

&lt;p&gt;该函数指定了uploads的目录为uploads的avatar文件夹：&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;function my_upload_dir($upload) {
    $upload[&amp;lsquo;subdir&amp;rsquo;]   = &amp;lsquo;/avatar&amp;rsquo;;
    $upload[&amp;lsquo;path&amp;rsquo;]     = $upload[&amp;lsquo;basedir&amp;rsquo;] . $upload[&amp;lsquo;subdir&amp;rsquo;];
    $upload[&amp;lsquo;url&amp;rsquo;]      = $upload[&amp;lsquo;baseurl&amp;rsquo;] . $upload[&amp;lsquo;subdir&amp;rsquo;];
    return $upload;
}
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP函数:fopen,filesize,fread,fclose</title>
      <link>http://tanteng.me/2014/03/php-fopen-filesize-fread-fclose/</link>
      <pubDate>Sun, 09 Mar 2014 06:07:32 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/03/php-fopen-filesize-fread-fclose/</guid>
      <description>PHP操作文件常用函数：fopen打开一个文件句柄，filesize读取文件大小，fread读取文件，fclose关闭文件操作句柄。 $file = fopen(FILE,&amp;lsquo;r&amp;rsquo;); $file_data</description>
    </item>
    
    <item>
      <title>wordpress隐秘常量SHORTINIT只加载必须的数据库操作文件</title>
      <link>http://tanteng.me/2014/01/wordpress-shortinit/</link>
      <pubDate>Wed, 22 Jan 2014 12:40:58 +0000</pubDate>
      
      <guid>http://tanteng.me/2014/01/wordpress-shortinit/</guid>
      <description>&lt;p&gt;wordpress有个隐秘的常量定义，define(&amp;#8216;SHORTINIT&amp;#8217;, true)，它可以尽可能少的加载wordpress文件，保留了基本的数据库操作类，即$wpdb，可以用来写处理ajax的php文件，加快ajax请求的响应速度！&lt;/p&gt;

&lt;p&gt;Here is start my loader file, not pretty but works for specific needs:&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;ini_set(&amp;lsquo;html_errors&amp;rsquo;, 0);
define(&amp;lsquo;SHORTINIT&amp;rsquo;, true);
require &amp;lsquo;../../../../wp-load.php&amp;rsquo;;
require( ABSPATH . WPINC . &amp;lsquo;/formatting.php&amp;rsquo; );
require( ABSPATH . WPINC . &amp;lsquo;/meta.php&amp;rsquo; );
require( ABSPATH . WPINC . &amp;lsquo;/post.php&amp;rsquo; );
wp_plugin_directory_constants();
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>left join,inner join区别</title>
      <link>http://tanteng.me/2013/11/left-join-inner/</link>
      <pubDate>Fri, 15 Nov 2013 05:53:20 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/11/left-join-inner/</guid>
      <description>&lt;p&gt;假设我们有两张表。Table A 是左边的表。Table B 是右边的表。其各有四条记录，其中有两条记录name是相同的，如下所示：让我们看看不同JOIN的不同&lt;/p&gt;

&lt;div&gt;
  &lt;table width=&#34;222&#34; border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
    &lt;colgroup&gt; &lt;col width=&#34;86&#34; /&gt; &lt;col width=&#34;136&#34; /&gt;&lt;/colgroup&gt; &lt;tr&gt;
      &lt;td colspan=&#34;2&#34; width=&#34;222&#34;&gt;
        A表
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        id
      &lt;/td&gt;
      
      &lt;td&gt;
        name
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        1
      &lt;/td&gt;
      
      &lt;td&gt;
        Pirate
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        2
      &lt;/td&gt;
      
      &lt;td&gt;
        Monkey
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        3
      &lt;/td&gt;
      
      &lt;td&gt;
        Ninja
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        4
      &lt;/td&gt;
      
      &lt;td&gt;
        Spaghetti
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  
  &lt;table width=&#34;222&#34; border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
    &lt;colgroup&gt; &lt;col width=&#34;86&#34; /&gt; &lt;col width=&#34;136&#34; /&gt;&lt;/colgroup&gt; &lt;tr&gt;
      &lt;td colspan=&#34;2&#34; width=&#34;222&#34;&gt;
        B表
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        id
      &lt;/td&gt;
      
      &lt;td&gt;
        name
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        1
      &lt;/td&gt;
      
      &lt;td&gt;
        Rutabaga
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        2
      &lt;/td&gt;
      
      &lt;td&gt;
        Pirate
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        3
      &lt;/td&gt;
      
      &lt;td&gt;
        Darth Vade
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        4
      &lt;/td&gt;
      
      &lt;td&gt;
        Ninja
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>PHP反射类ReflectionClass和ReflectionObject</title>
      <link>http://tanteng.me/2013/11/php-reflectionclass-object/</link>
      <pubDate>Tue, 12 Nov 2013 05:16:10 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/11/php-reflectionclass-object/</guid>
      <description>&lt;p&gt;PHP中的反射类，用来分析php程序，导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。&lt;/p&gt;

&lt;p&gt;看一个这样的问题，php类的成员变量没有在类中声明，而是在函数中声明，有什么不同？&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;class test{
    private $name;
    private $sex;
    function __construct(){
        $this-&amp;gt;aaa=&amp;lsquo;aaa&amp;rsquo;;
    }
}&lt;/p&gt;

&lt;p&gt;$test=new test();&lt;/p&gt;

&lt;p&gt;$reflect=new ReflectionClass($test);
$pro=$reflect-&amp;gt;getDefaultProperties();
print_r($pro);//打印结果：Array ( [name] =&amp;gt; [sex] =&amp;gt; )&lt;/p&gt;

&lt;p&gt;echo $test-&amp;gt;aaa;//打印结果：aaa
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FullPage.js轻松实现全屏滚动</title>
      <link>http://tanteng.me/2013/10/fullpage-js/</link>
      <pubDate>Sat, 19 Oct 2013 14:32:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/10/fullpage-js/</guid>
      <description>&lt;p&gt;FullPage.js 是一个简单而易于使用的插件，用来创建全屏滚动网站（也被称为单页网站）。除了可以创建全屏滚动效果以外，也可以给网站添加一些水平的滑块效果。能够自适应不同的屏幕尺寸，包括平板电脑和移动设备。&lt;img src=&#34;http://www.admin10000.com/UploadFiles/Document/201310/12/20131012142015906515.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用navicat导入sql大文件</title>
      <link>http://tanteng.me/2013/09/navicat-sql/</link>
      <pubDate>Thu, 05 Sep 2013 16:21:06 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/09/navicat-sql/</guid>
      <description>&lt;p&gt;我在SAE上用自带的Deferred Jobs工具把我的wordpress博客数据库导出来了，sql格式的，保证完整。我用本机navicat新建了一个数据库，编码都是utf8，然后运行sql文件导入，每次运行一会儿就卡住了，只能导入一小部分。&lt;/p&gt;

&lt;p&gt;我用同样的方法导入sae其他的应用的sql文件，都是正常的。&lt;/p&gt;

&lt;p&gt;报错截图：&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;attachment-full&#34; src=&#34;http://tanteng-wordpress.stor.sinaapp.com/uploads/2013/09/201304181305293855.pngpsid1&#34; alt=&#34;201304181305293855&#34; width=&#34;408&#34; height=&#34;354&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery回车键绑定点击事件</title>
      <link>http://tanteng.me/2013/06/jquery-enter/</link>
      <pubDate>Thu, 27 Jun 2013 16:37:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/06/jquery-enter/</guid>
      <description>当按下回车键时，绑定按钮点击事件代码如下，通过检测按下的键值，回车键keycode为13，判断是否是回车键，然后完成相应的方法。</description>
    </item>
    
    <item>
      <title>PHP的序列化和json以及区别</title>
      <link>http://tanteng.me/2013/04/php-serialize-json/</link>
      <pubDate>Tue, 16 Apr 2013 06:12:56 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/04/php-serialize-json/</guid>
      <description>&lt;h3 id=&#34;序列化和反序列化&#34;&gt;序列化和反序列化&lt;/h3&gt;

&lt;p&gt;序列化是将变量转换为可保存或传输的字符串的过程；反序列化就是在适当的时候把这个字符串再转化成原来的变量使用。这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;&amp;lt;?php
$a = array(&amp;lsquo;a&amp;rsquo; =&amp;gt; &amp;lsquo;Apple&amp;rsquo; ,&amp;lsquo;b&amp;rsquo; =&amp;gt; &amp;lsquo;banana&amp;rsquo; , &amp;lsquo;c&amp;rsquo; =&amp;gt; &amp;lsquo;Coconut&amp;rsquo;);
//序列化数组
$s = serialize($a);
echo $s;
//输出结果：a:3:{s:1:&amp;ldquo;a&amp;rdquo;;s:5:&amp;ldquo;Apple&amp;rdquo;;s:1:&amp;ldquo;b&amp;rdquo;;s:6:&amp;ldquo;banana&amp;rdquo;;s:1:&amp;ldquo;c&amp;rdquo;;s:7:&amp;ldquo;Coconut&amp;rdquo;;}
echo &amp;lsquo;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&amp;rsquo;;
//反序列化
$o = unserialize($s);
print_r($o);
//输出结果 Array ( [a] =&amp;gt; Apple [b] =&amp;gt; banana [c] =&amp;gt; Coconut )
?&amp;gt;
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>已知f(1)=2;f(2)=3;f(n)=f(n-1)&#43;f(n-2);用递归和非递归方法计算F($n)的值</title>
      <link>http://tanteng.me/2013/03/di-gui/</link>
      <pubDate>Fri, 15 Mar 2013 15:29:18 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/03/di-gui/</guid>
      <description>&lt;p&gt;有一道题是这样的：f(1)=2;f(2)=3;f(n)=f(n-1)+f(n-2),写一个foo($num)方法。采用递归和非递归两种方式，计算出值。&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.递归方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;&amp;lt;?php
function foo($num){
    if ($num&amp;gt;0){
        if($num==1){
            return 2;
        }
        elseif ($num==2){
            return 3;
        }
        else{
            return foo($num-1)+foo($num-2);
        }
    }
}&lt;/p&gt;

&lt;p&gt;echo foo(5);
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP PDOStatement:bindParam的一个陷阱</title>
      <link>http://tanteng.me/2013/03/pdo-statement-bindparam/</link>
      <pubDate>Sun, 03 Mar 2013 09:51:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/03/pdo-statement-bindparam/</guid>
      <description>&lt;p&gt;废话不多说, 直接看代码:&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;&amp;lt;?php
$dbh = new PDO(&amp;lsquo;mysql:host=localhost;dbname=test&amp;rsquo;, &amp;ldquo;test&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;$query = &amp;lt;&amp;lt;&lt;QUERY
  INSERT INTO `user` (`username`, `password`) VALUES (:username, :password);
QUERY;
$statement = $dbh-&gt;prepare($query);&lt;/p&gt;

&lt;p&gt;$bind_params = array(&amp;rsquo;:username&amp;rsquo; =&amp;gt; &amp;ldquo;laruence&amp;rdquo;, &amp;lsquo;:password&amp;rsquo; =&amp;gt; &amp;ldquo;weibo&amp;rdquo;);
foreach( $bind_params as $key =&amp;gt; $value ){
    $statement-&amp;gt;bindParam($key, $value);
}
$statement-&amp;gt;execute();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;请问, 最终执行的SQL语句是什么, 上面的代码是否有什么问题?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php当中的memcache应用</title>
      <link>http://tanteng.me/2013/03/php-memcache/</link>
      <pubDate>Sun, 03 Mar 2013 09:13:01 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/03/php-memcache/</guid>
      <description>&lt;p&gt;&lt;strong&gt;安装memcached扩展的方法：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;解压Memcached_1.2.5文档，cmd下执行memcached.exe -d -install&lt;/p&gt;

&lt;p&gt;将php5.3_vc6_memcachedll文档解压，将php_memcache.dll文件复制到php安装目录的ext文件目录中。&lt;/p&gt;

&lt;p&gt;然后在php.ini 当中填上这句话：extension=&amp;#8221;php_memcache.dll&amp;#8221;&lt;/p&gt;

&lt;p&gt;在phpinfo（）下查看，是否引用了memcache扩展。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php的webservice示例</title>
      <link>http://tanteng.me/2013/03/php-webservice/</link>
      <pubDate>Sat, 02 Mar 2013 05:18:03 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/03/php-webservice/</guid>
      <description>&lt;p&gt;首先大家要简单了解了何谓webservice，接下来就做两个非常简单的例子，webservice还是逃不开server端与client端。&lt;/p&gt;

&lt;p&gt;我测试的环境为：apache2.2.11 php5.2.10&lt;/p&gt;

&lt;p&gt;做这个测试之前，要确认你的php配置文件中已经将soap扩展打开，即extension=php_soap.dll;&lt;/p&gt;

&lt;p&gt;OK 现在我们来体验webservice&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据库UNSIGNED属性</title>
      <link>http://tanteng.me/2013/03/unsigned/</link>
      <pubDate>Fri, 01 Mar 2013 13:42:40 +0000</pubDate>
      
      <guid>http://tanteng.me/2013/03/unsigned/</guid>
      <description>unsigned一般是无符号的意思，比如unsigned int就是无符号整数的意思，一般有符号数的最高位是符号位，表示数据的正负，不表示大小</description>
    </item>
    
    <item>
      <title>数据库字段类型Enum（枚举）和Set（集合）的区别（转）</title>
      <link>http://tanteng.me/2012/12/enum-set/</link>
      <pubDate>Thu, 20 Dec 2012 02:03:16 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/12/enum-set/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Enum枚举，Set集合。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ENUM和SET都是比较特殊的字符串数据列类型，它们的取值范围是一个预先定义好的列表。ENUM或SET数据列的取值只能从这个列表中进行选择。ENUM和SET的主要区别是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;ENUM只能取单值&lt;/em&gt;&lt;/strong&gt;，它的数据列表是一个枚举集合。它的合法取值列表最多允许有65535个成员。例如：ENUM(&amp;#8220;N&amp;#8221;,&amp;#8221;Y&amp;#8221;)表示，该数据列的取值要么是&amp;#8221;Y&amp;#8221;，要么就是&amp;#8221;N&amp;#8221;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;SET可取多值&lt;/em&gt;&lt;/strong&gt;。它的合法取值列表最多允许有64个成员。空字符串也是一个合法的SET值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php中数组存入cookie的方法</title>
      <link>http://tanteng.me/2012/12/php-save-cookie/</link>
      <pubDate>Wed, 19 Dec 2012 09:32:52 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/12/php-save-cookie/</guid>
      <description>&lt;p&gt;cookie默认不能存数组，所以要采取另外的方法将数组存入cookie中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方法一：先用serialize序列化数组，再存入COOKIE，读出来时用unserialize得到原来的数组&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;//存入&lt;br /&gt;
$arr = array(1,2,3);&lt;br /&gt;
$arr_str = serialize($arr);&lt;br /&gt;
setcookie(&amp;ldquo;a&amp;rdquo;,$arr_str);&lt;/p&gt;

&lt;p&gt;//取出&lt;br /&gt;
$arr_str = $_COOKIE[&amp;lsquo;a&amp;rsquo;];&lt;br /&gt;
$arr = unserialize($arr_str);
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Navicat10.x注册码</title>
      <link>http://tanteng.me/2012/12/navica-10/</link>
      <pubDate>Wed, 19 Dec 2012 01:29:20 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/12/navica-10/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Navicat10.x注册码：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;NAVD-IO5R-4VGM-TIZD&lt;/p&gt;

&lt;p&gt;NAVL-RK72-URYA-CINR&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ThinkPHP的RBAC（基于角色权限控制）详解</title>
      <link>http://tanteng.me/2012/11/thinkphp-rbac/</link>
      <pubDate>Sun, 25 Nov 2012 07:15:58 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/11/thinkphp-rbac/</guid>
      <description>&lt;h1 id=&#34;一-什么是rbac&#34;&gt;一、什么是RBAC&lt;/h1&gt;

&lt;p&gt;基于角色的访问控制（Role-Based Access Control）作为传统访问控制（自主访问，强制访问）的有前景的代替受到广泛的关注。&lt;/p&gt;

&lt;p&gt;在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。&lt;/p&gt;

&lt;p&gt;在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系可以建立起来以囊括更广泛的客观情况。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>thinkphp的sql优化原则</title>
      <link>http://tanteng.me/2012/11/thinkphp-sql/</link>
      <pubDate>Sat, 17 Nov 2012 16:28:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/11/thinkphp-sql/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这不仅仅是针对thinkphp的，也可以针对所有mysql数据库的sql优化。摘自thinkphp官方手册的一篇文章。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通常网站的性能瓶颈在数据库查询，如果你希望你的网站在一定阶段之内保持稳定，优化你的SQL和数据库是非常必要的一个优化环节。优化数据库是一个很大的话题，这里只是摘要一些比较关键的优化参考建议，并且需要具体分析项目的情况才能给出最合理的优化建议，所以具体的优化建议你应该咨询你公司的架构师或者DBA。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php 对一组单词进行所有可能情况的排列组合</title>
      <link>http://tanteng.me/2012/11/php-zuhe/</link>
      <pubDate>Sun, 04 Nov 2012 06:20:50 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/11/php-zuhe/</guid>
      <description>&lt;p&gt;有一个数组每个元素是长度不确定的单词：&lt;/p&gt;

&lt;div id=&#34;code_block_0&#34;&gt;
  &lt;code lang=&#34;php&#34;&gt;$words = array(&#39;china&#39;,&#39;mother&#39;,&#39;father&#39;,&#39;hello&#39;,&#39;welcome&#39;);&lt;/code&gt;
  
  &lt;div title=&#34;复制代码&#34;&gt;
    这个数组元素个数不确定，寻求用php打印这些元素的所有排列组合算法 &lt;strong&gt;最好能控制组合长度，比如getCombines($words,$len=0)，这个$len就是控制组合有几个元素组成的，如果为0则打印所有组合&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>使用substr函数来实现str_replace的功能</title>
      <link>http://tanteng.me/2012/11/substr_str_replace/</link>
      <pubDate>Sat, 03 Nov 2012 13:40:01 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/11/substr_str_replace/</guid>
      <description>&lt;p&gt;要求不使用substr函数来实现str_replace的功能，如何来做呢？&lt;/p&gt;

&lt;p&gt;下面是一个使用substr的版本，思路供参考。&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;function str_replace($search=&amp;ldquo;, $replace=&amp;rdquo;, $subject=&amp;ldquo;){
    $search_length = strlen($search);
    $replace_length = strlen($replace);
    $subject_length = strlen($subject);
    if($search_length==0) return $subject;
    if($subject_length==0) return &amp;ldquo;;
    if($search_length &amp;gt; $subject_length) return $subject;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for($i=0;$i&amp;amp;lt;$subject_length; $i++){
    if(substr($subject, $i, $search_length)==$search){
        $subject = substr($subject, 0, $i).$replace.substr($subject, $i+$search_length);
        $i += $replace_length;
    }
}
return $subject;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用php scandir函数遍历文件夹目录和所有文件</title>
      <link>http://tanteng.me/2012/11/php-scandir/</link>
      <pubDate>Sat, 03 Nov 2012 08:30:22 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/11/php-scandir/</guid>
      <description>使用php scandir函数遍历文件夹目录和所有文件 &amp;lt;?php $dir = &amp;ldquo;.&amp;rdquo;; //当前目录 list_file($dir); function list_file($dir){ $list = scandir($dir); // 得到该文件下的所有文件和文件夹 foreach($list as $file){//遍</description>
    </item>
    
    <item>
      <title>优化mysql数据库的方法</title>
      <link>http://tanteng.me/2012/10/optimize-mysql/</link>
      <pubDate>Mon, 15 Oct 2012 06:40:05 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/10/optimize-mysql/</guid>
      <description>&lt;p&gt;(1).数据库设计方面,这是DBA和Architect的责任,设计结构良好的数据库,必要的时候,去正规化(英文是这个:denormalize,中文翻译成啥我不知道),允许部分数据冗余,避免JOIN操作,以提高查询效率&lt;/p&gt;

&lt;p&gt;(2).系统架构设计方面,表散列,把海量数据散列到几个不同的表里面.快慢表,快表只留最新数据,慢表是历史存档.集群,主服务器Read &amp;amp; write,从服务器read only,或者N台服务器,各机器互为Master&lt;/p&gt;

&lt;p&gt;(3).(1)和(2)超越PHP Programmer的要求了,会更好,不会没关系.检查有没有少加索引&lt;/p&gt;

&lt;p&gt;(4).写高效的SQL语句,看看有没有写低效的SQL语句,比如生成笛卡尔积的全连接啊,大量的Group By和order by,没有limit等等.必要的时候,把数据库逻辑封装到DBMS端的存储过程里面.缓存查询结果,explain每一个sql语句&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mysql数据库建立索引的好处和代价</title>
      <link>http://tanteng.me/2012/10/mysql-index/</link>
      <pubDate>Sat, 13 Oct 2012 08:34:43 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/10/mysql-index/</guid>
      <description>&lt;p&gt;说起提高数据库性能，索引是最物美价廉的东西了。不用加内存，不用改程序，不用调sql，只要执行个正确的’create index’，查询速度就可能提高百倍千倍，这可真有诱惑力。可是天下没有免费的午餐，&lt;strong&gt;查询速度的提高是以插入、更新、删除的速度为代价的，这些写操作，增加了大量的I/O。&lt;/strong&gt;由于索引的存储结构不同于表的存储，一个表的索引所占空间比数据所占空间还大的情况经常发生。&lt;/p&gt;

&lt;p&gt;这意味着我们在写数据库的时候做了很多额外的工作，而这个工作只是为了提高读的效率。因此，我们建立一个索引，必须保证这个索引不会“亏本”。&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php合并数组的两种方法：&#43;和array_merge()的区别</title>
      <link>http://tanteng.me/2012/10/array_merge/</link>
      <pubDate>Thu, 11 Oct 2012 02:57:13 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/10/array_merge/</guid>
      <description>&lt;p&gt;PHP中两个数组合并可以使用+或者array_merge，但之间还是有区别的，而且这些区别如果了解不清楚项目中会要命的！&lt;/p&gt;

&lt;p&gt;主要区别是两个或者多个数组中如果出现相同键名，键名分为字符串或者数字，需要注意&lt;/p&gt;

&lt;p&gt;1）键名为数字时，array_merge()不会覆盖掉原来的值，但＋合并数组则会把最先出现的值作为最终结果返回，而把后面的数组拥有相同键名的那些值“抛弃”掉（不是覆盖）&lt;/p&gt;

&lt;p&gt;2）键名为字符时，＋仍然把最先出现的值作为最终结果返回，而把后面的数组拥有相同键名的那些值“抛弃”掉，但array_merge()此时会覆盖掉前面相同键名的值&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MYSQL中myisam和innodb引擎的区别</title>
      <link>http://tanteng.me/2012/10/mysql-myisam-innodb/</link>
      <pubDate>Thu, 11 Oct 2012 02:39:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/10/mysql-myisam-innodb/</guid>
      <description>&lt;p&gt;MyISAM 是MySQL中默认的存储引擎，一般来说不是有太多人关心这个东西。决定使用什么样的存储引擎是一个很tricky的事情，但是还是值我们去研究一下，这里的文章只考虑 MyISAM 和InnoDB这两个，因为这两个是最常见的。&lt;/p&gt;

&lt;p&gt;讲讲你对mysql myisam和innodb的认识。然后你认为他们的区别在那里？为什么？&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>提高php执行效率的10条编程习惯</title>
      <link>http://tanteng.me/2012/10/php-efficiency/</link>
      <pubDate>Fri, 05 Oct 2012 03:00:40 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/10/php-efficiency/</guid>
      <description>&lt;p&gt;&lt;strong&gt;1、使用单引号括起来的字符串&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当使用双引号来括字符串时，PHP解释器会对其进行变量替换、转义等操作，如“ ”。如果你只想输出一个基本的字符串，就用单引号吧，这样会节省一些资源。当然，如果你需要进行变量替换的，那就必须用双引号了，但其他情况下还是用单引号吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、字符串的输出&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你认为以下哪一条语句的运行速度最快?&lt;/p&gt;

&lt;p&gt;print “Hi my name is $a. I am $b”;&lt;/p&gt;

&lt;p&gt;echo “Hi my name is $a. I am $b”;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php超级全局变量总结</title>
      <link>http://tanteng.me/2012/10/php-super-global/</link>
      <pubDate>Tue, 02 Oct 2012 09:19:44 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/10/php-super-global/</guid>
      <description>&lt;p&gt;PHP有9个预定义变量数组，分别总结如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、$_SERVER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$_SERVER超级全局变量包含由web服务器创建的信息，它提供了服务器和客户配置及当前请求环境的有关信息。根据服务器不同，$_SERVER中的变量值和变量个数会有差别，不过一般都可以找到CGI1.1规范中定义的变量。其中包括：&lt;/p&gt;

&lt;p&gt;$_SERVER[ &amp;#8216;HTTP_REFERER&amp;#8217; ] ; 引导用户到达当前位置的页面的URL ；&lt;/p&gt;

&lt;p&gt;$_SERVER[ &amp;#8216;REMOTE_ADDR‘ ] ; 客户IP地址 ；&lt;/p&gt;

&lt;p&gt;$_SERVER[ ’REQUEST_URI‘ ] ; URL的路径部分。如果URL是 &lt;a href=&#34;http://tanteng.sinaapp.com/blog/apache/index.html&#34;&gt;http://tanteng.sinaapp.com/blog/apache/index.html&lt;/a&gt; ，那么URI就是/blog/apache/index.html 。&lt;/p&gt;

&lt;p&gt;$_SERVER[ &amp;#8216;HTTP_USER_AGENT&amp;#8217; ] ; 客户的用户代理，一般会提供操作系统和浏览器的有关信息。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP：PDO prepare预处理</title>
      <link>http://tanteng.me/2012/09/php-pdo-prepare/</link>
      <pubDate>Sun, 30 Sep 2012 04:03:39 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/php-pdo-prepare/</guid>
      <description>&lt;p&gt;许多成熟的数据库都支持预处理语句（Prepared Statements)的概念。它们是什么东西？你可以把它们想成是一种编译过的要执行的SQL语句模板，可以使用不同的变量参数定制它。预处理语句具有两个主要的优点：&lt;/p&gt;

&lt;p&gt;查询只需要被解析（或准备）一次，但可以使用相同或不同的参数执行多次。当查询准备好（Prepared）之后，数据库就会分析，编译并优化它要执行查询的计划。对于复杂查询来说，如果你要重复执行许多次有不同参数的但结构相同的查询，这个过程会占用大量的时间，使得你的应用变慢。通过使用一个预处理语句你就可以避免重复分析、编译、优化的环节。简单来说，预处理语句使用更少的资源，执行速度也就更快。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jquery cookie的用法</title>
      <link>http://tanteng.me/2012/09/jquery-cookie-usage/</link>
      <pubDate>Thu, 27 Sep 2012 06:10:43 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/jquery-cookie-usage/</guid>
      <description>&lt;p&gt;jQuery cookie是个很好的cookie插件，大概的使用方法如下：&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Create session cookie:&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;jquery&#34;&gt;$.cookie(&amp;lsquo;the_cookie&amp;rsquo;, &amp;lsquo;the_value&amp;rsquo;); &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create expiring cookie, 7 days from then:&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;jquery&#34;&gt;$.cookie(&amp;lsquo;the_cookie&amp;rsquo;, &amp;lsquo;the_value&amp;rsquo;, { expires: 7 }); &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create expiring cookie, valid across entire site:&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;jquery&#34;&gt;$.cookie(&amp;lsquo;the_cookie&amp;rsquo;, &amp;lsquo;the_value&amp;rsquo;, { expires: 7, path: &amp;lsquo;/&amp;rsquo; }); &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Read cookie:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTP状态码200、301、403、404、500等</title>
      <link>http://tanteng.me/2012/09/http-200-301-403-404-500/</link>
      <pubDate>Wed, 26 Sep 2012 15:41:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/http-200-301-403-404-500/</guid>
      <description>&lt;p&gt;HTTP状态码以及其含义，web前端面试常考，必须掌握。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一些常见的状态码为&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;200 &amp;#8211; 服务器成功返回网页&lt;/p&gt;

&lt;p&gt;404 &amp;#8211; 请求的网页不存在&lt;/p&gt;

&lt;p&gt;503 &amp;#8211; 服务器超时&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入理解 PHP 中 session 和 cookies 的联系</title>
      <link>http://tanteng.me/2012/09/php-session-cookies/</link>
      <pubDate>Wed, 26 Sep 2012 01:46:43 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/php-session-cookies/</guid>
      <description>&lt;p&gt;1. session概念&lt;/p&gt;

&lt;p&gt;2. http协议与状态保持&lt;/p&gt;

&lt;p&gt;3. 理解cookie&lt;/p&gt;

&lt;p&gt;4. php中session的生成机制&lt;/p&gt;

&lt;p&gt;5. php中session的过期回收机制&lt;/p&gt;

&lt;p&gt;6. php中session的客户端存储机制&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>全面介绍HTML5</title>
      <link>http://tanteng.me/2012/09/html-5/</link>
      <pubDate>Tue, 25 Sep 2012 15:49:24 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/html-5/</guid>
      <description>&lt;h1 id=&#34;目录&#34;&gt;目录&lt;/h1&gt;

&lt;h3 id=&#34;什么是html5&#34;&gt;什么是HTML5&lt;/h3&gt;

&lt;h3 id=&#34;html5新特性和效果&#34;&gt;HTML5新特性和效果&lt;/h3&gt;

&lt;h3 id=&#34;html5目前存在的应用局限&#34;&gt;HTML5目前存在的应用局限&lt;/h3&gt;

&lt;h3 id=&#34;讨论-html5适合应用于我们哪些项目&#34;&gt;讨论：HTML5适合应用于我们哪些项目？&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>详解php的魔术方法__get()和__set()</title>
      <link>http://tanteng.me/2012/09/php_set_get/</link>
      <pubDate>Fri, 14 Sep 2012 04:18:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/php_set_get/</guid>
      <description>&lt;p&gt;先看看php官方文档的解释:&lt;/p&gt;

&lt;p&gt;__set() is run when writing data to inaccessible properties.&lt;/p&gt;

&lt;p&gt;__get() is utilized for reading data from inaccessible properties.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php引用计数器进行垃圾收集机制</title>
      <link>http://tanteng.me/2012/09/php-ref-counter/</link>
      <pubDate>Thu, 13 Sep 2012 15:08:26 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/php-ref-counter/</guid>
      <description>&lt;p&gt;PHP 有一个非常简单的垃圾收集器，它实际上将对不再位于内存范围（scope）中的对象进行垃圾收集。垃圾收集的内部方式是使用一个引用计数器，因此当计数器达到 0 时（意味着对该对象的引用都不可用），对象将被当作垃圾收集并从内存中删除。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 数组相加：array(“a”)&#43;array(“b”)结果还是array(“a”)</title>
      <link>http://tanteng.me/2012/09/array-adding/</link>
      <pubDate>Thu, 13 Sep 2012 04:10:12 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/array-adding/</guid>
      <description>&lt;p&gt;在网上看到一道题：&lt;/p&gt;

&lt;p&gt;array(&amp;#8220;a&amp;#8221;)+array(&amp;#8220;b&amp;#8221;)的结果是___&lt;/p&gt;

&lt;p&gt;A.array(&amp;#8220;a&amp;#8221;,&amp;#8221;b&amp;#8221;)&lt;/p&gt;

&lt;p&gt;B.array(&amp;#8220;b&amp;#8221;,&amp;#8221;a&amp;#8221;)&lt;/p&gt;

&lt;p&gt;C.array(&amp;#8220;b&amp;#8221;)&lt;/p&gt;

&lt;p&gt;D.array(&amp;#8220;a&amp;#8221;)&lt;/p&gt;

&lt;p&gt;答案：D&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>javascript的关键字和保留字</title>
      <link>http://tanteng.me/2012/09/javascript-keywords/</link>
      <pubDate>Wed, 12 Sep 2012 15:04:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/javascript-keywords/</guid>
      <description>&lt;p&gt;1、关键字&lt;/p&gt;

&lt;p&gt;break&lt;/p&gt;

&lt;p&gt;case&lt;/p&gt;

&lt;p&gt;catch&lt;/p&gt;

&lt;p&gt;continue&lt;/p&gt;

&lt;p&gt;default&lt;/p&gt;

&lt;p&gt;delete&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php递归统计多位数组个数count（$array，1）</title>
      <link>http://tanteng.me/2012/09/php-count-array/</link>
      <pubDate>Mon, 10 Sep 2012 14:42:10 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/php-count-array/</guid>
      <description>&lt;p&gt;下面程序运行结果为（）&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;php&#34;&gt;$numb=array(array(10,15,30),array(10,15,30),array(10,15,30));
echo count($numb,1);
&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP对象在内存堆栈中的分配</title>
      <link>http://tanteng.me/2012/09/stack-php/</link>
      <pubDate>Sun, 09 Sep 2012 07:54:05 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/09/stack-php/</guid>
      <description>&lt;p&gt;对象在PHP里面和整型、浮点型一样，也是一种数据类，都是存储不同类型数据用的， 在运行的时候都要加载到内存中去用，那么对象在内存里面是怎么体现的呢？内存从逻辑上说大体上是分为4段，&lt;strong&gt;栈空间段、堆空间段、代码段、初始化静态段&lt;/strong&gt;，程序里面不同的声明放在不同的内存段里面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据段&lt;/strong&gt;（data segment）通常是指用来存放程序中已初始化且不为0的全局变量如：静态变量和常量&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;代码段&lt;/strong&gt;（code segment / text segment）通常是指用来存放程序执行代码的一块内存区域，比如函数和方法&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CSS Sprites技术，利用background属性进行图片分割</title>
      <link>http://tanteng.me/2012/05/css-sprites/</link>
      <pubDate>Wed, 16 May 2012 02:41:43 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/05/css-sprites/</guid>
      <description>&lt;p&gt;CSS Sprites 技术对于广大的前端工程师来说应该是一点也不陌生。这个被国内开发者昵称为CSS精灵 CSS雪碧的家伙到底解决了什么问题，我们又怎样合理使用这个技术呢？下面让我们详细的聊聊。&lt;/p&gt;

&lt;p&gt;在大家还在拨号上网的“远古时期”，由于网速的限制，页面开发者都喜欢把网页里面的图片字节数控制的非常小，往往在一个图片文件夹里散落着n多的小碎图。随着网络技术的发展，网速的提升，大家越来越重视页面的加载速度，页面效率问题，因为每加载一张图片都会产生一次浏览器请求数，发起的请求数越多那么页面加载的速度也越慢。还有当页面加载时，图片一个个的零星显示，鼠标经过时候背景闪白等也都是我们不能忍受的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;于是乎将页面中的背景图整合到一起，利用“background-image”，“background- repeat”，“background-position”的组合进行背景定位的技术被广泛使用与了页面构建中，这就是CSS Sprites。&lt;/strong&gt;当然CSS Sprites技术也存在着维护不便，内存占用大等等的缺点。&lt;/p&gt;

&lt;p&gt;好了，如果我只说这些，那么这篇文章就有点太水了。前面那些只是对CSS Sprites技术的一个普及。作为一个开发者我们应该对它有一个更全面的认识，挖掘深度内容，这样才能有利于我们效率开发，团队协作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTML5&#43;CSS3&#43;jQuery视频播放器</title>
      <link>http://tanteng.me/2012/05/html5-css3-video-player/</link>
      <pubDate>Sat, 12 May 2012 05:02:47 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/05/html5-css3-video-player/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;毫无疑问HTML5已经是大势所趋，知名视频网站YouTube在两年前就开始推广HTML5播放器来代替Flash。虽然国内还没有完全普及HTML5浏览器，但在各大本土浏览器厂商的努力下，支持HTML5的浏览器在中国浏览器市场的占有率也在不断增长中。本教程将会手把手地教你制作一个基于HTML5&amp;amp; CSS3&amp;amp; JavaScript 技术的视频播放器。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&#34;alignnone&#34; src=&#34;https://public.bay.livefilestore.com/y1peX9JxCFEOl9YogxRdp96se7Akf9zdKPUDzo7PaASwo7P-8ZzOfsLE3KPDOorms3h2NPYQdtprM_OjqmRc6z0Hw/138_120510135003_1.jpg?psid=1&#34; alt=&#34;&#34; width=&#34;576&#34; height=&#34;241&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最终效果图&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何用javascript实现类继承</title>
      <link>http://tanteng.me/2012/05/javascript-class-extend/</link>
      <pubDate>Mon, 07 May 2012 12:06:53 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/05/javascript-class-extend/</guid>
      <description>&lt;p&gt;本文着重解析javascript类继承机制，从底层剖析javascript是怎样实现“继承”的。&lt;/p&gt;

&lt;p&gt;目前 javascript的实现继承方式并不是通过“extend”关键字来实现的，而是通过 constructor function（构造方法）和prototype属性来实现继承。首先我们创建一个animal 类&lt;/p&gt;

&lt;p&gt;&lt;code lang=&#34;javascript&#34;&gt;var animal =  function (){   //这就是constructor function 了
   this .name = &amp;lsquo;pipi&amp;rsquo;;
   this .age = 10;
   this .height = 0;
}
 //建立一个动物的实例
 var  a1 =   new  animal ();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;构造函数与其他普通函数区别在于，1.构造函数里有 this关键字，2.调用构造函数是使用的new关键字。通过new运算符调用构造函数 animal 后，系统就会返回一个对象，这个对象就相当于&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>提高Web性能的几个方法</title>
      <link>http://tanteng.me/2012/03/web-optimization/</link>
      <pubDate>Tue, 06 Mar 2012 08:47:27 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/03/web-optimization/</guid>
      <description>&lt;p&gt;（一）尽量减少 HTTP 请求&lt;/p&gt;

&lt;p&gt;有几种常见的方法能切实减少 HTTP 请求：&lt;/p&gt;

&lt;p&gt;1、 合并脚本跟样式文件，如可以把多个 CSS 文件合成一个，把多个 JS 文件合成一个。&lt;/p&gt;

&lt;p&gt;2、 CSS Sprites 利用 CSS background 相关元素进行背景图绝对定位,把多个图片合成一个图片。&lt;/p&gt;

&lt;p&gt;（二）使用浏览器缓存&lt;/p&gt;

&lt;p&gt;在用户浏览网站的不同页面时，很多内容是重复的，比如相同的JS、CSS、图片等。如果我们能够建议甚至强制浏览器在本地缓存这些文件，将大大降低页面产生的流量，从而降低页面载入时间。&lt;/p&gt;

&lt;p&gt;根据服务器端的响应header，一个文件对浏览器而言，有几级不同的缓存状态。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从技术角度分析铁道部的购票网站为什么这么慢</title>
      <link>http://tanteng.me/2012/01/mor/</link>
      <pubDate>Thu, 12 Jan 2012 14:29:12 +0000</pubDate>
      
      <guid>http://tanteng.me/2012/01/mor/</guid>
      <description>&lt;p&gt;这个网站的前端基本架构是jQuery+Struts+CDN(即content distribution network)。&lt;/p&gt;

&lt;p&gt;首先，这个查询列车信息的querySingleAction.do，把这些HTML也跟着传过来了，用JS写不更好吗？&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone&#34; alt=&#34;&#34; src=&#34;https://public.bay.livefilestore.com/y1pDHD9hcAEItvGz7WBxRFammAPvWcBWvY69rPJLZVj0_U6725wH3tPb2oIzDYldnd5LNig8tLwkORNUAuR4R_CNw/mor1.jpg?psid=1&#34; width=&#34;580&#34; height=&#34;315&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery常用技巧</title>
      <link>http://tanteng.me/2011/10/jquery-2/</link>
      <pubDate>Mon, 24 Oct 2011 14:16:15 +0000</pubDate>
      
      <guid>http://tanteng.me/2011/10/jquery-2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;1、关于页面元素的引用 &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过jquery的$()引用元素包括通过id、class、元素名以及元素的层级关系及dom或者xpath条件等方法，且返回的对象为jquery对象（集合对象），不能直接调用dom定义的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、jQuery对象与dom对象的转换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;只有jquery对象才能使用jquery定义的方法。注意dom对象和jquery对象是有区别的，调用方法时要注意操作的是dom对象还是 jquery对象。&lt;/p&gt;

&lt;p&gt;普通的dom对象一般可以通过$()转换成jquery对象。&lt;/p&gt;

&lt;p&gt;如：$(document.getElementById(&amp;#8220;msg&amp;#8221;))则为jquery对象，可以使用jquery的方法。&lt;/p&gt;

&lt;p&gt;由于jquery对象本身是一个集合。所以如果jquery对象要转换为dom对象则必须取出其中的某一项，一般可通过索引取出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jquery :nth-child()伪类选择器</title>
      <link>http://tanteng.me/2011/10/jquery-nth-child/</link>
      <pubDate>Mon, 24 Oct 2011 14:06:00 +0000</pubDate>
      
      <guid>http://tanteng.me/2011/10/jquery-nth-child/</guid>
      <description>&lt;p&gt;本来是css3的伪类选择器，可惜大部分浏览器都不支持，然而jquery却给借鉴过来了， 用起来很给力很给力！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:nth-child(&lt;em&gt;an+b&lt;/em&gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;伪类&lt;strong&gt;:nth-child()&lt;/strong&gt;的参数是_an+b_，如果按照w3.org上的描述，写成中文，很可能会让人头晕，再加上笔者的文笔水平有限，所以我决定避开an+b的说法，把它拆分成5种写法共5部分来说明。&lt;/p&gt;

&lt;p&gt;可惜目前能较好地支持她的只有Opera9+和Safari3+。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>30个最常用css选择器</title>
      <link>http://tanteng.me/2011/10/css/</link>
      <pubDate>Sat, 22 Oct 2011 04:48:33 +0000</pubDate>
      
      <guid>http://tanteng.me/2011/10/css/</guid>
      <description>&lt;div id=&#34;cnblogs_post_body&#34;&gt;
  &lt;div id=&#34;article-detail-content&#34;&gt;
    &lt;p&gt;
      你也许已经掌握了id、class、后台选择器这些基本的css选择器。但这远远不是css的全部。下面向大家系统的解析css中30个最常用的选择器，包括我们最头痛的浏览器兼容性问题。掌握了它们，才能真正领略css的巨大灵活性。
    &lt;/p&gt;
    
    &lt;h2&gt;
      1. *
    &lt;/h2&gt;
    
    &lt;code&gt;* {
    margin: 0;
    padding: 0;
   }&lt;/code&gt;
    
    &lt;p&gt;
      星状选择符会在页面上的每一个元素上起作用。web设计者经常用它将页面中所有元素的margin和padding设置为0。 *选择符也可以在子选择器中使用。
    &lt;/p&gt;
    
    &lt;code&gt;#container * {
     border: 1px solid black;
   }&lt;/code&gt;</description>
    </item>
    
    <item>
      <title>Css设置img属性让图片水平居中，居左，居右</title>
      <link>http://tanteng.me/2011/10/css_img/</link>
      <pubDate>Sat, 15 Oct 2011 16:43:02 +0000</pubDate>
      
      <guid>http://tanteng.me/2011/10/css_img/</guid>
      <description>&lt;p&gt;图片的居中显示css有很多方法，但在很多情况下有的方法无效，这是件很头疼的事情，在研究wordprss程序的时候，无意发现这个系统的官方处理图片居中，居左，居右的css写法，分享一下！&lt;/p&gt;

&lt;p&gt;比如一个图片的&lt;img class=&amp;#8221;alignleft &amp;#8220;&gt;，居左，设置图片的img属性左浮动；居右，设置右浮动；水平居中，设置margin:auto。后来一想，这个办法很不错，应该是一个在很多情况下都有效的方法！&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>