<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python3 on 小谈博客</title>
    <link>http://tanteng.me/categories/python3/</link>
    <description>Recent content in Python3 on 小谈博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 13 Dec 2015 16:24:57 +0000</lastBuildDate>
    
	<atom:link href="http://tanteng.me/categories/python3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>安装MySQL-python包遇到的问题</title>
      <link>http://tanteng.me/2015/12/python-install-mysql-python/</link>
      <pubDate>Sun, 13 Dec 2015 16:24:57 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/python-install-mysql-python/</guid>
      <description>&lt;p&gt;使用pip install MySQL-python的方式安装，遇到以下几个问题：&lt;/p&gt;

&lt;p&gt;1.提示错误EnvironmentError: mysql_config not found&lt;/p&gt;

&lt;p&gt;这是因为本机是Mac OSX系统，并且装的MySQL是MAMP集成环境中的，实际上mysql_config这个文件是存在的，但是默认包里面的路径有问题，可以重新装一个MySQL到系统默认位置，不过既然已经有了MySQL不想重复装。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SAE使用第三方Python依赖包</title>
      <link>http://tanteng.me/2015/12/sae-python-vendor/</link>
      <pubDate>Sat, 12 Dec 2015 07:34:20 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/sae-python-vendor/</guid>
      <description>&lt;p&gt;在SAE上创建了一个Python Flask应用，可以正常运行，但是在本地安装测试了Flask-Cache模块后传上去，网站无法运行，提示缺少包，如何在SAE使用第三方Python依赖包呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python最佳实践的一些小技巧</title>
      <link>http://tanteng.me/2015/12/python-best-practice/</link>
      <pubDate>Sat, 12 Dec 2015 04:08:44 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/python-best-practice/</guid>
      <description>Python最佳实践的一些小技巧
链接：http://python.jobbole.com/83552/</description>
    </item>
    
    <item>
      <title>Flask配置本地虚拟主机访问及Apache反向代理</title>
      <link>http://tanteng.me/2015/12/flask-vhost-apache-proxy/</link>
      <pubDate>Fri, 11 Dec 2015 14:30:39 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/flask-vhost-apache-proxy/</guid>
      <description>&lt;p&gt;本地访问Flask应用，首先要启动应用，如下：&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true &#34;&gt;(venv)tantengdeMacBook-Pro:pythonflask tanteng$ python run.py
 * Restarting with stat
 * Debugger is active!
 * Debugger pin code: 200-154-157&lt;/pre&gt;

&lt;p&gt;这样表示应用开始运行了，Flask自带Web Server服务，默认监听端口5000，只需要在浏览器访问127.0.0.1:5000就可以了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask配置文件使用类和继承方式</title>
      <link>http://tanteng.me/2015/12/flask-config-extends-class/</link>
      <pubDate>Fri, 11 Dec 2015 11:42:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/flask-config-extends-class/</guid>
      <description>&lt;p&gt;Flask中加载配置文件的方法是：&lt;/p&gt;

&lt;pre class=&#34;lang:python mark:5 decode:true&#34;&gt;from flask import Flask, session, g, render_template
# from flask_openid.ext.openid import OpenID

app = Flask(__name__)
app.config.from_object(&#39;websiteconfig&#39;)&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>让PyCharm可以识别virtualenv中的包</title>
      <link>http://tanteng.me/2015/12/pycharm-virtualenv/</link>
      <pubDate>Thu, 10 Dec 2015 01:49:49 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/pycharm-virtualenv/</guid>
      <description>&lt;p&gt;比如安装Flask框架，需要在virtualenv虚拟环境中安装依赖包，也运行在virtualenv环境中，PyCharm IDE无法识别Flask和依赖包，也就不能转到定义，智能提示等，如何让PyCharm可以识别virtualenv中的包？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/flask-pycharm-setting-interpreter.png&#34; rel=&#34;attachment wp-att-9164&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-9164&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/flask-pycharm-setting-interpreter.png&#34; alt=&#34;flask-pycharm-setting-interpreter&#34; width=&#34;1109&#34; height=&#34;701&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/flask-pycharm-setting-interpreter.png 1109w, https://blog.tanteng.me/wp-content/uploads/2015/12/flask-pycharm-setting-interpreter-768x485.png 768w&#34; sizes=&#34;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask-website: No module named flask.ext.openid</title>
      <link>http://tanteng.me/2015/12/no-module-named-flask-ext-openid/</link>
      <pubDate>Wed, 09 Dec 2015 10:35:12 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/no-module-named-flask-ext-openid/</guid>
      <description>&lt;p&gt;在本地运行Flask官网程序（Github:&lt;a href=&#34;https://github.com/mitsuhiko/flask-website&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://github.com/mitsuhiko/flask-website&#34;&gt;https://github.com/mitsuhiko/flask-website&lt;/a&gt;&lt;/a&gt;），安装好requirements.txt里所依赖的模块后，运行报错：No module named flask.ext.openid.&lt;/p&gt;

&lt;p&gt;这里需要把flask_website目录下的\__init__.py文件进行如下修改：&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true  &#34;&gt;# from flask_openid.ext.openid import OpenID
from flask_openid import OpenID&lt;/pre&gt;

&lt;p class=&#34;&#34;&gt;
  再运行run.py启动网站，通过浏览器访问127.0.0.1:5000成功访问！
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python装饰器示例</title>
      <link>http://tanteng.me/2015/12/python-mydecorator/</link>
      <pubDate>Wed, 09 Dec 2015 03:10:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/python-mydecorator/</guid>
      <description>&lt;p&gt;在许多地方会发现这样的写法：&lt;/p&gt;

&lt;pre class=&#34;lang:python mark:1 decode:true&#34;&gt;@app.route(&#39;/&#39;)
def hello_world():
    return &#39;Hello World!&#39;&lt;/pre&gt;

&lt;p&gt;调用函数前加一个@是什么鬼，原来它是使用Python装饰器。根据网上的教程写一个简单的Python装饰器示例：&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true &#34;&gt;# coding=utf-8

# 定义一个装饰器
def mydecorator(func):
    def wrapper(*args,**kw):
        print(&#39;hi,now is:&#39;)
        return func(*args,**kw)
    return wrapper

# 使用装饰器
@mydecorator
def now():
    print(&#39;2015-12-9&#39;)

now()&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>第一个Flask程序</title>
      <link>http://tanteng.me/2015/12/flask-hello-world/</link>
      <pubDate>Tue, 08 Dec 2015 11:36:44 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/flask-hello-world/</guid>
      <description>&lt;p&gt;第一个Flask程序从Hello World开始，首先安装好Flask环境及框架后，在目录新建hello.py，如下：&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true &#34;&gt;from flask import Flask
app = Flask(__name__)

@app.route(&#39;/&#39;)
def hello_world():
    return &#39;Hello World!&#39;

if __name__ == &#39;__main__&#39;:
    app.run()&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>安装Flask出错解决以及pip trusted-host参数</title>
      <link>http://tanteng.me/2015/12/trusted-host-pip/</link>
      <pubDate>Tue, 08 Dec 2015 11:31:50 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/trusted-host-pip/</guid>
      <description>&lt;p&gt;安装Flask报错：&lt;/p&gt;

&lt;p&gt;The repository located at pypi.douban.com is not a trusted or secure host and is being ignored. If this repository is available via HTTPS it is recommended to use HTTPS instead, otherwise you may&lt;/p&gt;

&lt;p&gt;silence this warning and allow it anyways with &amp;#8216;&amp;#8211;trusted-host pypi.douban.com&amp;#8217;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/flask_install_error.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-9145&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/flask_install_error.png&#34; alt=&#34;flask_install_error&#34; width=&#34;783&#34; height=&#34;326&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows升级Python2.7.6到2.7.9版本</title>
      <link>http://tanteng.me/2015/12/windows-python-279/</link>
      <pubDate>Tue, 08 Dec 2015 06:18:55 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/windows-python-279/</guid>
      <description>&lt;p&gt;Windows上升级Python2.7.6版本到2.7.9版本，因为都是2.7版本，是同一个安装目录，直接下载一个2.7.9版本的安装程序，覆盖原路径即可。经测可行。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/python279.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-9139&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/12/python279.png&#34; alt=&#34;python279&#34; width=&#34;499&#34; height=&#34;428&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask安装: A true SSLContext object is not available</title>
      <link>http://tanteng.me/2015/12/flask-sslcontext/</link>
      <pubDate>Tue, 08 Dec 2015 05:35:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/12/flask-sslcontext/</guid>
      <description>&lt;p&gt;如果安装Flask出现这样的报错:InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL&lt;/p&gt;

&lt;p&gt;appropriately and may cause certain SSL connections to fail. For more information, see &lt;a href=&#34;https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning&#34;&gt;https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在windows上安装Python2.7 Scrapy模块</title>
      <link>http://tanteng.me/2015/11/windows-python27-scrapy/</link>
      <pubDate>Thu, 26 Nov 2015 03:39:21 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/windows-python27-scrapy/</guid>
      <description>&lt;p&gt;由于Scrapy目前对Python2.7的支持最好，Python3下可能会有问题，所以还是在Python2.7下装Scrapy模块。&lt;/p&gt;

&lt;p&gt;在Mac上自带的Python2.7环境安装Scrapy模块，一路顺风，直接pip install -i &lt;a href=&#34;http://pypi.douban.com/simple&#34;&gt;http://pypi.douban.com/simple&lt;/a&gt; Scrapy,自动安装所需的模块，一切OK.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3单例模式示例</title>
      <link>http://tanteng.me/2015/11/python-singleton/</link>
      <pubDate>Tue, 24 Nov 2015 06:44:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/python-singleton/</guid>
      <description>&lt;p&gt;当我们理解了Python的__new__方法后，我们还可以利用它来做一些其他有趣的事情，比如实现设计模式中的单例模式(singleton) 。&lt;/p&gt;

&lt;p&gt;因为类每一次实例化后产生的过程都是通过__new__来控制的，所以通过重载__new__方法，我们可以很简单的实现单例模式。&lt;/p&gt;

&lt;p&gt;先看在python3中怎么实现单例模式：&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true&#34;&gt;class Singleton(object):
    def __new__(cls):
        if not hasattr(cls, &#39;instance&#39;):
            cls.instance = super(Singleton, cls).__new__(cls)
        return cls.instance

if __name__ == &#39;__main__&#39;:
    a = Singleton() 
    b = Singleton() 
    print(id(a))
    print(id(b))&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>使用pip镜像方式安装python包</title>
      <link>http://tanteng.me/2015/11/pip-mirror/</link>
      <pubDate>Tue, 24 Nov 2015 03:44:36 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/pip-mirror/</guid>
      <description>&lt;p&gt;使用pip安装python包由于官网经常被墙无法安装，可以使用pip镜像方式安装python包。&lt;/p&gt;

&lt;h3 id=&#34;几个pypi镜像地址&#34;&gt;几个pypi镜像地址&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;pypi.python.org&lt;/li&gt;
&lt;li&gt;pypi.douban.com&lt;/li&gt;
&lt;li&gt;pypi.hustunique.com&lt;/li&gt;
&lt;li&gt;pypi.gocept.com&lt;/li&gt;
&lt;li&gt;pypi.tuna.tsinghua.edu.cn&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>学python的几本电子书</title>
      <link>http://tanteng.me/2015/11/python-ebook/</link>
      <pubDate>Tue, 17 Nov 2015 02:05:28 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/python-ebook/</guid>
      <description>看云上几本学python的免费电子书：
链接：http://www.kancloud.cn/tag/Python</description>
    </item>
    
    <item>
      <title>Python3 Requests模块get和post示例</title>
      <link>http://tanteng.me/2015/11/python3-requests-get-post/</link>
      <pubDate>Thu, 05 Nov 2015 06:48:23 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/python3-requests-get-post/</guid>
      <description>&lt;p&gt;使用Python3的Requests模块用于模拟get和post请求非常简单强大，可以构造header头，传递各种类型参数，cookies，session等，模拟不同的请求，这里只演示一下最简单的get和post示例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何使用python3刷微信步数</title>
      <link>http://tanteng.me/2015/11/python3-wechat/</link>
      <pubDate>Wed, 04 Nov 2015 14:05:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/11/python3-wechat/</guid>
      <description>&lt;p&gt;由于微信第三方接口的漏洞，一款乐动力的运动APP可以用来刷微信步数，原理很简单，伪造POST请求就可以了。&lt;/p&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/11/swxbs.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-8853&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/11/swxbs.jpg&#34; alt=&#34;微信刷步数&#34; width=&#34;320&#34; height=&#34;568&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/11/swxbs.jpg 320w, https://blog.tanteng.me/wp-content/uploads/2015/11/swxbs-169x300.jpg 169w&#34; sizes=&#34;(max-width: 320px) 100vw, 320px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3异常处理和异常类型</title>
      <link>http://tanteng.me/2015/08/python-excption/</link>
      <pubDate>Wed, 19 Aug 2015 02:34:08 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/python-excption/</guid>
      <description>&lt;h3 id=&#34;python的异常处理&#34;&gt;Python的异常处理&lt;/h3&gt;

&lt;p&gt;如下是使用Python的xlrd模块打款excel文件，这个操作可能会出现异常，使用try捕捉异常，进行处理，防止程序的中断运行，并且记录异常信息到日志。&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true &#34;&gt;def save_file(file, filename):
    &#34;&#34;&#34;
    打开excel文件
    &#34;&#34;&#34;
    try:
        book = xlrd.open_workbook(file)
        sheet = book.sheet_by_index(0)
    except Exception as e:
        logging.info(&#39;错误：{0} 文件：{1}&#39;.format(e, file))
        shutil.copy2(file, &#39;./error&#39; + filename)
        return False
    row_nums = sheet.nrows
    col_nums = sheet.ncols&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Python中for循环的else</title>
      <link>http://tanteng.me/2015/08/python-for-else/</link>
      <pubDate>Mon, 17 Aug 2015 07:51:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/08/python-for-else/</guid>
      <description>&lt;p class=&#34;&#34;&gt;
  Python中循环语句for或者while后else表示循环条件不成立的时候执行，如：
&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true &#34;&gt;# -*- coding:utf-8 -*-
for i in range(10):
    print(i)

    if i == 5:  # 此时不会执行else，当i大于等于10的时候，就不满足for条件，就执行else
        print(&#34;Too big - I&#39;m giving up!&#34;)
        break
else:
    print(&#34;Completed successfully&#34;)&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Python根据ObjectId下载GridFS文档</title>
      <link>http://tanteng.me/2015/07/python-gridfs-objectid/</link>
      <pubDate>Thu, 30 Jul 2015 03:56:15 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-gridfs-objectid/</guid>
      <description>&lt;p&gt;使用MongoDB的GridFS存取文件，如何用Python根据ObjectId来下载指定的文档呢？这里需要用到bson.objectid模块中的方法来生成MongoDB的ObjectId.&lt;/p&gt;

&lt;p&gt;查询语句：&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true &#34;&gt;file = fs.find_one({&#39;_id&#39;: ObjectId(&#39;55b98b70498e38fdda304209&#39;)})&lt;/pre&gt;

&lt;p&gt;这里ObjectId需要引入bson.objectid才能使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python连接Mysql常用的库（mysqlclient示例）</title>
      <link>http://tanteng.me/2015/07/python-mysql/</link>
      <pubDate>Wed, 15 Jul 2015 02:18:38 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-mysql/</guid>
      <description>&lt;p&gt;Python连接Mysql常用的库有MySQLdb，mysqlclient，MySQL Connector/Python，但是django文档上推荐使用mysqlclient，以下截取django官网关于MySQL API的介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python编码风格</title>
      <link>http://tanteng.me/2015/07/python-encoding-style/</link>
      <pubDate>Tue, 14 Jul 2015 08:45:15 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-encoding-style/</guid>
      <description>&lt;p&gt;&lt;span id=&#34;131&#34;&gt;对于 Python 而言， &lt;span id=&#34;index-7&#34;&gt; &lt;/span&gt; PEP 8 已成为大多数项目遵循的风格指南；&lt;/span&gt;&lt;span id=&#34;132&#34;&gt;它给出了一个高度可读，视觉友好的编码风格。&lt;/span&gt;&lt;span id=&#34;133&#34;&gt;每个 Python 开发者应该阅读一下；&lt;/span&gt;&lt;span id=&#34;134&#34;&gt;这里是为你提取出来的最重要的要点：&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3接收命令行参数sys.argv用法</title>
      <link>http://tanteng.me/2015/07/python3-sys-argv/</link>
      <pubDate>Mon, 13 Jul 2015 15:59:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python3-sys-argv/</guid>
      <description>&lt;p&gt;Python3中，使用sys.argv可以接收命令行传入的参数，需要import sys模块，sys.argv第一个参数是文件名，无需定义，第二参数开始是命令行输入的参数，以空格隔开。&lt;/p&gt;

&lt;p&gt;举例如下，运行sys_argv.py脚本附带两个参数分别是run1和run2，运行结果如下：&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true&#34;&gt;&amp;gt;&amp;gt;&amp;gt;python3 sys_argv.py run1 run2
I&#39;m action1
I&#39;m action2&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>为什么Python类的方法需要加self作为第一个参数？</title>
      <link>http://tanteng.me/2015/07/python-self/</link>
      <pubDate>Sun, 12 Jul 2015 10:15:31 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-self/</guid>
      <description>&lt;p&gt;为什么Python类的方法需要加self作为第一个参数？比如Python类的方法都是这样定义的：&lt;/p&gt;

&lt;pre&gt;class CharField(Field):
    description = _(&#34;String (up to %(max_length)s)&#34;)

    def __init__(self, *args, **kwargs):
        super(CharField, self).__init__(*args, **kwargs)
        self.validators.append(validators.MaxLengthValidator(self.max_length))

    def check(self, **kwargs):
        errors = super(CharField, self).check(**kwargs)
        errors.extend(self._check_max_length_attribute(**kwargs))
        return errors&lt;/pre&gt;

&lt;p&gt;看到一篇文章讲这个问题，转载过来了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>local variable ‘count’ referenced before assignment</title>
      <link>http://tanteng.me/2015/07/local-variable-referenced-before-assignment/</link>
      <pubDate>Sat, 11 Jul 2015 14:34:00 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/local-variable-referenced-before-assignment/</guid>
      <description>&lt;p&gt;在写一个Python闭包函数实现计数器功能的时候，出现了报错：local variable &amp;#8216;count&amp;#8217; referenced before assignment.这是怎么回事呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python函数中的函数(闭包示例)</title>
      <link>http://tanteng.me/2015/07/python-closure/</link>
      <pubDate>Sat, 11 Jul 2015 14:21:51 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-closure/</guid>
      <description>&lt;p&gt;Python函数中也可以定义函数，也就是闭包。跟js中的闭包概念其实差不多，举个Python中闭包的例子。&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true&#34;&gt;def make_adder(addend):
    def adder(augend):
        return augend + addend
    return adder

p = make_adder(23)
q = make_adder(44)

print(p(100))
print(q(100))&lt;/pre&gt;

&lt;p&gt;运行结果是：123和144.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3可变参数*args,**kwargs及区别</title>
      <link>http://tanteng.me/2015/07/python-args-kwargs/</link>
      <pubDate>Sat, 11 Jul 2015 13:37:44 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-args-kwargs/</guid>
      <description>&lt;p&gt;在Python的函数参数中经常可以看到*args和**kwargs这样的写法，这是Python的魔法参数，也就是可变参数，它支持传入多个参数，下面看看它们的区别。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3基础:String模块ascii_letters和digits</title>
      <link>http://tanteng.me/2015/07/python3-ascii-letters/</link>
      <pubDate>Sat, 11 Jul 2015 05:10:10 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python3-ascii-letters/</guid>
      <description>&lt;p&gt;本文介绍Python3中String模块ascii_letters和digits方法，其中ascii_letters是生成所有字母，从a-z和A-Z,digits是生成所有数字0-9.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3中的真除和Floor除法</title>
      <link>http://tanteng.me/2015/07/python3-floor-division/</link>
      <pubDate>Fri, 10 Jul 2015 13:43:54 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python3-floor-division/</guid>
      <description>&lt;p&gt;在Python3中，除法运算有两种，一种是真除，一种是Floor除法，这两者是有分别的，分别如代码所示：&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true python&#34;&gt;&amp;gt;&amp;gt;&amp;gt;10/4
2.5
&amp;gt;&amp;gt;&amp;gt;10//4
2
&amp;gt;&amp;gt;&amp;gt;10/4.0
2.5
&amp;gt;&amp;gt;&amp;gt;10//4.0
2.0&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Python保存MongoDB上的文件到本地</title>
      <link>http://tanteng.me/2015/07/python-mongodb-save-file/</link>
      <pubDate>Fri, 10 Jul 2015 09:47:34 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-mongodb-save-file/</guid>
      <description>MongoDB上的文档通过GridFS来操作，Python也可以通过pymongo连接MongoDB数据库，使用pymongo模块的gridfs方法操作文档。以下示例是把MongoDB上GridFS存的excel文档保存到本地。
from pymongo import MongoClient import gridfs client = MongoClient(&#39;mongodb://username:pwd@192.168.1.22:27017/send_excel&#39;) db = client.js_send_excel fs = gridfs.GridFS(db) files = fs.find() print(&#39;总数：&#39;, files.count()) for ffle in files: if ffle.filename.find(&#39;.xls&#39;) &amp;gt; 0: with open(ffle.filename, &#39;wb&#39;) as f1: f1.write(ffle.read()) &amp;nbsp;</description>
    </item>
    
    <item>
      <title>Python中的switch case</title>
      <link>http://tanteng.me/2015/07/python%E4%B8%AD%E7%9A%84switch-case/</link>
      <pubDate>Thu, 09 Jul 2015 12:51:21 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python%E4%B8%AD%E7%9A%84switch-case/</guid>
      <description>&lt;p&gt;Python本身并没有其他语言都有的switch,case这种语言结构，那么在Python中，是如何代替switch的呢？&lt;/p&gt;

&lt;p&gt;Python使用字典的数据类型来代替switch，发挥switch的功能，代码如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python连接MongoDB数据库示例（带用户名密码）</title>
      <link>http://tanteng.me/2015/07/pymongo-cllient/</link>
      <pubDate>Tue, 07 Jul 2015 10:39:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/pymongo-cllient/</guid>
      <description>Python使用pymongo操作MongoDB数据库，首先需要安装pymongo模块，如下示例是通过pymongo连接MongoDB数据库，带用户名和密码：
from pymongo import MongoClient import datetime client = MongoClient(&#39;mongodb://tanteng:123456@localhost:27017/&#39;) db = client.js_send_excel post = {&#34;author&#34;: &#34;Xiaofeng&#34;, &#34;text&#34;: &#34;My first blog post!&#34;, &#34;tags&#34;: [&#34;mongodb&#34;, &#34;python&#34;, &#34;pymongo&#34;],} posts = db.posts post_id = posts.insert_one(post).inserted_id print(post_id) 请参加pymongo官方文档获取更多Python操作MongoDB的方法。</description>
    </item>
    
    <item>
      <title>Python彩蛋import this</title>
      <link>http://tanteng.me/2015/07/python-import-this/</link>
      <pubDate>Sun, 05 Jul 2015 11:57:04 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/07/python-import-this/</guid>
      <description>&lt;p&gt;Python有个彩蛋，比如在交互模式下输入import this，便会看到如下语句，这是Python的一些思想哲学以及Python的理念。&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-8363 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/07/python_import_this.jpg&#34; alt=&#34;python彩蛋&#34; width=&#34;684&#34; height=&#34;440&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/07/python_import_this.jpg 684w, https://blog.tanteng.me/wp-content/uploads/2015/07/python_import_this-300x193.jpg 300w&#34; sizes=&#34;(max-width: 684px) 100vw, 684px&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>你知道一副牌中有多少种牛牛的情况吗？？</title>
      <link>http://tanteng.me/2015/05/niuniu/</link>
      <pubDate>Tue, 26 May 2015 08:25:25 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/niuniu/</guid>
      <description>&lt;p&gt;前段时间开始学习一门编程语言Python，想到玩的一种牌类游戏，叫牛牛，以前我不会玩，也是最近学会的，然后就想到写个程序列举出一副牌中所有牛牛的牌型，觉得很有意思，于是就动手写。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何高效使用Django QuerySets</title>
      <link>http://tanteng.me/2015/05/django-querysets/</link>
      <pubDate>Fri, 15 May 2015 16:07:40 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/django-querysets/</guid>
      <description>这是一篇很好的文章，讲如何高效使用Django QuerySets，有很多例子：
http://www.oschina.net/translate/django-querysets</description>
    </item>
    
    <item>
      <title>Python 3使用Mysql几种方式</title>
      <link>http://tanteng.me/2015/05/python3-mysql/</link>
      <pubDate>Tue, 12 May 2015 13:46:01 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python3-mysql/</guid>
      <description>&lt;p&gt;There are currently a few options for using Python 3 with mysql:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pypi.python.org/pypi/mysql-connector-python&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://pypi.python.org/pypi/mysql-connector-python&#34;&gt;https://pypi.python.org/pypi/mysql-connector-python&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Officially supported by Oracle&lt;/li&gt;
&lt;li&gt;Pure python&lt;/li&gt;
&lt;li&gt;A little slow&lt;/li&gt;
&lt;li&gt;Not compatible with MySQLdb&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Python使用tablib生成excel文件简单示例</title>
      <link>http://tanteng.me/2015/05/python-tablib-excel/</link>
      <pubDate>Tue, 12 May 2015 08:45:33 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-tablib-excel/</guid>
      <description>&lt;pre class=&#34;lang:python decode:true&#34;&gt;import tablib
headers = (&#39;lie1&#39;, &#39;lie2&#39;, &#39;lie3&#39;, &#39;lie4&#39;, &#39;lie5&#39;)
mylist = [(&#39;23&#39;,&#39;23&#39;,&#39;34&#39;,&#39;23&#39;,&#39;34&#39;),(&#39;sadf&#39;,&#39;23&#39;,&#39;sdf&#39;,&#39;23&#39;,&#39;fsad&#39;)]
mylist = tablib.Dataset(*mylist, headers=headers)
with open(&#39;excel.xlsx&#39;, &#39;wb&#39;) as f:
    f.write(mylist.xlsx)&lt;/pre&gt;

&lt;p&gt;这是一个基本的最简单的使用tablib生成excel文件的示例，首先要安装tablib模块，在命令行输入:pip intall tablib，即可自动下载安装。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>from urllib import request和import urlib.request的区别</title>
      <link>http://tanteng.me/2015/05/python-from-import/</link>
      <pubDate>Tue, 12 May 2015 07:41:07 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-from-import/</guid>
      <description>&lt;p&gt;Python中from urllib import request和import urlib.request的区别：&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true &#34;&gt;from urllib import request
# access request directly.
mine = request()

import urllib.request
# used as urllib.request
mine = urllib.request()&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>beautiful soul 4 for Python3中文文档</title>
      <link>http://tanteng.me/2015/05/beautiful-soul-4-for-python3/</link>
      <pubDate>Mon, 11 May 2015 13:29:48 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/beautiful-soul-4-for-python3/</guid>
      <description>beautiful soul 4 for Python3中文文档：
http://beautifulsoup.readthedocs.org/en/latest/#</description>
    </item>
    
    <item>
      <title>Python文件名不能和已有模块名重名</title>
      <link>http://tanteng.me/2015/05/python-filename/</link>
      <pubDate>Mon, 11 May 2015 09:14:32 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-filename/</guid>
      <description>今天学习Python正则表达式，用到了re模块，新建了一个“re.py”文件写几行代码，但就是通不过编译，提示错误：&amp;#8217;module&amp;#8217; object has no attribute &amp;#8216;compile&amp;#8217;。但是在命令行测试是可以的，问题在于我的文件名re.py命名不规范，和Python自带的re模块重名了，这是不允许的。</description>
    </item>
    
    <item>
      <title>Python3 requests包抓取并保存网页源码</title>
      <link>http://tanteng.me/2015/05/requests-html/</link>
      <pubDate>Mon, 11 May 2015 05:44:42 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/requests-html/</guid>
      <description>&lt;p&gt;使用Python 3的requests模块抓取网页源码并保存到文件示例：&lt;/p&gt;

&lt;pre class=&#34;lang:python mark:3-4 decode:true&#34;&gt;import requests
html = requests.get(&#34;http://www.baidu.com&#34;)
with open(&#39;test.txt&#39;,&#39;w&#39;,encoding=&#39;utf-8&#39;) as f:
    f.write(html.text)&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Python作用域代码演示</title>
      <link>http://tanteng.me/2015/05/python-scope/</link>
      <pubDate>Sun, 10 May 2015 04:24:45 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-scope/</guid>
      <description>&lt;p&gt;每一个编程语言都有变量的作用域的概念，Python也不例外，以下是Python作用域的代码演示：&lt;/p&gt;

&lt;pre class=&#34;lang:python decode:true &#34;&gt;def scope_test():
    def do_local():
        spam = &#34;local spam&#34;
    def do_nonlocal():
        nonlocal spam
        spam = &#34;nonlocal spam&#34;
    def do_global():
        global spam
        spam = &#34;global spam&#34;

    spam = &#34;test spam&#34;
    do_local()
    print(&#34;After local assignment:&#34;, spam)
    do_nonlocal()
    print(&#34;After nonlocal assignment:&#34;, spam)
    do_global()
    print(&#34;After global assignment:&#34;, spam)

scope_test()
print(&#34;In global scope:&#34;, spam)&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Python字典get方法小例子</title>
      <link>http://tanteng.me/2015/05/python-dict-get/</link>
      <pubDate>Fri, 08 May 2015 15:34:06 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-dict-get/</guid>
      <description>&lt;p&gt;Python定义一个字典：dict = {&amp;#8216;iphone&amp;#8217;:&amp;#8217;apple&amp;#8217;,&amp;#8217;xiaomi&amp;#8217;,&amp;#8217;xiaomi&amp;#8217;,&amp;#8217;huawei&amp;#8217;:&amp;#8217;hua&amp;#8217;}，那么我要查找键名为xiaomi对应的值，如果我们知道存在这个键，直接dict[&amp;#8216;xiaomi&amp;#8217;]就好了，但是要判断有没有这个键存在怎么办呢？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py2.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-8013&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py2.png&#34; alt=&#34;py2&#34; width=&#34;440&#34; height=&#34;272&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py2.png 440w, https://blog.tanteng.me/wp-content/uploads/2015/05/py2-300x185.png 300w&#34; sizes=&#34;(max-width: 440px) 100vw, 440px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python减少循环层次和缩进技巧</title>
      <link>http://tanteng.me/2015/05/python-for-level/</link>
      <pubDate>Fri, 08 May 2015 15:16:27 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-for-level/</guid>
      <description>&lt;p&gt;我们知道Python中冒号和缩进代表大括号，这样写已经可以节省很多代码行数，但是可以更优化，尽可能减少循环的层次和缩进，让代码看起来更简洁，逻辑更清楚。不仅Python语言如此，其他语言也一样。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py1.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-8008&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py1.png&#34; alt=&#34;py1&#34; width=&#34;440&#34; height=&#34;275&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/05/py1.png 440w, https://blog.tanteng.me/wp-content/uploads/2015/05/py1-300x188.png 300w&#34; sizes=&#34;(max-width: 440px) 100vw, 440px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python中requirements.pip文件的作用</title>
      <link>http://tanteng.me/2015/05/python-requirements-pip/</link>
      <pubDate>Fri, 08 May 2015 03:17:35 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-requirements-pip/</guid>
      <description>&lt;p&gt;在很多Python项目中都包含一个requirements.pip文件，里面写的是一些包的名称和版本之类的信息，这是做什么用的呢？&lt;/p&gt;

&lt;p&gt;比如一个requirements.pip文件内容如下：&lt;/p&gt;

&lt;p&gt;html5lib==0.999&lt;/p&gt;

&lt;p&gt;ipdb==0.8&lt;/p&gt;

&lt;p&gt;ipython==2.3.1&lt;/p&gt;

&lt;p&gt;mongo==0.2.0&lt;/p&gt;

&lt;p&gt;path.py==7.0&lt;/p&gt;

&lt;p&gt;python-dateutil==2.3&lt;/p&gt;

&lt;p&gt;requests==2.5.0&lt;/p&gt;

&lt;p&gt;unicodecsv==0.9.4&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python中__name__的含义</title>
      <link>http://tanteng.me/2015/05/python-name/</link>
      <pubDate>Fri, 08 May 2015 02:47:14 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-name/</guid>
      <description>&lt;p&gt;学习python中会发现很多python脚本都会有一句话：if __name__ == &amp;#8216;__main__&amp;#8217;。这有点像C，java中的主函数。那么Python中__name__具有什么含义呢？网上很多说法和教程，但是百闻不如一见，要自己动手去发现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在SAE上部署django</title>
      <link>http://tanteng.me/2015/05/sae-django/</link>
      <pubDate>Tue, 05 May 2015 13:26:26 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/sae-django/</guid>
      <description>&lt;p&gt;新浪SAE免费了，每月5G流量用不完，用来折腾一下Python，SAE支持PHP、Java、Python三大语言，SAE上的Python环境提供了django WEB开发框架，看看如何在SAE上部署django吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python中文基础教程</title>
      <link>http://tanteng.me/2015/05/python-guide-chinese/</link>
      <pubDate>Tue, 05 May 2015 06:13:07 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/05/python-guide-chinese/</guid>
      <description>python中文基础教程：
http://www.pythondoc.com/pythontutorial3/index.html</description>
    </item>
    
    <item>
      <title>在mac终端中如何切换到Python3</title>
      <link>http://tanteng.me/2015/04/terminal-python3/</link>
      <pubDate>Sun, 12 Apr 2015 07:05:09 +0000</pubDate>
      
      <guid>http://tanteng.me/2015/04/terminal-python3/</guid>
      <description>&lt;p&gt;在Mac中自带了Python 2.7的版本，因此在终端中输入&amp;#8221;python&amp;#8221;命令默认进入了Python2.7的环境，那么如何在mac终端中如何切换到Python3呢？&lt;/p&gt;

&lt;p&gt;首先你得去Python官网下载mac版的Python 3.4并安装。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>