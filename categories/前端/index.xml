<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on 小谈博客</title>
    <link>https://tanteng.github.io/categories/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on 小谈博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 28 May 2018 11:02:34 +0000</lastBuildDate>
    
	<atom:link href="https://tanteng.github.io/categories/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在 Laravel 中使用 DataTables 插件</title>
      <link>https://tanteng.github.io/2018/05/laravel-datatables/</link>
      <pubDate>Mon, 28 May 2018 11:02:34 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2018/05/laravel-datatables/</guid>
      <description>&lt;p&gt;DataTables 是一个 jQuery 的表格插件，记录一下在 Laravel 中使用的常用功能和用法，比如 ajax 获取数据，自定义搜索，效果展现，选项说明等等，有一些细节记录下来方便以后查看。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>window.location.reload()和window.location.href=””的区别</title>
      <link>https://tanteng.github.io/2016/12/window-location-reload-and-href/</link>
      <pubDate>Sat, 31 Dec 2016 02:55:00 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/12/window-location-reload-and-href/</guid>
      <description>&lt;p&gt;window.location.reload() 和 window.location.href=&amp;#8221;&amp;#8221; 都可以达到“刷新”当前页面的效果，但是 reload() 会保留 POST 数据，而 href 相当于重新打开这个页面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2017/03/window-location-reload.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone wp-image-11348 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2017/03/window-location-reload.png&#34; alt=&#34;window.location.reload()和window.location.href=&#39;&#39;的区别&#34; width=&#34;368&#34; height=&#34;207&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>npm install 报错: operation not permitted, rename</title>
      <link>https://tanteng.github.io/2016/08/npm-err-error-eperm-operation-not-permitted-rename/</link>
      <pubDate>Fri, 12 Aug 2016 12:30:45 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/08/npm-err-error-eperm-operation-not-permitted-rename/</guid>
      <description>&lt;p&gt;运行 npm install 命令安装依赖包，在 Mac 上的 Vagrant 装的虚拟机上没问题，在阿里云 CentOS 上也没问题，但是在 Windows 环境同样是 Vagrant 装的环境相同的虚拟机上就是不成功，报错如下：&lt;/p&gt;

&lt;p&gt;npm ERR! Error: EPERM: operation not permitted, rename &amp;#8216;/usr/share/nginx/html/tanteng.me/node_modules/duplexify&amp;#8217; -&amp;gt; &amp;#8216;/usr/share/nginx/html/tanteng.me/node_modules/.duplexify.DELETE&amp;#8217;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js 和 npm 卸载安装笔记</title>
      <link>https://tanteng.github.io/2016/08/nodejs-and-npm-install/</link>
      <pubDate>Fri, 12 Aug 2016 06:26:37 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/08/nodejs-and-npm-install/</guid>
      <description>&lt;p&gt;为了学 Vue.js，用 npm 装了 Vue，经过我的折腾，npm 被我玩坏了，干脆连 Node.js 也重新装一个，下面记录一下在本地 Windwos 环境用 vagrant 搭建的虚拟机（Homestaead）和生产环境阿里云 CentOS 系统安装 Node.js 的步骤，以及 npm 安装依赖的不同之处。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery 获取 intput file 图片的宽高和大小</title>
      <link>https://tanteng.github.io/2016/07/jquery-intput-file-width-height/</link>
      <pubDate>Mon, 25 Jul 2016 11:14:52 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/07/jquery-intput-file-width-height/</guid>
      <description>&lt;p&gt;如何判断input file表单里上传的图片的宽高和大小呢？这个时候图片还没真正上传，也不是在页面上展示，不能使用$(&amp;#8220;#id&amp;#8221;).width(),$(&amp;#8220;#id&amp;#8221;).height()这种方式。&lt;/p&gt;

&lt;p&gt;在Stack Overflow找到一个方法获取input file图片文件的宽高：&lt;/p&gt;

&lt;pre class=&#34;lang:js decode:true &#34;&gt;var _URL = window.URL || window.webkitURL;
$(&#34;#file&#34;).change(function (e) {
    var file, img;
    if ((file = this.files[0])) {
        img = new Image();
        img.onload = function () {
            alert(this.width + &#34; &#34; + this.height);
        };
        img.src = _URL.createObjectURL(file);
    }
});&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>更优雅的jQuery拼接下拉框方式</title>
      <link>https://tanteng.github.io/2016/07/jquery-append-options/</link>
      <pubDate>Mon, 11 Jul 2016 08:52:52 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/07/jquery-append-options/</guid>
      <description>&lt;p&gt;在Stack Overflow浏览到一个问题：如何用jQuery更好的拼接下拉框代码？这个小需求在实践中也写过很多次，但是网友提供了一个更优雅的jQuery拼接下拉框方式。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre class=&#34;lang:js decode:true &#34;&gt;var options = $(&#34;#options&#34;);
$.each(result, function() {
    options.append($(&#34;&amp;lt;option /&amp;gt;&#34;).val(this.ImageFolderID).text(this.Name));
});&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>使用 gulp watch</title>
      <link>https://tanteng.github.io/2016/07/gulp-watch/</link>
      <pubDate>Tue, 05 Jul 2016 06:14:18 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/07/gulp-watch/</guid>
      <description>在 Laravel 项目中，使用 gulp 前端构建工具压缩 css,js 文件并自动部署，如果在开发中，改动了 css,js 都要手动执行 gulp 命令，就会很繁琐，使用 gulp watch 监控文件变动，并实时发布，如图所示。</description>
    </item>
    
    <item>
      <title>Laravel Elixir运行gulp命令:Error in plugin ‘gulp-notify’</title>
      <link>https://tanteng.github.io/2016/06/gulp-notify-notify-send-must-be-installed/</link>
      <pubDate>Mon, 20 Jun 2016 12:58:36 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/06/gulp-notify-notify-send-must-be-installed/</guid>
      <description>&lt;p&gt;Laravel Elixir运行gulp命令出现错误提示：&lt;/p&gt;

&lt;p&gt;[20:24:02] gulp-notify: [Error in notifier] Error in plugin &amp;#8216;gulp-notify&amp;#8217;&lt;/p&gt;

&lt;p&gt;Message:notify-send must be installed on the system.&lt;/p&gt;

&lt;p&gt;虽然不影响最终的发布，但是还是解决这个问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery操作iframe页面DOM</title>
      <link>https://tanteng.github.io/2016/06/jquery-iframe/</link>
      <pubDate>Fri, 03 Jun 2016 11:36:36 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/06/jquery-iframe/</guid>
      <description>&lt;p&gt;如图，左侧是一个表单，右侧是一个iframe嵌入的页面，要实现的效果是，左边表单选择不同的模板，右侧要展现不同的模板页面，当输入的标题，文案发送改变，右侧也要实时动态变化，提供预览的效果。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2016/06/jquery_iframe.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-10135&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2016/06/jquery_iframe.png&#34; alt=&#34;jquery_iframe&#34; width=&#34;1092&#34; height=&#34;514&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown&#43;Bootstrap图片自适应属性</title>
      <link>https://tanteng.github.io/2016/05/markdown-bootstrap/</link>
      <pubDate>Tue, 03 May 2016 12:36:47 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/05/markdown-bootstrap/</guid>
      <description>&lt;p&gt;Markdown是一个很好的标记语言，越来越流行作为编辑器的语法，Bootstrap是一个前端框架，那么问题来了，Markdown的图片标记如：![alt](url)，在页面上通常会转换成html，这个时候如何给图片加Bootstrap的图片自适应属性.img-responsive?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装并使用bower工具管理前端资源</title>
      <link>https://tanteng.github.io/2016/04/bower-inpm-nstall/</link>
      <pubDate>Sat, 30 Apr 2016 14:42:54 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/04/bower-inpm-nstall/</guid>
      <description>&lt;p&gt;bower又是一个好东西，它是一个前端包管理器，是一个前端资源库的管理工具，就跟PHP的Composer，Python的pip一样，可以很方便的管理前端资源库，如js，css的扩展包。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>初识bower——前端包管理工具</title>
      <link>https://tanteng.github.io/2016/04/bower-js/</link>
      <pubDate>Sat, 30 Apr 2016 03:18:55 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/04/bower-js/</guid>
      <description>&lt;p&gt;最开始接触WEB，其实就是从前端开始，那个时候没有掌握后端语言，做静态的HTML页面，开始接触CSS，比较感兴趣，时过境迁，现在的前端技术层出不穷，越来越专业了，JS技术更是异军突起，非常强大，CSS也多了很多特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery事件绑定on()与弹窗</title>
      <link>https://tanteng.github.io/2016/04/jquery-on-dom/</link>
      <pubDate>Mon, 25 Apr 2016 12:00:21 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2016/04/jquery-on-dom/</guid>
      <description>&lt;p&gt;页面上经常会有弹窗，有的弹窗是动态生成的，有的弹窗是在页面底部隐藏的，对于动态生成的弹窗，如果要监听弹窗的事件，可以使用jQuery的事件绑定on()方法实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTML5的本地存储方案localStorage</title>
      <link>https://tanteng.github.io/2015/11/html5-localstorage/</link>
      <pubDate>Mon, 16 Nov 2015 06:20:03 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/11/html5-localstorage/</guid>
      <description>&lt;p&gt;本地存储解决方案很多，比如Flash SharedObject、Google Gears、Cookie、DOM Storage、User Data、window.name、Silverlight、Open Database等。&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-3718 size-full&#34; title=&#34;20110515054811428&#34; src=&#34;http://www.css88.com/wp-content/uploads/2011/06/20110515054811428.jpg&#34; alt=&#34;html5的本地存储localStorage&#34; width=&#34;600&#34; height=&#34;202&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery.cookie的基本用法</title>
      <link>https://tanteng.github.io/2015/08/jquery-cookie-base/</link>
      <pubDate>Fri, 14 Aug 2015 01:35:24 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/08/jquery-cookie-base/</guid>
      <description>&lt;p&gt;jQuery.cookie的基本用法：&lt;/p&gt;

&lt;p&gt;Include script &lt;em&gt;after&lt;/em&gt; the jQuery library (unless you are packaging scripts somehow else):&lt;/p&gt;

&lt;pre class=&#34;lang:js decode:true&#34;&gt;&amp;lt;script src=&#34;https://tanteng.github.io/path/to/jquery.cookie.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Create session cookie:&lt;/p&gt;

&lt;div class=&#34;highlight highlight-javascript&#34;&gt;
  &lt;pre class=&#34;lang:js decode:true&#34;&gt;$.cookie(&#39;name&#39;, &#39;value&#39;);&lt;/pre&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>使用jquery的cookie实例</title>
      <link>https://tanteng.github.io/2015/08/jquery-cookie/</link>
      <pubDate>Thu, 13 Aug 2015 13:03:13 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/08/jquery-cookie/</guid>
      <description>&lt;p&gt;jquery的cookie插件可以方便操作cookie，首先引入jquery.cookie.js文件，可以去官网下载。&lt;/p&gt;

&lt;pre class=&#34;lang:js decode:true&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34; src=&#34;__STATIC__/common/js/jquery.cookie.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;以下使用jquery的cookie实现一个简单的功能，一个公共栏，可以点击展开或者收缩，第一次进入页面默认展开，第二次以后进入页面默认收缩，但是点击也可以展开。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS代码优化及规范</title>
      <link>https://tanteng.github.io/2015/08/js-optimization/</link>
      <pubDate>Tue, 04 Aug 2015 01:35:25 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/08/js-optimization/</guid>
      <description>&lt;p&gt;1.不能用页面的index=0 1 2来寻找对应的值（防止列表结构（增加或者删除列）发生变化，代码就要做相应的修改）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/js1.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone wp-image-8477 size-full&#34; src=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/js1.png&#34; alt=&#34;js1&#34; width=&#34;484&#34; height=&#34;332&#34; srcset=&#34;https://blog.tanteng.me/wp-content/uploads/2015/08/js1.png 484w, https://blog.tanteng.me/wp-content/uploads/2015/08/js1-300x206.png 300w&#34; sizes=&#34;(max-width: 484px) 100vw, 484px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在标签中对每列的单元格添加唯一的标识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery inArray不存在返回-1</title>
      <link>https://tanteng.github.io/2015/07/jquery-inarray/</link>
      <pubDate>Mon, 06 Jul 2015 02:33:36 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/07/jquery-inarray/</guid>
      <description>判断上传的文件名扩展名是否符合要求，同时禁用提交按钮，这里用到了jQuery的inArray函数，判断是否在js数组中，不存在返回-1.
//显示上传的文件名 $(&#39;#batch_file&#39;).live(&#39;change&#39;, function() { file_name = $(this).val(); $(&#34;#file_name&#34;).html(file_name); fileExt = file_name.substr(file_name.lastIndexOf(&#34;.&#34;)).toLowerCase();//获得文件后缀名 if(-1 == $.inArray( fileExt, [&#39;.xls&#39;,&#39;.xlsx&#39;] )){ $(&#34;#fileExtErr&#34;).show(); $(&#34;#send_check&#34;).prop(&#39;disabled&#39;,true); }else{ $(&#34;#fileExtErr&#34;).hide(); $(&#34;#send_check&#34;).prop(&#39;disabled&#39;,false); } }); 当然这是在js的层面进行判断，提交后程序也要判断一次，以保证安全。</description>
    </item>
    
    <item>
      <title>window.location.assign和window.location.href区别</title>
      <link>https://tanteng.github.io/2015/06/window-location-assign-href/</link>
      <pubDate>Fri, 12 Jun 2015 06:14:30 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/06/window-location-assign-href/</guid>
      <description>&lt;p&gt;window.location.assign(url) 和 window.location.href=url 实现功能是一样的，都是跳转到网址，只是用法稍微不同。&lt;/p&gt;

&lt;pre class=&#34;lang:js decode:true &#34;&gt;window.location.assign(url);
window.location = url;
window.location.href = url;&lt;/pre&gt;

&lt;p&gt;最大的不同是，assign 会添加记录到浏览历史，点击后退可以返回之前页面。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS闭包的两个例子</title>
      <link>https://tanteng.github.io/2015/05/js-closure-example/</link>
      <pubDate>Wed, 27 May 2015 13:48:26 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/05/js-closure-example/</guid>
      <description>&lt;p&gt;之前一篇文章&lt;a href=&#34;https://blog.tanteng.me/2015/05/js-closure/&#34; target=&#34;_blank&#34;&gt;详解js闭包&lt;/a&gt;讲了什么是JS闭包，以及JS闭包的优缺点，本文再看两个JS闭包的例子，进一步理解JS闭包的作用域和特性。&lt;/p&gt;

&lt;pre class=&#34;lang:js decode:true &#34;&gt;var foo = ( function() {
    var secret = &#39;secret&#39;;
    // “闭包”内的函数可以访问 secret 变量，而 secret 变量对于外部却是隐藏的
    return {
        get_secret: function () {
            // 通过定义的接口来访问 secret
            return secret;
        },
        new_secret: function ( new_secret ) {
            // 通过定义的接口来修改 secret
            secret = new_secret;
        }
    };
} () );

foo.get_secret (); // 得到 &#39;secret&#39;
foo.secret; // Type error，访问不能
foo.new_secret (&#39;a new secret&#39;); // 通过函数接口，我们访问并修改了 secret 变量
foo.get_secret (); // 得到 &#39;a new secret&#39;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>详解js闭包</title>
      <link>https://tanteng.github.io/2015/05/js-closure/</link>
      <pubDate>Tue, 26 May 2015 10:23:23 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/05/js-closure/</guid>
      <description>详解js闭包：
http://segmentfault.com/a/1190000000652891</description>
    </item>
    
    <item>
      <title>js防止按钮重复提交</title>
      <link>https://tanteng.github.io/2015/05/js-lock/</link>
      <pubDate>Tue, 19 May 2015 03:29:30 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/05/js-lock/</guid>
      <description>&lt;p&gt;js控制按钮防止ajax重复提交数据，按钮不是button，是a标签。&lt;/p&gt;

&lt;pre class=&#34;lang:js decode:true&#34;&gt;if($(&#34;body&#34;).data(&#34;applycancel&#34;)==&#34;lock&#34;){
  return false;
}else{
    $(&#34;body&#34;).data(&#34;applycancel&#34;,&#34;lock&#34;);
}&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>jQuery最佳实践</title>
      <link>https://tanteng.github.io/2015/04/jquery-best-practice/</link>
      <pubDate>Thu, 16 Apr 2015 15:41:14 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/04/jquery-best-practice/</guid>
      <description>jQuery最佳实践
本文介绍了jQuery的不同写法的效率，开发中可以借鉴这些经验，提高前端运行性能。
阮一峰博客：http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html</description>
    </item>
    
    <item>
      <title>jQuery用eval解析json字符串</title>
      <link>https://tanteng.github.io/2015/04/jquery-eval-json/</link>
      <pubDate>Sat, 11 Apr 2015 08:58:38 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/04/jquery-eval-json/</guid>
      <description>&lt;p&gt;这里以jquery异步获取的数据类型——json对象和字符串为依据，分别介绍两种方式获取到的结果处理方式。&lt;/p&gt;

&lt;p&gt;1.对于服务器返回的JSON字符串，如果jquery异步请求没做类型说明，或者以字符串方式接受，那么需要做一次对象化处理，方式不是太麻烦，就是将该字符串放于eval()中执行一次。这种方式也适合以普通javascipt方式获取json对象，以下举例说明：&lt;/p&gt;

&lt;pre class=&#34;lang:js decode:true&#34;&gt;var dataObj=eval(&#34;(&#34;+data+&#34;)&#34;);//转换为json对象 
alert(dataObj.root.length);//输出root的子对象数量 
$.each(dataObj.root,fucntion(idx,item){ 
if(idx==0){ 
return true; 
} 

//输出每个root子对象的名称和值 
alert(&#34;name:&#34;+item.name+&#34;,value:&#34;+item.value); 
})&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>jQuery基础之grep用法示例</title>
      <link>https://tanteng.github.io/2015/04/jquery-grep/</link>
      <pubDate>Fri, 10 Apr 2015 16:28:50 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/04/jquery-grep/</guid>
      <description>&lt;p&gt;看看jquery的grep的用法代码示例：&lt;/p&gt;

&lt;pre class=&#34;lang:js decode:true&#34;&gt;&amp;lt;script&amp;gt;
var arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];
$( &#34;div&#34; ).text( arr.join( &#34;, &#34; ) );
 
arr = jQuery.grep(arr, function( n, i ) {
  return ( n !== 5 &amp;&amp; i &amp;gt; 4 );
});
$( &#34;p&#34; ).text( arr.join( &#34;, &#34; ) );
 
arr = jQuery.grep(arr, function( a ) {
  return a !== 9;
});
 
$( &#34;span&#34; ).text( arr.join( &#34;, &#34; ) );
&amp;lt;/script&amp;gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>js中Null，undefined，””，0，false的区别</title>
      <link>https://tanteng.github.io/2015/04/js-null-undefined/</link>
      <pubDate>Thu, 02 Apr 2015 15:58:08 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/04/js-null-undefined/</guid>
      <description>&lt;p&gt;1、undefined、null、&amp;#8221;&amp;#8221;、0、false这五个值在if语句中做判断，都会执行false分支&lt;/p&gt;

&lt;p&gt;2、undefined和null比较特殊，虽然null的类型是object，但是null不具有任何对象的特性，就是说我们并不能执行null.toString()、null.constructor等对象实例的默认调用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jquery性能优化技巧</title>
      <link>https://tanteng.github.io/2015/04/jquery-performance/</link>
      <pubDate>Thu, 02 Apr 2015 14:44:21 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/04/jquery-performance/</guid>
      <description>&lt;p&gt;jquery是在客户端执行，相对于网站后端开发语言来说，往往不强调js，jquery性能优化的概念，但是在页面非常复杂，各种js，ajax请求多的情况下，优化jquery的性能可以大大提高用户体验，加快页面的响应速度，还是非常有必要的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jsonp解决ajax跨域代码示例</title>
      <link>https://tanteng.github.io/2015/04/jsonp-ajax/</link>
      <pubDate>Wed, 01 Apr 2015 15:12:45 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/04/jsonp-ajax/</guid>
      <description>&lt;p&gt;有两个子域名，a.xx.com和b.xx.com，现在我在a.xx.com一个页面中发送ajax请求b.xx.com一个控制器中的方法，希望得到返回数据，但是返回状态302，应该是跨域问题没有解决。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Font Awesome图标</title>
      <link>https://tanteng.github.io/2015/01/f100-font-awesome/</link>
      <pubDate>Tue, 20 Jan 2015 06:08:30 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/01/f100-font-awesome/</guid>
      <description>css可以定义矢量图标，而不是传统的引用一张图片作为背景，或者用position定位的方式，这种图标叫做Font Awesome。常见的代码有f101，f102，f103，f104等等。
具体介绍和用法：http://www.iteblog.com/archives/1099</description>
    </item>
    
    <item>
      <title>CSS content属性</title>
      <link>https://tanteng.github.io/2015/01/css-content/</link>
      <pubDate>Tue, 20 Jan 2015 05:58:09 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/01/css-content/</guid>
      <description>&lt;p&gt;浏览网页的时候，审查元素，发现css定义了content属性，很好奇，css content属性是什么？content属性怎么用呢？比如这一段css代码：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PC版网页自动识别手机客户端并跳转</title>
      <link>https://tanteng.github.io/2015/01/pc-js-mobile/</link>
      <pubDate>Sun, 18 Jan 2015 15:23:15 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/01/pc-js-mobile/</guid>
      <description>&lt;p&gt;PC版网页自动识别手机客户端并跳转，用js进行判断是否手机客户端进行跳转最好，特别是静态网页，把这个过程通过js的方式放在用户客户端执行，可以大大减少服务器端额外处理的压力。但是有时需要通过在服务器端进行判断的情况除外。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flowplayer免费WEB视频播放器</title>
      <link>https://tanteng.github.io/2015/01/flowplayer-web-video/</link>
      <pubDate>Fri, 09 Jan 2015 09:33:20 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2015/01/flowplayer-web-video/</guid>
      <description>&lt;p&gt;Flowplayer是一款免费的WEB视频播放器，支持播放flv、swf等流媒体以及图片文件，能够非常流畅的播放视频文件，支持自定义配置和扩展。可以方便的引用，嵌入到网页中。不需要优酷等第三方视频播放。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTML6命名空间</title>
      <link>https://tanteng.github.io/2014/12/html6-namespace/</link>
      <pubDate>Mon, 08 Dec 2014 02:23:22 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2014/12/html6-namespace/</guid>
      <description>&lt;h3 id=&#34;html6-展望&#34;&gt;HTML6 展望&lt;/h3&gt;

&lt;p&gt;你有没有曾经希望能在 HTML 中使用自定义标签？比如：使用&lt;logo&gt;来显示你的网站logo，还有使用&lt;toolbar&gt;来显示工具栏等等。我们经常使 用&lt;div id=”container”&gt;和&lt;div id=”wrapper”&gt;来组织页面，在 HTML6 里我们希望可以直接使用象&lt;container&gt;和&lt;wrapper&gt;这样的自定义标签。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用css media query控制iframe高度</title>
      <link>https://tanteng.github.io/2014/11/css-query-iframe-height/</link>
      <pubDate>Mon, 24 Nov 2014 07:22:13 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2014/11/css-query-iframe-height/</guid>
      <description>&lt;p&gt;在这个场景下，需要使用css media query控制iframe高度：比如一个iframe视频在PC网页上的高度和手机网页上的高度不同。iframe的高度只能设置成固定高度或者所在div的百分比，我们可以通过css query控制这个div的高度，实现iframe在PC和手机上不同高度。&lt;/p&gt;

&lt;p&gt;首先，我们在没有定义CSS Media Query的样式里添加：&lt;/p&gt;

&lt;pre lang=&#34;css&#34;&gt;.iframe_height{
    height: 260px;
}
&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>FullPage.js轻松实现全屏滚动</title>
      <link>https://tanteng.github.io/2013/10/fullpage-js/</link>
      <pubDate>Sat, 19 Oct 2013 14:32:34 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2013/10/fullpage-js/</guid>
      <description>&lt;p&gt;FullPage.js 是一个简单而易于使用的插件，用来创建全屏滚动网站（也被称为单页网站）。除了可以创建全屏滚动效果以外，也可以给网站添加一些水平的滑块效果。能够自适应不同的屏幕尺寸，包括平板电脑和移动设备。&lt;img src=&#34;http://www.admin10000.com/UploadFiles/Document/201310/12/20131012142015906515.JPG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery回车键绑定点击事件</title>
      <link>https://tanteng.github.io/2013/06/jquery-enter/</link>
      <pubDate>Thu, 27 Jun 2013 16:37:04 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2013/06/jquery-enter/</guid>
      <description>当按下回车键时，绑定按钮点击事件代码如下，通过检测按下的键值，回车键keycode为13，判断是否是回车键，然后完成相应的方法。
 </description>
    </item>
    
    <item>
      <title>jquery cookie的用法</title>
      <link>https://tanteng.github.io/2012/09/jquery-cookie-usage/</link>
      <pubDate>Thu, 27 Sep 2012 06:10:43 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2012/09/jquery-cookie-usage/</guid>
      <description>&lt;p&gt;jQuery cookie是个很好的cookie插件，大概的使用方法如下：&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Create session cookie:&lt;/p&gt;

&lt;pre lang=&#34;jquery&#34;&gt;$.cookie(&#39;the_cookie&#39;, &#39;the_value&#39;); &lt;/pre&gt;

&lt;p&gt;Create expiring cookie, 7 days from then:&lt;/p&gt;

&lt;pre lang=&#34;jquery&#34;&gt;$.cookie(&#39;the_cookie&#39;, &#39;the_value&#39;, { expires: 7 }); &lt;/pre&gt;

&lt;p&gt;Create expiring cookie, valid across entire site:&lt;/p&gt;

&lt;pre lang=&#34;jquery&#34;&gt;$.cookie(&#39;the_cookie&#39;, &#39;the_value&#39;, { expires: 7, path: &#39;/&#39; }); &lt;/pre&gt;

&lt;p&gt;Read cookie:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTP状态码200、301、403、404、500等</title>
      <link>https://tanteng.github.io/2012/09/http-200-301-403-404-500/</link>
      <pubDate>Wed, 26 Sep 2012 15:41:36 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2012/09/http-200-301-403-404-500/</guid>
      <description>&lt;p&gt;HTTP状态码以及其含义，web前端面试常考，必须掌握。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一些常见的状态码为&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;200 &amp;#8211; 服务器成功返回网页&lt;/p&gt;

&lt;p&gt;404 &amp;#8211; 请求的网页不存在&lt;/p&gt;

&lt;p&gt;503 &amp;#8211; 服务器超时&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>全面介绍HTML5</title>
      <link>https://tanteng.github.io/2012/09/html-5/</link>
      <pubDate>Tue, 25 Sep 2012 15:49:24 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2012/09/html-5/</guid>
      <description>&lt;h1 id=&#34;目录&#34;&gt;目录&lt;/h1&gt;

&lt;h3 id=&#34;什么是html5&#34;&gt;什么是HTML5&lt;/h3&gt;

&lt;h3 id=&#34;html5新特性和效果&#34;&gt;HTML5新特性和效果&lt;/h3&gt;

&lt;h3 id=&#34;html5目前存在的应用局限&#34;&gt;HTML5目前存在的应用局限&lt;/h3&gt;

&lt;h3 id=&#34;讨论-html5适合应用于我们哪些项目&#34;&gt;讨论：HTML5适合应用于我们哪些项目？&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>javascript的关键字和保留字</title>
      <link>https://tanteng.github.io/2012/09/javascript-keywords/</link>
      <pubDate>Wed, 12 Sep 2012 15:04:04 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2012/09/javascript-keywords/</guid>
      <description>&lt;p&gt;1、关键字&lt;/p&gt;

&lt;p&gt;break&lt;/p&gt;

&lt;p&gt;case&lt;/p&gt;

&lt;p&gt;catch&lt;/p&gt;

&lt;p&gt;continue&lt;/p&gt;

&lt;p&gt;default&lt;/p&gt;

&lt;p&gt;delete&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CSS Sprites技术，利用background属性进行图片分割</title>
      <link>https://tanteng.github.io/2012/05/css-sprites/</link>
      <pubDate>Wed, 16 May 2012 02:41:43 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2012/05/css-sprites/</guid>
      <description>&lt;p&gt;CSS Sprites 技术对于广大的前端工程师来说应该是一点也不陌生。这个被国内开发者昵称为CSS精灵 CSS雪碧的家伙到底解决了什么问题，我们又怎样合理使用这个技术呢？下面让我们详细的聊聊。&lt;/p&gt;

&lt;p&gt;在大家还在拨号上网的“远古时期”，由于网速的限制，页面开发者都喜欢把网页里面的图片字节数控制的非常小，往往在一个图片文件夹里散落着n多的小碎图。随着网络技术的发展，网速的提升，大家越来越重视页面的加载速度，页面效率问题，因为每加载一张图片都会产生一次浏览器请求数，发起的请求数越多那么页面加载的速度也越慢。还有当页面加载时，图片一个个的零星显示，鼠标经过时候背景闪白等也都是我们不能忍受的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;于是乎将页面中的背景图整合到一起，利用“background-image”，“background- repeat”，“background-position”的组合进行背景定位的技术被广泛使用与了页面构建中，这就是CSS Sprites。&lt;/strong&gt;当然CSS Sprites技术也存在着维护不便，内存占用大等等的缺点。&lt;/p&gt;

&lt;p&gt;好了，如果我只说这些，那么这篇文章就有点太水了。前面那些只是对CSS Sprites技术的一个普及。作为一个开发者我们应该对它有一个更全面的认识，挖掘深度内容，这样才能有利于我们效率开发，团队协作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTML5&#43;CSS3&#43;jQuery视频播放器</title>
      <link>https://tanteng.github.io/2012/05/html5-css3-video-player/</link>
      <pubDate>Sat, 12 May 2012 05:02:47 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2012/05/html5-css3-video-player/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;毫无疑问HTML5已经是大势所趋，知名视频网站YouTube在两年前就开始推广HTML5播放器来代替Flash。虽然国内还没有完全普及HTML5浏览器，但在各大本土浏览器厂商的努力下，支持HTML5的浏览器在中国浏览器市场的占有率也在不断增长中。本教程将会手把手地教你制作一个基于HTML5&amp;amp; CSS3&amp;amp; JavaScript 技术的视频播放器。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&#34;alignnone&#34; src=&#34;https://public.bay.livefilestore.com/y1peX9JxCFEOl9YogxRdp96se7Akf9zdKPUDzo7PaASwo7P-8ZzOfsLE3KPDOorms3h2NPYQdtprM_OjqmRc6z0Hw/138_120510135003_1.jpg?psid=1&#34; alt=&#34;&#34; width=&#34;576&#34; height=&#34;241&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最终效果图&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何用javascript实现类继承</title>
      <link>https://tanteng.github.io/2012/05/javascript-class-extend/</link>
      <pubDate>Mon, 07 May 2012 12:06:53 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2012/05/javascript-class-extend/</guid>
      <description>&lt;p&gt;本文着重解析javascript类继承机制，从底层剖析javascript是怎样实现“继承”的。&lt;/p&gt;

&lt;p&gt;目前 javascript的实现继承方式并不是通过“extend”关键字来实现的，而是通过 constructor function（构造方法）和prototype属性来实现继承。首先我们创建一个animal 类&lt;/p&gt;

&lt;pre lang=&#34;javascript&#34;&gt;var animal =  function (){   //这就是constructor function 了
   this .name = &#39;pipi&#39;;
   this .age = 10;
   this .height = 0;
}
 //建立一个动物的实例
 var  a1 =   new  animal ();&lt;/pre&gt;

&lt;p&gt;构造函数与其他普通函数区别在于，1.构造函数里有 this关键字，2.调用构造函数是使用的new关键字。通过new运算符调用构造函数 animal 后，系统就会返回一个对象，这个对象就相当于&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery常用技巧</title>
      <link>https://tanteng.github.io/2011/10/jquery-2/</link>
      <pubDate>Mon, 24 Oct 2011 14:16:15 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2011/10/jquery-2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;1、关于页面元素的引用 &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过jquery的$()引用元素包括通过id、class、元素名以及元素的层级关系及dom或者xpath条件等方法，且返回的对象为jquery对象（集合对象），不能直接调用dom定义的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、jQuery对象与dom对象的转换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;只有jquery对象才能使用jquery定义的方法。注意dom对象和jquery对象是有区别的，调用方法时要注意操作的是dom对象还是 jquery对象。&lt;/p&gt;

&lt;p&gt;普通的dom对象一般可以通过$()转换成jquery对象。&lt;/p&gt;

&lt;p&gt;如：$(document.getElementById(&amp;#8220;msg&amp;#8221;))则为jquery对象，可以使用jquery的方法。&lt;/p&gt;

&lt;p&gt;由于jquery对象本身是一个集合。所以如果jquery对象要转换为dom对象则必须取出其中的某一项，一般可通过索引取出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jquery :nth-child()伪类选择器</title>
      <link>https://tanteng.github.io/2011/10/jquery-nth-child/</link>
      <pubDate>Mon, 24 Oct 2011 14:06:00 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2011/10/jquery-nth-child/</guid>
      <description>&lt;p&gt;本来是css3的伪类选择器，可惜大部分浏览器都不支持，然而jquery却给借鉴过来了， 用起来很给力很给力！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;:nth-child(&lt;em&gt;an+b&lt;/em&gt;)&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;伪类&lt;strong&gt;:nth-child()&lt;/strong&gt;的参数是_an+b_，如果按照w3.org上的描述，写成中文，很可能会让人头晕，再加上笔者的文笔水平有限，所以我决定避开an+b的说法，把它拆分成5种写法共5部分来说明。&lt;/p&gt;

&lt;p&gt;可惜目前能较好地支持她的只有Opera9+和Safari3+。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Css设置img属性让图片水平居中，居左，居右</title>
      <link>https://tanteng.github.io/2011/10/css_img/</link>
      <pubDate>Sat, 15 Oct 2011 16:43:02 +0000</pubDate>
      
      <guid>https://tanteng.github.io/2011/10/css_img/</guid>
      <description>&lt;p&gt;图片的居中显示css有很多方法，但在很多情况下有的方法无效，这是件很头疼的事情，在研究wordprss程序的时候，无意发现这个系统的官方处理图片居中，居左，居右的css写法，分享一下！&lt;/p&gt;

&lt;p&gt;比如一个图片的&lt;img class=&amp;#8221;alignleft &amp;#8220;&gt;，居左，设置图片的img属性左浮动；居右，设置右浮动；水平居中，设置margin:auto。后来一想，这个办法很不错，应该是一个在很多情况下都有效的方法！&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>